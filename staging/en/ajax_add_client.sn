
{{
package automail;
    
    function manualTransactionByAdmin(uid_transaction)
        transaction = sql(single:true, "SELECT * FROM sr_transaction WHERE uid = '?'", uid_transaction);
        
        //TODO Send Email to contractor : transaction invoice
        
    endf
    
    
    function contractorActivation(uid_contractor)
        contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
        
        //TODO Send Email to Contractor : Activation!
        
    endf
    
    
    function creditApproved(uid_credit)
        credit = sql(single:true, "SELECT * FROM sr_credit WHERE uid = '?'", uid_credit);
        contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", credit.rows.uid_contractor);
        
        //TODO send email to contractor : credit approved
        
    endf
    
    
    function creditDenied(uid_credit)
        credit = sql(single:true, "SELECT * FROM sr_credit WHERE uid = '?'", uid_credit);
        contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", credit.rows.uid_contractor);
        
        //TODO send email to contractor : credit denied
        
    endf
    
    // C03
    function projectActivatedClient(uid_project)
        project = sql(single:true,"
            SELECT c.firstname, c.lastname, c.gender, s.name_en, c.email
            FROM sr_project p
            LEFT JOIN sr_client c ON c.uid=p.uid_client
            LEFT JOIN sr_service s ON s.uid=p.uid_service
            WHERE p.uid = '?'"
            , uid_project
        );

        email = automail::getEmail("projectActivatedClient");
        email_to = project.rows.email;
        
        void email(
            from: email.from,
            to: email_to,
            subject: email.subject,
            ct:"text/html",
            charset: "utf-8",
            encoding:"base64",
            file: email.file
        );       
    endf
    
    // C04
    function projectActivatedAdmin(uid_project)
        project = sql(single:true,"
            SELECT  c.firstname, c.lastname, c.gender, p.uid_client, a.zip, a.province, a.city,
                    a.street_no, a.street, c.lang, c.languages, c.email, a.phone1, a.phone2, a.phone3,
                    p.uid as uid_project, s.name_en as service, p.description, p.due_date, p.lead_price, p.max_quotes, p.token
            FROM sr_project p
            LEFT JOIN sr_client c ON c.uid=p.uid_client
            LEFT JOIN sr_address a ON a.uid=p.uid_address
            LEFT JOIN sr_service s ON s.uid=p.uid_service
            WHERE p.uid = '?'"
            , uid_project
        );
        
        id_projet = uid_project;
        
        email = automail::getEmail("projectActivatedAdmin");
        
        void email(
            from: email.from,
            to: email.to,
            subject: parse(state:0, data:"{".+ "{use id_projet;}}" .+ email.subject),
            ct:"text/html",
            charset: "utf-8",
            encoding:"base64",
            file: email.file
        );
    endf
    
    
    // C23
    function appologiesToClientNotEnoughQuotes(uid_project)
        project = sql(single:true, "SELECT * FROM sr_project WHERE uid = '?'", uid_project);
        
        //TODO send email to client to appologies because the number of quotes was low
        
    endf
    
    
    function sendContractorToClient(uid_project_contractor)
        project_contractor = sql(single:true, "SELECT * FROM sr_project_contractor WHERE uid = '?'", uid_project_contractor);
        
        //TODO send email to client identifying the new contractor that has accepted to give him a quote
        
    endf
    
    
    // C07
    function notifyContractorWinProjectHalfPrice(uid_project_contractor)
        project_contractor = sql(single:true, "SELECT * FROM sr_project_contractor WHERE uid = '?'", uid_project_contractor);
        
        //TODO send email to contractor to notify him that he has won a project at half price, he can now contact the client to send a quote
        
    endf
    
    
    // C05
    function suggestProjectToContractor(uid_project, uid_contractor)
        project = sql(single:true, "SELECT * FROM sr_project WHERE uid = '?'", uid_project);
        contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
        
        //TODO send email to contractor to suggest a new project
        
    endf
    
    
    // C10
    function paymentFailedToContractor(uid_contractor)
        //TODO send email to the contractor to notify him that his payment failed
    endf
    
    
    // C11
    function paymentFailedToAdmin(uid_contractor)
        //TODO send email to the admin to notify him that a payment failed
    endf
    
    
    // C12
    function sendSatisfactionSurveyToClient(uid_project)
        project = sql(single:true, "SELECT * FROM sr_project WHERE uid = '?'", uid_project);
        client = sql(single:true, "SELECT * FROM sr_client WHERE uid = '?'", project.uid_client);
        contractors = sql("SELECT * FROM sr_project_contractor WHERE uid_project = '?' AND accepted = 'yes'", uid_project);
        if (contractors.nbrows > 0) then
            
            //TODO send satisfaction survey to client : show all contractors that contacted him
            
        endif
    endf
    
    
    function contractorProfileReminder1(email, id_appel_entrepreneur)
        
        //TODO send email to contractor to ask him to register on soumissionrenovation
        
    endf
    
    
    // C26
    function contractorProfileReminder2(email, id_appel_entrepreneur)
        
        //TODO send email to contractor to remind him to register on soumissionrenovation
        
    endf
    
    
    // C27
    function contractorProfileReminder3(email, id_appel_entrepreneur)
        
        //TODO send email to contractor to remind him to register on soumissionrenovation
        
    endf
    

    // C15
    function notifyAdminModifyContractorProfile() //TODO WHO IS THE CONTRACTOR ?

        use lg;
        email = automail::getEmail("notifyAdminModifyContractorProfile");
        
        void email(
            from: email.from,
            to: email.to,
            subject: parse(state:0, data:"{".+ "{use entreprise}}" .+ email.subject),
            ct:"text/html",
            charset: "utf-8",
            encoding:"base64",
            file: email.file
        );
    endf
    
    
    // C16
    function notifyAdminContractorCreditProject() //TODO WHO IS THE CONTRACTOR ?

        use lg;
        email = automail::getEmail("notifyAdminContractorCreditProject");
        
        void email(
            from: email.from,
            to: email.to,
            subject: email.subject,
            ct:"text/html",
            charset: "utf-8",
            encoding:"base64",
            file: email.file
        );
        
    endf
    
    // C18
    function notifyAdminContractorAddService() //TODO WHO IS THE CONTRACTOR ?

        use lg;
        email = automail::getEmail("notifyAdminContractorAddService");
        
        void email(
            from: email.from,
            to: email.to,
            subject: email.subject,
            ct:"text/html",
            charset: "utf-8",
            encoding:"base64",
            file: email.file
        );
        
    endf
    
    // C17
    function notifyAdminContractorChangeTerritory() //TODO WHO IS THE CONTRACTOR ?

        use lg;
        email = automail::getEmail("notifyAdminContractorChangeTerritory");
        
        void email(
            from: email.from,
            to: email.to,
            subject: email.subject,
            ct:"text/html",
            charset: "utf-8",
            encoding:"base64",
            file: email.file
        );
        
    endf
    
    // C19
    function contractorSuggestion() //TODO WHO IS THE CONTRACTOR ?

        use lg;
        email = automail::getEmail("contractorSuggestion");
        
        void email(
            from: email.from,
            to: email.to,
            subject: parse(state:0, data:"{".+ "{use entreprise; use id_entrepreneur;}}" .+ email.subject),
            ct:"text/html",
            charset: "utf-8",
            encoding:"base64",
            file: email.file
        );
        
    endf
    
    
    // C09
    function sendInvoicePdf(uid_contractor, pdf)
        // Send invoice pdf attachment to contractor (pdf contains the path)
    endf
    
    
    function getEmail(email_code)
        
        config = config();
        // get default infos
        configs = sql(single:true, "SELECT default_admin_email,default_from_address FROM sn_configs WHERE uid=1 LIMIT 1");
        default_admin_email = configs.rows.default_admin_email;
        default_from_address = configs.rows.default_from_address;   

        // get email specific infos, use default if no specific
        email = sql(single:true,"SELECT email_to, email_from, subject_en as subject FROM email WHERE code='?'", email_code);
        email_from = (email.rows.email_from) ? email.rows.email_from : default_from_address;
        email_to = (email.rows.email_to) ? email.rows.email_to : default_admin_email;
        subject = email.rows.subject;
        
        file = "/" .+ config.site .+ "/email/en/" .+ email_code .+ ".snc";
        
        // return context containing the infos
        return {"from":email_from, "to":email_to, "subject":subject, "file":file};
    endf
    
endp

}}{{
    /*
        @title contractor package
        
        @author olivier@sednove.com
        
        @version 1.0 2016-08-08

    */
    
    package contractor;
        
        function activateContractor(uid)
            automail::contractorActivation(uid);
        endf
        
        /* 
         * Returns a list of billing lines including the balance, invoices, credits and transactions.
         * The totals of 'price' is the amount to pay
         * Available fields are : uid, id, type, description, address, amount
         */
        function getCurrentBilling(uid_contractor)
            billing = sql("
            
                SELECT  null as uid,
                        '' as id,
                        'balance' as 'type',
                        'Balance' as description,
                        '' as address,
                        balance as 'amount'
                    FROM sr_contractor 
                    WHERE uid='?'
                    
                UNION
                
                SELECT  i.uid as uid,
                        p.uid as id,
                        'lead' as 'type',
                        p.description as description,
                        IF(a.uid IS NULL, '', CONCAT(a.street_no, ' ', a.street, ', ', IF(c.name IS NOT NULL, c.name, a.city), ', ', a.province, ' ', a.zip)) as address,
                        i.amount as 'amount'
                    FROM sr_invoice i
                    INNER JOIN sr_project_contractor pc ON pc.uid = i.uid_project_contractor
                    INNER JOIN sr_project p ON p.uid = pc.uid_project
                    LEFT JOIN sr_address a ON a.uid = p.uid_address
                    LEFT JOIN sr_city c ON c.uid = a.uid_city
                    WHERE   (i.completed != 'yes' OR i.completed IS NULL)
                        AND pc.uid_contractor='?'
                        
                UNION
                
                SELECT  cr.uid as uid,
                        p.uid as id,
                        'credit' as 'type',
                        'Crédit' as description,
                        '' as address,
                        (pc.lead_price*-1) as 'amount'
                    FROM sr_credit cr
                    INNER JOIN sr_project_contractor pc ON pc.uid = cr.uid_project_contractor
                    INNER JOIN sr_project p ON p.uid = pc.uid_project
                    LEFT JOIN sr_address a ON a.uid = p.uid_address
                    LEFT JOIN sr_city c ON c.uid = a.uid_city
                    WHERE   (cr.completed != 'yes' OR cr.completed IS NULL)
                        AND cr.accepted = 'yes'
                        AND pc.uid_contractor='?'
                        
                UNION
                
                SELECT  uid,
                        '' as id,
                        'transaction' as 'type',
                        'Transaction' as description,
                        '' as address,
                        (amount*-1) as 'amount'
                    FROM sr_transaction
                    WHERE   uid_contractor = '?'
                        AND (completed != 'yes' OR completed IS NULL)
                        
                ORDER BY (type = 'transaction'), id ASC, type DESC
                
                ", uid_contractor, uid_contractor, uid_contractor, uid_contractor);
            return billing.rows;
        endf
        
        function getBillingFooter(billing)
            subtotal = 0;
            transactions = 0;
            for b in billing do
                if (b.type eq 'transaction') then
                    transactions += b.amount;
                else
                    subtotal += b.amount;
                endif
            endfor
            if (subtotal < 0) then
                subtotal = 0;
            endif
            taxes = contractor::calculateTaxes(subtotal);
            balance = subtotal + taxes.taxtotal + transactions;
            if (balance <= 0) then
                balance = 0;
            endif
            return {
                'subtotal': subtotal,
                'tps': taxes.tps,
                'tvq': taxes.tvq,
                'total': subtotal + taxes.taxtotal,
                'paid': transactions,
                'balance': balance
            };
        endf
        
        function calculateTaxes(subtotal)
            if (subtotal < 0) then
                subtotal = 0;
            endif
            tps = subtotal * 0.05;
            tvq = subtotal * 0.09975;
            taxtotal = tps + tvq;
            total = subtotal + taxtotal;
            return {
                'tps': tps,
                'tvq': tvq,
                'taxtotal': taxtotal,
                'total': total
            };
        endf
        
        function getAllContractorsCurrentBillingTotalsQuery() // returns uid_contractor,balance,invoices_total,credits_total,transactions_total
            return "
                SELECT 
                    c.uid AS 'uid_contractor',
                    c.balance as 'balance',
                    (
                        SELECT sum(i.amount) 
                        FROM sr_invoice i 
                        INNER JOIN sr_project_contractor pc ON pc.uid = i.uid_project_contractor
                        WHERE pc.uid_contractor = c.uid
                        AND (i.completed is null OR i.completed != 'yes')
                    ) AS 'invoices_total',
                    (
                        SELECT sum(pc.lead_price) 
                        FROM sr_credit cr 
                        INNER JOIN sr_project_contractor pc ON pc.uid = cr.uid_project_contractor
                        WHERE pc.uid_contractor = c.uid
                        AND cr.accepted = 'yes' 
                        AND (cr.completed is null OR cr.completed != 'yes')
                    ) AS 'credits_total',
                    (
                        SELECT sum(t.amount)
                        FROM sr_transaction t
                        WHERE t.uid_contractor = c.uid
                        AND (t.completed is null OR t.completed != 'yes')
                    ) AS 'transactions_total'
                FROM sr_contractor c
            ";
        endf
        
        function getCurrentBillingTotal(uid_contractor)
            billingTotals = sql(single:true, contractor::getAllContractorsCurrentBillingTotalsQuery() .+ " WHERE c.uid = '?'", uid_contractor);
            subtotal = billingTotals.rows.invoices_total - billingTotals.rows.credits_total - billingTotals.rows.balance;
            taxes = contractor::calculateTaxes(subtotal);
            return subtotal + taxes.taxtotal - billingTotals.rows.transactions_total;
        endf
        
        function debit_charge(uid_contractor, amount)
            // Fetch credit cards
            creditcards = sql("SELECT * FROM sr_cc WHERE uid_contrator = '?' ORDER BY priority ASC, uid DESC", uid_contractor);
            for cc in creditcards.rows do
                // For each credit card, try to execute a payment
                uid_transaction = pivotal::make_payment_cc_ref(cc.reference, "CAD", amount, uid_contractor);
                if (uid_transaction) then
                    // If a payment succeeds, trigger the transaction and stop the loop
                    contractor::trigger_transaction(uid_transaction);
                    return uid_transaction;
                endif
            endfor
            // If payment failed or no credit cards found, trigger the payment failure
            contractor::trigger_payment_failed(uid_contractor);
            return false;
        endf
        
        function trigger_transaction(uid_transaction)
            transaction = sql(single:true, "SELECT * FROM sr_transaction WHERE uid = '?'", uid_transaction);
            // init totals
            invoices = [];
            credits = [];
            transactions = [];
            
            // Calculate current billing
            billing = contractor::getCurrentBilling(transaction.rows.uid_contractor);
            billing_footer = contractor::getBillingFooter(billing);
            
            // Calculate totals and list current invoices, credits, transactions
            for line in billing do
                if (line.type eq 'lead') then
                    push(invoices, line.uid);
                endif
                if (line.type eq 'credit') then
                    push(credits, line.uid);
                endif
                if (line.type eq 'transacrion') then
                    push(transactions, line.uid);
                endif
            endfor
            
            // If current billing is paid in full, clear billing and generate a pdf invoice
            if (billing_footer.balance <= 0) then
                // Clear invoices
                for uid in invoices do
                    void update(tables:'sr_invoice', uid: uid, fields:{'completed':'yes'});
                endfor
                // Clear credits
                for uid in credits do
                    void update(tables:'sr_credit', uid: uid, fields:{'completed':'yes'});
                endfor
                // Clear transactions
                for uid in transactions do
                    void update(tables:'sr_transaction', uid: uid, fields:{'completed':'yes'});
                endfor
                // Update account balance
                void update(tables:'sr_contractor', uid: transaction.rows.uid_contractor, fields:{'balance':billing_footer.balance});
                // Generate pdf invoice
                pdf = contractor::generate_pdf(transaction.rows.uid_contractor, billing);
                // Send email with pdf attached
                automail::sendInvoicePdf(transaction.rows.uid_contractor, pdf);
            endif
        endf
        
        function trigger_payment_failed(uid_contractor)
            configs = sql(single:true, "SELECT * FROM sn_configs WHERE uid = 1 LIMIT 1");
            contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
            if (contractor.nbrows > 0) then
                // Reduce credit threshold
                if (contractor.rows.credit_threshold > configs.rows.credit_limit_after_payment_failed) then
                    void update(tables: 'sr_contractor', uid: uid_contractor, fields:{'credit_threshold':configs.rows.credit_limit_after_payment_failed});
                endif
                // Send email notifications
                automail::paymentFailedToAdmin(uid_contractor);
                automail::paymentFailedToContractor(uid_contractor);
            endif
        endf
        
        function generate_pdf(uid_contractor, billing)
            contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
            lg = contractor.rows.contact_lg;
            
            contractor_address = sql(single:true, "
                    SELECT a.*, IF(c.name IS NOT NULL, c.name, a.city) as city_name 
                    FROM sr_address a 
                    LEFT JOIN sr_city c ON c.uid = a.uid_city 
                    WHERE a.uid_contractor = '?' 
                    ORDER BY a.uid ASC 
                    LIMIT 1
                ", contractor.rows.uid);
                
            billing_footer = contractor::getBillingFooter(billing);
            
            content = {
                'billing': billing,
                'billing_footer': billing_footer
            };
            
            billing_pdf = insert(table:'sr_billing_pdf', fields:{});
            tmpfilename = "pdf_".+billing_pdf.uid;
            tmpfilepath = "/tmp/".+tmpfilename;
            
            write(tmpfilepath, data:"", append:false, data:read(compilefile:'/pdf/template.txt'));
            output = exec("/extenso/utils/pdflatex.sh", tmpfilename);
            
            success_regex = 'Output written on '.+tmpfilename.+'\.pdf';
            if (output.output =~ success_regex) then
                update(tables:'sr_billing_pdf', uid: billing_pdf.uid, fields:{
                    'uid_contractor': uid_contractor,
                    'pdf': tmpfilename.+".pdf",
                    'content': stringnify(content)
                });
                return tmpfilename.+".pdf";
            else
                sql("DELETE FROM sr_billing_pdf WHERE uid = '?'", billing_pdf.uid);
                return false;
            endif
        endf
        
    endp
}}
{{
    /*
        @title project package
        
        @author olivier@sednove.com
        
        @version 1.0 2016-07-27

    */
    package project;
        
        function activateProject(uid)
            project = sql(single:true, "SELECT * FROM sr_project WHERE uid = '?'", uid);
            if (project.nbrows > 0) then
                client = sql(single:true, "SELECT * FROM sr_client WHERE uid = '?'", project.rows.uid_client);
                if (client.nbrows > 0) then
                    void sql("UPDATE FROM `sr_project` SET `active_date` = NOW() WHERE `uid` = '?'", project.rows.uid);
                    automail::projectActivatedClient(project.rows.uid);
                    automail::projectActivatedAdmin(project.rows.uid);
                    // Refresh client qualification status
                    project::qualifyClient(client);
                endif
            endif
        endf
        
        function qualifyClient(client)
            if (type(client) ne 'context' && client ne '') then
                client = sql(single:true, "SELECT * FROM sr_client WHERE uid = '?'", client);
            endif
            if (client ne '' && client.nbrows > 0 && client.rows.to_qualify eq 'yes') then
                projects_to_qualify = sql("SELECT uid FROM sr_project WHERE uid_client = '?' AND status = 'new'", client.rows.uid);
                if (projects_to_qualify.nbrows == 0) then
                    void update(tables: 'sr_client', fields:{
                        'to_qualify': 'no'
                    }, uid:client.rows.uid);
                endif
            endif
        endf
        
        function completeProject(uid_project)
            void update(tables:'sr_project', fields: {
                'status': 'completed'
            }, uid: uid_project);
        endf
        
        function acceptProjectContractor(uid_project_contractor, lead_price)
            void update(tables:'sr_project_contractor', fields: {
                'accepted': 'yes',
                'lead_price': lead_price
            }, uid: uid_project_contractor);
            void insert(table:'sr_invoice', fields:{
                'uid_project_contractor': uid_project_contractor,
                'amount': lead_price
            });
            automail::sendContractorToClient(uid_project_contractor);
        endf
        
        function connectProjectContractor(uid_project, uid_contractor)
            void insert(table:'sr_project_contractor', fields:{
                'uid_contractor': uid_contractor,
                'uid_project': uid_project
            });
            automail::suggestProjectToContractor(uid_project, uid_contractor);
        endf
        
        function findContractorsForProject(uid_project, limit)
            project = sql(single:true, "
                    SELECT  p.*,
                            city.uid_territory,
                            client.languages
                    FROM sr_project p
                    LEFT JOIN sr_client client ON p.uid_client = client.uid
                    LEFT JOIN sr_address a ON p.uid_address = a.uid
                    LEFT JOIN sr_city city ON a.uid_city = city.uid
                    WHERE uid = '?'
                ", uid_project);
            return sql("
                    SELECT c.* 
                    FROM sr_contractor c
                    WHERE   languages & '?' > 0
                        AND '?' IN (SELECT cs.uid_service FROM sr_contractor_service cs WHERE ct.uid_contractor = c.uid)
                        AND NOT EXISTS (SELECT null FROM sr_project_contractor pc WHERE pc.uid_project = '?')
                        AND '?' IN (SELECT ct.uid_territory FROM sr_contractor_territory ct WHERE ct.uid_contractor = c.uid)
                    ORDER BY (note_global + IF(uid_territory = '?', 1.1, 0)) DESC
                    LIMIT '?'
                ", project.rows.languages, project.rows.uid_service, project.rows.uid, project.rows.uid_territory, project.rows.uid_territory, limit);
        endf
        
    endp
}}{{
    /*
        @title pivotal package
        Description: This package contains function related to pivotal payments and credit cards.
        
        @author madupuis@sednove.com
        
        @version 1.0 2016-07-27
        
        sn_configs fields : pivotal_terminalid (varchar),
                            pivotal_secret (varchar),
                            pivotal_sandbox (checkbox yes/no)
                            
        credit_card_table fields :  credit_card_table_user_field (int),
                                    exp (varchar 4),
                                    last_digits (varchar 4),
                                    type (varchar),
                                    reference (varchar),
                                    name (varchar),
                                    merchantref (varchar)
                                    
        transaction_table fields :  transaction_table_user_field (int),
                                    amount (decimal),
                                    uniqueref (varchar)

    */
    package pivotal;
    
        // include the pivotal class
        %include "/class/pivotal/pivotal.sn";
        credit_card_table = "sr_cc";
        credit_card_table_user_field = "uid_contractor";
        transaction_table = "sr_transaction";
        transaction_table_user_field = "uid_contractor";
        
        
        // Main pivotal instance (singleton)
        mainInstance = null;
        
        
        /*
         * This function gets the configs from sn_configs and calls pivotal class constructor
         *
         * @author madupuis@sednove.com
         *
         * @return pivotal instance
		 *
         */
        function get_pivotal_ctx()
            if (pivotal::mainInstance == null) then
                pivotal_configs = sql(single:true,"SELECT pivotal_terminalid, pivotal_secret, pivotal_sandbox FROM sn_configs");
                terminalID = pivotal_configs.rows.pivotal_terminalid;
                secret = pivotal_configs.rows.pivotal_secret;
                sandbox = (pivotal_configs.rows.pivotal_sandbox eq 'yes');
                pivotal = new Pivotal(terminalID, secret, sandbox:sandbox);
                pivotal::mainInstance = pivotal;
            endif
            return pivotal::mainInstance;
        endf
        
        
        /*
         * This function saves a credit card using pivotal. It sets headers X-save_cc_success if SUCCESS or X-save_cc_error if ERROR.
         *
         * @author madupuis@sednove.com
         *
         * @param string type
         * @param string name
         * @param string card_number
         * @param string exp_year (2 digits)
         * @param string exp_month (2 digits)
         * @param string cvv (3-5 digits)
         * @param int uid_contractor (typically extranet_user.uid)
		 *
         */
        function save_credit_card(type, name, card_number, exp_year, exp_month, cvv, uid_contractor)
        
            // get the pivotal context (calls constructor)
            pivotal_ctx = pivotal::get_pivotal_ctx();
            
             // insert an empty credit card to get uid
            cc = insert(
                table:pivotal::credit_card_table,
                fields:{}
            );  
            
            // concatenate expiry month + year i.e. 0517 for mai 2017
            card_expiry = str_pad(exp_month, "2", "0", 1) .+ exp_year;
            
            // local reference for pivotal
            merchant_ref = "CON_" .+ uid_contractor .+ "_" .+ cc.uid;
            
            // save a card with pivotal
            card = pivotal_ctx.save_card(merchantref:merchant_ref,cardtype:uc(type),cardnumber:card_number,cardexpiry:card_expiry,name:name,cvv:cvv);
            
            if card.success then
                // update the card in the database
                void update(
                    tables:pivotal::credit_card_table,
                    uid:cc.uid,
                    fields:{
                        "type":type,
                        "name":name,
                        "exp":card_expiry,
                        "last_digits":substr(card_number, -4),
                        pivotal::credit_card_table_user_field:uid_contractor,
                        "reference": card.reference,
                        "merchantref":merchant_ref
                    }
                );
                
                return cc.uid;
            else
                // delete the temporary credit card
                void sql("DELETE FROM ".+ pivotal::credit_card_table .+" WHERE uid='?'", cc.uid);
            endif     
            
            return false;
        endf
        
        /*
         * This function makes a payment using the card informations provided. It sets headers X-payment_card_success if SUCCESS or X-payment_card_error if ERROR.
         *
         * @author madupuis@sednove.com
         *
         * @param string type
         * @param string name
         * @param string card_number
         * @param string exp_year (2 digits)
         * @param string exp_month (2 digits)
         * @param string cvv (3-5 digits)
         * @param string currency
         * @param string amount (separated by a dot for decimal)
         * @param int uid_contractor (typically extranet_user.uid)
		 *
         */
        function make_payment_card(type, name, card_number, exp_year, exp_month, cvv, currency, amount, uid_contractor)
        
            // get the pivotal context (calls constructor)
            pivotal_ctx = pivotal::get_pivotal_ctx();
            
             // insert an empty transaction to get uid
            transaction = insert(
                table:pivotal::transaction_table,
                fields:{}
            );  
            
            // concatenate expiry month + year i.e. 0517 for mai 2017
            card_expiry = str_pad(exp_month, "2", "0", 1) .+ exp_year;
            
            // orderID will be the uid of the transaction in our db
            orderID = transaction.uid;
            
            // send payment to pivotal
            payment = pivotal_ctx.payment_card(orderID:orderID,amount:amount,currency:currency,cardtype:type,cardnumber:card_number,cardexpiry:card_expiry,name:name,cvv:cvv);
            
            if payment.success then
                // update the card in the database
                void update(
                    tables:pivotal::transaction_table,
                    uid:transaction.uid,
                    fields:{
                        "amount":amount,
                        "uniqueref":payment.uniqueref,
                        pivotal::transaction_table_user_field:uid_contractor
                        
                    }
                );
                
                return transaction.uid;
            else
                // delete the temporary credit card
                void sql("DELETE FROM ".+ pivotal::transaction_table .+" WHERE uid='?'", transaction.uid);
            endif    
            
            return false;
        endf
        
        /*
         * This function makes a payment using an existing card reference. It sets headers X-payment_success if SUCCESS or X-payment_error if ERROR.
         *
         * @author madupuis@sednove.com
         *
         * @param string cc_ref
         * @param string currency
         * @param string amount (separated by a dot for decimal)
         * @param int uid_contractor (typically extranet_user.uid)
		 *
         */
        function make_payment_cc_ref(cc_ref, currency, amount, uid_contractor)
        
            // get the pivotal context (calls constructor)
            pivotal_ctx = pivotal::get_pivotal_ctx();  
            
            // insert an empty transaction to get uid
            transaction = insert(
                table:pivotal::transaction_table,
                fields:{}
            );
            
            // orderID will be the uid of the transaction in our db
            orderID = transaction.uid;
            
            payment = pivotal_ctx.payment_ref(orderID:orderID,amount:amount,currency:currency,cardnumber:cc_ref);
            
            if payment.success then
                // update the card in the database
                void update(
                    tables:pivotal::transaction_table,
                    uid:transaction.uid,
                    fields:{
                        "amount":amount,
                        "uniqueref":payment.uniqueref,
                        pivotal::transaction_table_user_field:uid_contractor
                        
                    }
                );
                
                return transaction.uid;
            else
                // delete the temporary credit card
                void sql("DELETE FROM ".+ pivotal::transaction_table .+" WHERE uid='?'", transaction.uid);
            endif 
        endf
        
        /*
         * This function makes a payment using an existing card uid. It sets headers X-payment_ref_success if SUCCESS or X-payment_ref_error if ERROR.
         *
         * @author madupuis@sednove.com
         *
         * @param string cc_uid
         * @param string currency
         * @param string amount (separated by a dot for decimal)
         * @param int uid_contractor (typically extranet_user.uid)
		 *
         */
        function make_payment_cc_uid(cc_uid, currency, amount, uid_contractor)
            cc = sql(single:true,"SELECT reference FROM ".+ pivotal::credit_card_table .+" WHERE uid='?' AND ".+ pivotal::credit_card_table_user_field .+"='?'", cc_uid, uid_contractor);
            if cc.nbrows > 0 then
                uid_transaction = pivotal::make_payment_cc_ref(cc.rows.reference, currency, amount, uid_contractor);
                if (uid_transaction) then
                    return uid_transaction;
                endif
            endif
        endf
        
    endp

    
    
}}

{{
    // include the validator for contractor_form
    %include "/site/client_form/include/validator.sn";
    
    cgidata = cgidata(disable_upload:false, directory:"/sn_uploads/");  
    
    // validate server side
    if (validator.validate(data:cgidata)) then
    
        // Check for existing client in the database and merge it. 
        existing = sql(single:true, "SELECT * FROM sr_client WHERE email = '?'", cgidata.email);
        if (existing.nbrows > 0) then
            client = existing.rows;
            void update(tables: "sr_client", fields: {
                'address': cgidata.address
            }, uid: client.uid);
        else
            client = insert(
                table:"sr_client",
                fields:{
                    "firstname":cgidata.name,
                    "email":cgidata.email,
                    "address":cgidata.address
                }
            );
        endif

        address = insert(
            table:"sr_address",
            fields:{
                "uid_client":client.uid,
                "city":cgidata.locality,
                "street_no":cgidata.street_number,
                "street":cgidata.route,
                "zip":cgidata.postal_code,
                "province":cgidata.administrative_area_level_1,
                "country":cgidata.country,
                "phone1": cgidata.phone
            }
        );
        
        configs = sql(single:true, "SELECT number_of_quotes FROM sn_configs WHERE uid = 1 LIMIT 1");
        
        project = insert(
            table:"sr_project",
            fields:{
                "uid_client":client.uid,
                "description":cgidata.description,
                "file1":cgidata.file1.sn_fullname,
                "file2":cgidata.file2.sn_fullname,
                "file3":cgidata.file3.sn_fullname,
                "file4":cgidata.file4.sn_fullname,
                "file5":cgidata.file5.sn_fullname,
                "uid_address":address.uid,
                "max_quotes": configs.rows.number_of_quotes
            }
        );

        data = {"client_uid": client.uid, "project_uid":project.uid, "address_uid":address.uid};
        data;
        
        // variables for the email body
        client_info = {
            "uid": client.uid,
            "name":cgidata.name,
            "phone":cgidata.phone,
            "email":cgidata.email,
            "address":cgidata.address,
            "postal_code": cgidata.postal_code,
            "description": cgidata.description
            
        };
        
        //TODO non-existing functions
        //automail::clientRequestConfirmation(cgidata.email);
        //automail::adminRequestConfirmation();
    endif
    

}}
