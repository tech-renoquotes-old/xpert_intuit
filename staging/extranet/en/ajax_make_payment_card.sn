
{{
// %include '/extenso/functions/sn_ct.snc';

package automail;
    
    function sendEmail(email;...)
        if (lg eq '') then
            lg = "en"; 
            if (lg eq '') then
                lg = 'fr';
            endif
        endif
        if (type(email) eq 'string') then
        // void insert(table:'sr_debug', fields:{'description':'email_code=','text':'email'});
           email = automail::getEmail(email, group, lg);
        endif
        if (subject eq '') then
            subject = email.subject;
        endif
        if to == undefined then
		    to = '';
	    endif
        if from == undefined then
		    from = '';
	    endif
        if (parseSubject ne '') then
            subject = parse(state:0, data:"{".+ "{".+parseSubject.+"}}" .+ subject);
            //void insert(table:'sr_debug', fields:{'description':'parse subject=','text':subject});
        endif
        if (email.active) then
            email_to = (email.debug_mode || to eq '') ? email.to : to;
            email_to = email_to.resub(" ","","g");
            email_from = (from eq '') ? email.from : from;
        //V1.13
        if (cc ne '') then
            //void insert(table:'sr_debug', fields:{'description':'getEmail,cc='.+cc,'text':'lg='.+lg});
            email_to .+= ','.+cc;
        endif
        
        if(bcc ne '') then
            email_bcc = bcc;
        else
            email_bcc = "";
        endif
        
        if(group eq 'contractors') then
        endif
        
        
        void insert(table:'sr_log', fields:{'uid_project_contractor':'','uid_project':'', 'email_to':email_to  ,'email_from':email.from,'description':'subject',
                                                'value':subject,'type':'sendEmail'});
                                                
        if (tracking eq 'yes') then      
            if (group eq 'contractors') then
                void insert(table:'sr_log_email_contractor', fields:{'uid_contractor':uid_contractor,'uid_project':uid_project,'subject':subject,'email_type':email_code_tracking,'token':token_tracking});
            elseif (group eq 'clients') then
                void insert(table:'sr_log_email_client', fields:{'uid_client':uid_client,'subject':subject,'email_type':email_code_tracking,'token':token_tracking});
            elseif (subject eq 'customEmailToClient' || subject eq 'customEmailToWaitingClient') then
                void insert(table:'sr_log_email_client', fields:{'uid_client':uid_client,'subject':subject,'email_type':email_code_tracking,'token':token_tracking});
            endif
        endif
            
            if attachfile ne "" then
                if (attachfilect eq '') then
                    attachfilect = 'application/pdf';
                endif
                void email(
                    from: email_from,
                    to: email_to,
                    subject: subject,
                    bcc: email_bcc,
                    ct:"text/html",
                    charset: "utf-8",
                    file: email.file,
                    encoding:"base64",
                    ct: attachfilect,
                    attachfile: attachfile,
                    domain: 'xpertsource.com'
                );
            else
                void email(
                    from: email_from,
                    to: email_to,
                    subject: subject,
                    bcc: email_bcc,
                    ct:"text/html",
                    charset: "utf-8",
                    file: email.file,
                    encoding:"base64",
                    domain: 'xpertsource.com'
                ); 
                
                
            endif
        endif
    endf
    
    //new version to get email with a from group (previous feature are still supported)
    function getEmail(email_code, group, lg)
        //void insert(table:'sr_debug', fields:{'description':'getEmail,email_code='.+email_code,'text':'lg='.+lg});
        
        config = config();  
        // get default infos
        //V1.1  configs = sql(single:true, "SELECT default_admin_email,default_from_address,email_test_mode,email_test FROM sn_configs WHERE uid=1 LIMIT 1");

        configs = sql(single:true, "SELECT default_admin_email,default_from_".+lg.+" as default_from_address , default_contractor_from_".+lg.+" as contractor_email_group, default_client_from_".+lg.+" as client_email_group, email_test_mode,email_test FROM sn_configs WHERE uid=1 LIMIT 1");
        default_admin_email = configs.rows.default_admin_email;
        
        //split originating emails
        if(group eq 'contractors') then
            default_from_address = configs.rows.contractor_email_group;
        elseif(group eq 'clients') then
            default_from_address = configs.rows.client_email_group;
        else
            default_from_address = configs.rows.default_from_address;
        endif
        //  SELECT email_to, email_from, subject_fr as subject, active FROM email WHERE code='contractorProfileReminder1'
        // get email specific infos, use default if no specific
        //email = sql(single:true,"SELECT email_to, email_from, subject_? as subject, active FROM email WHERE code='?'", lg, email_code);
        email = sql(single:true,"SELECT email_to, IFNULL(email_from, '') as email_from, subject_? as subject, active FROM email WHERE code='?'", lg, email_code);
        email_from = (email.rows.email_from ne '') ? email.rows.email_from : default_from_address;
        email_to = (email.rows.email_to ne '') ? email.rows.email_to : default_admin_email;
        subject = email.rows.subject;
        
        use FORCE_EMAIL_PROD;
        debug_mode = (configs.rows.email_test_mode eq 'all' || (configs.rows.email_test_mode eq 'dev' && (config.site eq 'staging' || FORCE_EMAIL_PROD)));
       
        
        if (debug_mode) then
            email_to = configs.rows.email_test;
        endif
        file = "/" .+ config.site .+ "/email/".+lg.+"/" .+ email_code .+ ".snc";
        //void insert(table:'sr_debug', fields:{'description':'getEmail,email_from='.+email_from,'text':'email_to='.+email_to.+ '  debug_mode='.+debug_mode});

        // return context containing the infos
        return {
            "from":email_from, 
            "to":email_to, 
            "subject":subject, 
            "file":file, 
            "active":(email.rows.active eq 'yes'),
            "debug_mode": debug_mode
        };
    endf
    
    
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    
    // C01
    /*
        string uid_project - the uid of the project that has been activated
    */
    function quoteRequestToClient(uid_project)
    
        project = sql(single:true,"
            SELECT c.firstname, c.lastname, c.lang, c.email, c.uid
            FROM sr_project p
            INNER JOIN sr_client c ON c.uid=p.uid_client
            WHERE p.uid = '?'"
            , uid_project
        );
        
        project_number = sql(single:true,"
        SELECT count(uid) as count
        FROM sr_project");
        
        // variables for the email body
        client_info = {
            "uid": project.rows.uid,
            "puid": uid_project,
            "name":project.rows.firstname,
            "language":project.rows.lang
        };
        
        //create traking token
        time = time();
        token_tracking = hash(algo:"sha512", project.rows.email .+ project.rows.uid .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        void insert(table:'sr_debug', fields:{'description':'quoteRequestToClient,idproject='.+uid_project,'text':'email='.+project.rows.email});
        automail::sendEmail(
            "quoteRequestToClient",
            group: 'clients',
            to: project.rows.email,
            lg: project.rows.lang,
            uid_client: project.rows.uid,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
        
    endf
    
    // C02
    /*
        string uid_project - the uid of the project that has been activated
    */
    
    function quoteRequestToAdmin(uid_project)
    
        // V1.11 ajout uid_project, adwords_url
        project = sql(single:true,"
            SELECT  c.firstname, c.lastname, p.uid_client, a.zip, a.province, a.city, c.address,
                    a.street_no, a.street, c.lang, c.languages, c.email, a.phone1, p.description, c.gender, 
                    p.adwords_url, p.uid, p.first_url
            FROM sr_project p
            LEFT JOIN sr_client c ON c.uid=p.uid_client
            LEFT JOIN sr_address a ON a.uid=p.uid_address
            WHERE p.uid = '?'"
            , uid_project
        );

        // variables for the email body
        client_info = {
            "uid": project.rows.uid_client,
            "name":project.rows.firstname,
            "phone":project.rows.phone1,
            "email":project.rows.email,
            "address": project.rows.address,
            "postal_code": project.rows.zip,
            "description": project.rows.description,
            "gender":project.rows.gender,
            "adwords_url":project.rows.adwords_url,
            "uid_project":uid_project,
            "first_url":project.rows.first_url
        };
        
        url = "---"; // a voir
        void insert(table:'sr_debug', fields:{'description':'C02 quoteRequestToAdmin uid='.+' ','text':uid_project.+ '  first_url='.+project.rows.first_url});

        // par defaut   info@soumissionrenovation.ca
        // dans courriel  clients@soumissionrenovation.ca
        automail::sendEmail("quoteRequestToAdmin");
    endf 
    
    // C03
    /*
        string uid_project - the uid of the project that has been activated
    */
    function projectActivatedClient(uid_project)
        
        project_lg = sql(single:true,"
            SELECT c.lang 
            FROM sr_project p
            LEFT JOIN sr_client c ON c.uid=p.uid_client
            WHERE p.uid = '?'"
            , uid_project
        );
        lg = project_lg.rows.lang;
        
        project = sql(single:true,"
            SELECT c.firstname, c.lastname, c.gender, s.name_? as name, c.email, article_next_? as article_next, c.uid, p.uid as puid, a.street_no, a.street, a.zip, ci.name_? as city_name, a.phone1, a.phone2, minute(p.active_date) as minute
            FROM sr_project p
            LEFT JOIN sr_client c ON c.uid=p.uid_client
            LEFT JOIN sr_service s ON s.uid=p.uid_service
            LEFT JOIN sr_address a ON a.uid=p.uid_address
            LEFT JOIN sr_city ci ON ci.uid=a.uid_city
            WHERE p.uid = '?'"
            , lg, lg, lg, uid_project
        );
        //project.rows.puid = uid_project;
        
        //create tracking token
        time = time();
        token_tracking = hash(algo:"sha512", project.rows.email .+ project.rows.uid .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        automail::sendEmail(
            "projectActivatedClient",
            group: 'clients',
            to: project.rows.email,
            lg: lg,
            uid_client: project.rows.uid,
            token_tracking: token_tracking,
            tracking: 'yes'
        );       
    endf
    
    // C04
    /*
        string uid_project - the uid of the project that has been activated
    */ 
    
    function projectActivatedAdmin(uid_project)
    
        project_lg = sql(single:true,"
            SELECT c.lang
            FROM sr_project p
            LEFT JOIN sr_client c ON c.uid=p.uid_client
            WHERE p.uid = '?'"
            , uid_project
        );
        lg = project_lg.rows.lang;
        
        project = sql(single:true,"
            SELECT  c.firstname, c.lastname, c.gender, p.uid_client, a.zip, a.province, a.city,
                    a.street_no, a.street, c.lang, c.languages, c.email, a.phone1, a.phone2, a.phone3,
                    p.uid as uid_project, s.name_? as service, p.description, p.due_date, p.lead_price, p.max_quotes, p.token
            FROM sr_project p
            LEFT JOIN sr_client c ON c.uid=p.uid_client
            LEFT JOIN sr_address a ON a.uid=p.uid_address
            LEFT JOIN sr_service s ON s.uid=p.uid_service
            WHERE p.uid = '?'"
            , lg, uid_project
        );
        
        // variable for the email subject
        id_projet = uid_project;
        
        automail::sendEmail(
            "projectActivatedAdmin",
            parseSubject: "use id_projet;",
            lg: lg
        );
    endf
    
    // C05
    /*
        string uid_project - the uid of the project sent to the contractor
        string uid_contractor - uid of the contractor
    */
    function suggestProjectToContractor(token)
        project_contractor = sql(single:true,"SELECT uid_project, uid_contractor, uid FROM sr_project_contractor WHERE token='?'", token);
        contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", project_contractor.rows.uid_contractor);
        
        //initialize for email filter
         accent = ['À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ÿ', 'Ā', 'ā', 'Ă', 'ă', 'Ą', 'ą', 'Ć', 'ć', 'Ĉ', 'ĉ', 'Ċ', 'ċ', 'Č', 'č', 'Ď', 'ď', 'Đ', 'đ', 'Ē', 'ē', 'Ĕ', 'ĕ', 'Ė', 'ė', 'Ę', 'ę', 'Ě', 'ě', 'Ĝ', 'ĝ', 'Ğ', 'ğ', 'Ġ', 'ġ', 'Ģ', 'ģ', 'Ĥ', 'ĥ', 'Ħ', 'ħ', 'Ĩ', 'ĩ', 'Ī', 'ī', 'Ĭ', 'ĭ', 'Į', 'į', 'İ', 'ı', 'Ĳ', 'ĳ', 'Ĵ', 'ĵ', 'Ķ', 'ķ', 'Ĺ', 'ĺ', 'Ļ', 'ļ', 'Ľ', 'ľ', 'Ŀ', 'ŀ', 'Ł', 'ł', 'Ń', 'ń', 'Ņ', 'ņ', 'Ň', 'ň', 'ŉ', 'Ō', 'ō', 'Ŏ', 'ŏ', 'Ő', 'ő', 'Œ', 'œ', 'Ŕ', 'ŕ', 'Ŗ', 'ŗ', 'Ř', 'ř', 'Ś', 'ś', 'Ŝ', 'ŝ', 'Ş', 'ş', 'Š', 'š', 'Ţ', 'ţ', 'Ť', 'ť', 'Ŧ', 'ŧ', 'Ũ', 'ũ', 'Ū', 'ū', 'Ŭ', 'ŭ', 'Ů', 'ů', 'Ű', 'ű', 'Ų', 'ų', 'Ŵ', 'ŵ', 'Ŷ', 'ŷ', 'Ÿ', 'Ź', 'ź', 'Ż', 'ż', 'Ž', 'ž', 'ſ', 'ƒ', 'Ơ', 'ơ', 'Ư', 'ư', 'Ǎ', 'ǎ', 'Ǐ', 'ǐ', 'Ǒ', 'ǒ', 'Ǔ', 'ǔ', 'Ǖ', 'ǖ', 'Ǘ', 'ǘ', 'Ǚ', 'ǚ', 'Ǜ', 'ǜ', 'Ǻ', 'ǻ', 'Ǽ', 'ǽ', 'Ǿ', 'ǿ', 'Ά', 'ά', 'Έ', 'έ', 'Ό', 'ό', 'Ώ', 'ώ', 'Ί', 'ί', 'ϊ', 'ΐ', 'Ύ', 'ύ', 'ϋ', 'ΰ', 'Ή', 'ή'];
         noaccent = ['A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 's', 'a', 'a', 'a', 'a', 'a', 'a', 'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c', 'D', 'd', 'D', 'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g', 'H', 'h', 'H', 'h', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j', 'K', 'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'l', 'l', 'N', 'n', 'N', 'n', 'N', 'n', 'n', 'O', 'o', 'O', 'o', 'O', 'o', 'OE', 'oe', 'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S', 's', 'T', 't', 'T', 't', 'T', 't', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'W', 'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's', 'f', 'O', 'o', 'U', 'u', 'A', 'a', 'I', 'i', 'O', 'o', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'A', 'a', 'AE', 'ae', 'O', 'o', 'Α', 'α', 'Ε', 'ε', 'Ο', 'ο', 'Ω', 'ω', 'Ι', 'ι', 'ι', 'ι', 'Υ', 'υ', 'υ', 'υ', 'Η', 'η'];

        
        lg = contractor.rows.contact_lg;  
        if (lg eq '') then
            lg = 'fr';
        endif
        
        project = sql(single:true, "
                SELECT p.*, IFNULL(c.name_?, a.city) as city, a.zip ,a.province, p.shared_budget
                FROM sr_project p 
                LEFT JOIN sr_address a ON p.uid_address=a.uid 
                LEFT JOIN sr_city c ON c.uid=a.uid_city 
                WHERE p.uid = '?'", lg, project_contractor.rows.uid_project);
        
        //which service to use? primary or secondary
        secondary = sql("SELECT c.* FROM sr_contractor c WHERE   c.active = 'yes' AND c.uid = '?'
                    AND '?' IN (SELECT cs.uid_service FROM sr_contractor_service cs WHERE cs.uid_contractor = c.uid AND approved = 'yes')
                ", project_contractor.rows.uid_contractor,project.rows.uid_secondary_service);

        primary = sql("SELECT c.* FROM sr_contractor c WHERE   c.active = 'yes' AND c.uid = '?'
                    AND '?' IN (SELECT cs.uid_service FROM sr_contractor_service cs WHERE cs.uid_contractor = c.uid AND approved = 'yes')
                ", project_contractor.rows.uid_contractor,project.rows.uid_service);
                
                
        if(primary.nbrows >= 1 && secondary.nbrows >= 1) then
            suid = project.rows.uid_service;
        elseif(primary.nbrows >= 1 && secondary.nbrows == 0) then
            suid = project.rows.uid_service;
        elseif(primary.nbrows == 0 && secondary.nbrows >= 1) then
            suid = project.rows.uid_secondary_service;
        endif

        service = sql(single:true, "SELECT * FROM sr_service WHERE uid = '?'", suid);
        service = service.rows{'name_'.+lg};  
        
        // for the email subject
        id_projet = project.rows.uid;
        subject_city = project.rows.city;
        
        isFiltered = automail::filter_contractor_subject(project_contractor.rows.uid_contractor, "/site/emailFilter/suggestProjectEmailsFilter.csv");
        
        time = time();
        token_tracking = hash(algo:"sha512", contractor.rows.email .+ project_contractor.rows.uid_contractor .+ id_projet .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        if isFiltered then
            service = str_replace(accent, noaccent, service);
            subject_city = str_replace(accent, noaccent, subject_city);
        
            automail::sendEmail(
                "suggestProjectToContractorFiltered",
                group: 'contractors',
                to: contractor.rows.email,
                cc: contractor.rows.email_cc,
                parseSubject: "use id_projet; use service; use subject_city;",
                lg: lg,
                uid_contractor: project_contractor.rows.uid_contractor,
                uid_project: id_projet,
                token_tracking: token_tracking,
                tracking: 'yes'
            );
            void insert(table:'sr_log', fields:{'uid_contractor':project_contractor.rows.uid_contractor,'email_to': contractor.rows.email  ,'description':'email suggestFilteredProjectToContractor---','value':contractor.rows.email});
        else
        
            automail::sendEmail(
                "suggestProjectToContractor",
                group: 'contractors',
                to: contractor.rows.email,
                cc: contractor.rows.email_cc,
                parseSubject: "use id_projet; use service; use subject_city;",
                lg: lg,
                uid_contractor: project_contractor.rows.uid_contractor,
                uid_project: id_projet,
                token_tracking: token_tracking,
                tracking: 'yes'
            );
            void insert(table:'sr_log', fields:{'uid_contractor':project_contractor.rows.uid_contractor,'email_to': contractor.rows.email  ,'description':'email suggestProjectToContractor---','value':contractor.rows.email});
        endif
        
    endf 
    
    
    function suggestFreeProjectToContractor(token)
        project_contractor = sql(single:true,"SELECT uid_project, uid_contractor, uid FROM sr_project_contractor WHERE token='?'", token);
        contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", project_contractor.rows.uid_contractor);
        
        //initialize for email filter
         accent = ['À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ÿ', 'Ā', 'ā', 'Ă', 'ă', 'Ą', 'ą', 'Ć', 'ć', 'Ĉ', 'ĉ', 'Ċ', 'ċ', 'Č', 'č', 'Ď', 'ď', 'Đ', 'đ', 'Ē', 'ē', 'Ĕ', 'ĕ', 'Ė', 'ė', 'Ę', 'ę', 'Ě', 'ě', 'Ĝ', 'ĝ', 'Ğ', 'ğ', 'Ġ', 'ġ', 'Ģ', 'ģ', 'Ĥ', 'ĥ', 'Ħ', 'ħ', 'Ĩ', 'ĩ', 'Ī', 'ī', 'Ĭ', 'ĭ', 'Į', 'į', 'İ', 'ı', 'Ĳ', 'ĳ', 'Ĵ', 'ĵ', 'Ķ', 'ķ', 'Ĺ', 'ĺ', 'Ļ', 'ļ', 'Ľ', 'ľ', 'Ŀ', 'ŀ', 'Ł', 'ł', 'Ń', 'ń', 'Ņ', 'ņ', 'Ň', 'ň', 'ŉ', 'Ō', 'ō', 'Ŏ', 'ŏ', 'Ő', 'ő', 'Œ', 'œ', 'Ŕ', 'ŕ', 'Ŗ', 'ŗ', 'Ř', 'ř', 'Ś', 'ś', 'Ŝ', 'ŝ', 'Ş', 'ş', 'Š', 'š', 'Ţ', 'ţ', 'Ť', 'ť', 'Ŧ', 'ŧ', 'Ũ', 'ũ', 'Ū', 'ū', 'Ŭ', 'ŭ', 'Ů', 'ů', 'Ű', 'ű', 'Ų', 'ų', 'Ŵ', 'ŵ', 'Ŷ', 'ŷ', 'Ÿ', 'Ź', 'ź', 'Ż', 'ż', 'Ž', 'ž', 'ſ', 'ƒ', 'Ơ', 'ơ', 'Ư', 'ư', 'Ǎ', 'ǎ', 'Ǐ', 'ǐ', 'Ǒ', 'ǒ', 'Ǔ', 'ǔ', 'Ǖ', 'ǖ', 'Ǘ', 'ǘ', 'Ǚ', 'ǚ', 'Ǜ', 'ǜ', 'Ǻ', 'ǻ', 'Ǽ', 'ǽ', 'Ǿ', 'ǿ', 'Ά', 'ά', 'Έ', 'έ', 'Ό', 'ό', 'Ώ', 'ώ', 'Ί', 'ί', 'ϊ', 'ΐ', 'Ύ', 'ύ', 'ϋ', 'ΰ', 'Ή', 'ή'];
         noaccent = ['A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 's', 'a', 'a', 'a', 'a', 'a', 'a', 'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c', 'D', 'd', 'D', 'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g', 'H', 'h', 'H', 'h', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j', 'K', 'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'l', 'l', 'N', 'n', 'N', 'n', 'N', 'n', 'n', 'O', 'o', 'O', 'o', 'O', 'o', 'OE', 'oe', 'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S', 's', 'T', 't', 'T', 't', 'T', 't', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'W', 'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's', 'f', 'O', 'o', 'U', 'u', 'A', 'a', 'I', 'i', 'O', 'o', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'A', 'a', 'AE', 'ae', 'O', 'o', 'Α', 'α', 'Ε', 'ε', 'Ο', 'ο', 'Ω', 'ω', 'Ι', 'ι', 'ι', 'ι', 'Υ', 'υ', 'υ', 'υ', 'Η', 'η'];

        
        lg = contractor.rows.contact_lg;  
        if (lg eq '') then
            lg = 'fr';
        endif
        
        project = sql(single:true, "
                SELECT p.*, cl.gender as cgender, cl.firstname as fname, cl.lastname as lname, a.phone1, a.phone2, a.phone3, cl.when_to_call, cl.email, cl.address, IFNULL(c.name_?, a.city) as city, a.zip ,a.province
                FROM sr_project p
                INNER JOIN sr_client cl ON cl.uid = p.uid_client
                LEFT JOIN sr_address a ON p.uid_address=a.uid 
                LEFT JOIN sr_city c ON c.uid=a.uid_city 
                WHERE p.uid = '?'", lg, project_contractor.rows.uid_project);
        
        //which service to use? primary or secondary
        secondary = sql("SELECT c.* FROM sr_contractor c WHERE   c.active = 'yes' AND c.uid = '?'
                    AND '?' IN (SELECT cs.uid_service FROM sr_contractor_service cs WHERE cs.uid_contractor = c.uid AND approved = 'yes')
                ", project_contractor.rows.uid_contractor,project.rows.uid_secondary_service);

        primary = sql("SELECT c.* FROM sr_contractor c WHERE   c.active = 'yes' AND c.uid = '?'
                    AND '?' IN (SELECT cs.uid_service FROM sr_contractor_service cs WHERE cs.uid_contractor = c.uid AND approved = 'yes')
                ", project_contractor.rows.uid_contractor,project.rows.uid_service);
                
                
        if(primary.nbrows >= 1 && secondary.nbrows >= 1) then
            suid = project.rows.uid_service;
        elseif(primary.nbrows >= 1 && secondary.nbrows == 0) then
            suid = project.rows.uid_service;
        elseif(primary.nbrows == 0 && secondary.nbrows >= 1) then
            suid = project.rows.uid_secondary_service;
        endif

        
        //service = sql(single:true, "SELECT * FROM sr_service s LEFT JOIN sr_contractor_service cs on s.uid = cs.uid WHERE cs.uid = '?' OR cs.uid = '?'", project.rows.uid_service, project.rows.uid_secondary_service);        
        service = sql(single:true, "SELECT * FROM sr_service WHERE uid = '?'", suid);
        service = service.rows{'name_'.+lg};  
        
        // for the email subject
        id_projet = project.rows.uid;
        subject_city = project.rows.city;
        
        time = time();
        token_tracking = hash(algo:"sha512", contractor.rows.email .+ project_contractor.rows.uid_contractor .+ id_projet .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        //void insert(table:'sr_debug', fields:{'description':'testC05,cc='.+contractor.rows.email_cc,'text':'token='.+token.+' uid_contractor='.+project_contractor.rows.uid_contractor});
        
            automail::sendEmail(
                "suggestEmployeeToContractor",
                group: 'contractors',
                to: contractor.rows.email,
                cc: contractor.rows.email_cc,
                parseSubject: "use id_projet; use service; use subject_city;",
                lg: lg,
                uid_contractor: project_contractor.rows.uid_contractor,
                uid_project: id_projet,
                token_tracking: token_tracking,
                tracking: 'yes'
            );
            void insert(table:'sr_log', fields:{'uid_contractor':project_contractor.rows.uid_contractor,'email_to': contractor.rows.email  ,'description':'email suggestProjectToContractor---','value':contractor.rows.email});

    endf  
    
    // C05-Test
    /*
        string uid_project - the uid of the project sent to the contractor
        string uid_contractor - uid of the contractor
    */
  function test_suggestProjectToContractor(uid_project,uid_contractor,to_email;...)
       
      //  project_contractor = sql(single:true,"SELECT uid_project, uid_contractor, uid FROM sr_project_contractor WHERE token='?'", token);
      contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
        
        
        if (lg eq '') then
            lg = contractor.rows.contact_lg;
        endif
        
        project = sql(single:true, "
                SELECT p.*, IFNULL(c.name_?, a.city) as city, a.zip 
                FROM sr_project p 
                LEFT JOIN sr_address a ON p.uid_address=a.uid 
                LEFT JOIN sr_city c ON c.uid=a.uid_city 
                WHERE p.uid = '?'", lg, uid_project);
        
        service = sql(single:true, "SELECT * FROM sr_service WHERE uid = '?'", project.rows.uid_service);
        service = service.rows{'name_'.+lg};
        
        // for the email subject
        id_projet = project.rows.uid;
        
        automail::sendEmail(
            "suggestProjectToContractor",
            group: 'contractors',
            to: to_email,
            parseSubject: "use id_projet; use service;",
            lg: lg
        );  
        
    endf    

    // C06
    /*
        string uid_project_contractor
    */
    function sendContractorToClient(uid_project_contractor)
        project_contractor = sql(single:true, "
            SELECT  ct.company_name, ct.company_phone, ct.rbq, ct.website, ct.contact_firstname, ct.contact_gender,
                    ct.contact_lastname, ct.contact_phone, ct.contact_email, ct.contact_lg, ct.show_profile, ct.seo,
                    c.gender, c.lastname, c.firstname, c.email, c.lang, ct.uid,
                    s.name_fr, s.name_en, p.uid_client, pc.uid_project
            FROM sr_project_contractor pc 
            INNER JOIN sr_contractor ct ON ct.uid=pc.uid_contractor
            INNER JOIN sr_project p ON p.uid=pc.uid_project
            INNER JOIN sr_client c ON c.uid=p.uid_client
            INNER JOIN sr_service s ON s.uid = p.uid_service
            WHERE pc.uid = '?'"
        , uid_project_contractor);

        lg = project_contractor.rows.lang;

        if (lg eq '') then
            lg = 'fr';
        endif
        
        service_name = project_contractor.rows.name_fr;
        
        if (lg eq 'en') then
            service_name = project_contractor.rows.name_en;
        endif

        gallery = sql("SELECT * FROM sr_gallery WHERE active='yes' AND uid_contractor='?' ORDER BY sn_cdate DESC LIMIT 5", project_contractor.rows.uid);
        
        //create tracking token
        time = time();
        token_tracking = hash(algo:"sha512", project_contractor.rows.email .+ project_contractor.uid_client .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        automail::sendEmail(
            "sendContractorToClient",
            group: 'clients',
            to: project_contractor.rows.email, 
            parseSubject: "use service_name;",
            lg: lg,
            uid_client: project_contractor.uid_client,
            token_tracking: token_tracking,
            tracking: 'yes'
        ); 
    endf
    
    
    // C07
    /*
        string uid_project_contractor
    */
    function notifyContractorWinProject(uid_project_contractor)
        project_contractor = sql(single:true, "
            SELECT  ct.contact_title, ct.contact_firstname, ct.contact_lastname, ct.email as ct_email, c.firstname, c.lastname, c.gender, 
                    a.street_no, a.street, a.city, city.name_fr as city_fr, city.name_en as city_en, a.zip, a.phone1, a.phone2, a.phone3, 
                    ct.contact_gender, ct.uid, pc.uid_project, ct.token,
                    c.email, c.when_to_call, p.description, p.additional_info, pc.uid_contractor,
                    ct.contact_lg,
                    ct.email_cc
            FROM sr_project_contractor pc 
            INNER JOIN sr_contractor ct ON ct.uid=pc.uid_contractor
            INNER JOIN sr_project p ON p.uid=pc.uid_project
            INNER JOIN sr_client c ON c.uid=p.uid_client
            LEFT JOIN sr_address a ON a.uid=p.uid_address
            LEFT JOIN sr_city city ON city.uid=a.uid_city
            WHERE pc.uid = '?'"
        , uid_project_contractor);
        
        
        lg = project_contractor.rows.contact_lg;
        if (lg eq '') then
            lg = 'fr';
        endif
        
        if (project_contractor.rows{'city_'.+lg}) then
            project_contractor.rows.city = project_contractor.rows{'city_'.+lg};
        endif
        
        //initialize for email filter
         accent = ['À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ÿ', 'Ā', 'ā', 'Ă', 'ă', 'Ą', 'ą', 'Ć', 'ć', 'Ĉ', 'ĉ', 'Ċ', 'ċ', 'Č', 'č', 'Ď', 'ď', 'Đ', 'đ', 'Ē', 'ē', 'Ĕ', 'ĕ', 'Ė', 'ė', 'Ę', 'ę', 'Ě', 'ě', 'Ĝ', 'ĝ', 'Ğ', 'ğ', 'Ġ', 'ġ', 'Ģ', 'ģ', 'Ĥ', 'ĥ', 'Ħ', 'ħ', 'Ĩ', 'ĩ', 'Ī', 'ī', 'Ĭ', 'ĭ', 'Į', 'į', 'İ', 'ı', 'Ĳ', 'ĳ', 'Ĵ', 'ĵ', 'Ķ', 'ķ', 'Ĺ', 'ĺ', 'Ļ', 'ļ', 'Ľ', 'ľ', 'Ŀ', 'ŀ', 'Ł', 'ł', 'Ń', 'ń', 'Ņ', 'ņ', 'Ň', 'ň', 'ŉ', 'Ō', 'ō', 'Ŏ', 'ŏ', 'Ő', 'ő', 'Œ', 'œ', 'Ŕ', 'ŕ', 'Ŗ', 'ŗ', 'Ř', 'ř', 'Ś', 'ś', 'Ŝ', 'ŝ', 'Ş', 'ş', 'Š', 'š', 'Ţ', 'ţ', 'Ť', 'ť', 'Ŧ', 'ŧ', 'Ũ', 'ũ', 'Ū', 'ū', 'Ŭ', 'ŭ', 'Ů', 'ů', 'Ű', 'ű', 'Ų', 'ų', 'Ŵ', 'ŵ', 'Ŷ', 'ŷ', 'Ÿ', 'Ź', 'ź', 'Ż', 'ż', 'Ž', 'ž', 'ſ', 'ƒ', 'Ơ', 'ơ', 'Ư', 'ư', 'Ǎ', 'ǎ', 'Ǐ', 'ǐ', 'Ǒ', 'ǒ', 'Ǔ', 'ǔ', 'Ǖ', 'ǖ', 'Ǘ', 'ǘ', 'Ǚ', 'ǚ', 'Ǜ', 'ǜ', 'Ǻ', 'ǻ', 'Ǽ', 'ǽ', 'Ǿ', 'ǿ', 'Ά', 'ά', 'Έ', 'έ', 'Ό', 'ό', 'Ώ', 'ώ', 'Ί', 'ί', 'ϊ', 'ΐ', 'Ύ', 'ύ', 'ϋ', 'ΰ', 'Ή', 'ή'];
         noaccent = ['A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 's', 'a', 'a', 'a', 'a', 'a', 'a', 'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c', 'D', 'd', 'D', 'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g', 'H', 'h', 'H', 'h', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j', 'K', 'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'l', 'l', 'N', 'n', 'N', 'n', 'N', 'n', 'n', 'O', 'o', 'O', 'o', 'O', 'o', 'OE', 'oe', 'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S', 's', 'T', 't', 'T', 't', 'T', 't', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'W', 'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's', 'f', 'O', 'o', 'U', 'u', 'A', 'a', 'I', 'i', 'O', 'o', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'A', 'a', 'AE', 'ae', 'O', 'o', 'Α', 'α', 'Ε', 'ε', 'Ο', 'ο', 'Ω', 'ω', 'Ι', 'ι', 'ι', 'ι', 'Υ', 'υ', 'υ', 'υ', 'Η', 'η'];
        
        // variable for the email subject
        id_projet = project_contractor.rows.uid_project;
        budget = sql(single:true, "SELECT shared_budget FROM sr_project where uid = '?'",id_projet);
        shared_budget = budget.rows.shared_budget;
        //Michel 14/12/2017 I have removed the filter subject text because it added the id project twice in the subject.  I solved the issue of the filter by not having problematic signs
        
        //filter subject text
        // isFiltered = automail::filter_contractor_subject(project_contractor.rows.uid_contractor, "/site/emailFilter/notifyContractorWinProjectFilter.csv");
        

        // if isFiltered then
        //     subject_text = (lg eq 'fr')? "Soumissionrenovation.ca : Informations du client pour le projet " .+  id_projet : "RenoQuotes.com : Client's information for the project " .+ id_projet;
        //     subject_text = str_replace(accent, noaccent, subject_text);
        // else
        //     subject_text = (lg eq 'fr')? "Soumissionrenovation.ca - Informations du client pour le projet " .+  id_projet : "RenoQuotes.com - Client's information for the project " .+ id_projet;
        // endif
        
        time = time();
        token_tracking = hash(algo:"sha512", project_contractor.rows.ct_email .+ uid_project_contractor .+ id_projet .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        automail::sendEmail(
            "notifyContractorWinProject",
            group: 'contractors',
            to: project_contractor.rows.ct_email, 
            cc: project_contractor.rows.email_cc,
            parseSubject: "use id_projet;",
            lg:lg,
            uid_contractor: project_contractor.rows.uid,
            uid_project: id_projet,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
        
    endf
    
    
   // C07A  for testing
    /*
        string uid_project_contractor
    */
    function test_notifyContractorWinProject(uid_project_contractor;...)    //email_to)
        project_contractor = sql(single:true, "
            SELECT  ct.contact_title, ct.contact_firstname, ct.contact_lastname, ct.email as ct_email, c.firstname, c.lastname, c.gender, 
                    a.street_no, a.street, a.city, city.name_fr as city_fr, city.name_en as city_en, a.zip, a.phone1, a.phone2, a.phone3, 
                    ct.contact_gender,
                    c.email, c.when_to_call, p.description, p.additional_info, p.uid,
                    ct.contact_lg
            FROM sr_project_contractor pc 
            INNER JOIN sr_contractor ct ON ct.uid=pc.uid_contractor
            INNER JOIN sr_project p ON p.uid=pc.uid_project
            INNER JOIN sr_client c ON c.uid=p.uid_client
            LEFT JOIN sr_address a ON a.uid=p.uid_address
            LEFT JOIN sr_city city ON city.uid=a.uid_city
            WHERE pc.uid = '?'"
        , uid_project_contractor);
        
        //lg = project_contractor.rows.contact_lg;
        if (lg eq '') then
            lg = 'fr';
        endif
        
        if (project_contractor.rows{'city_'.+lg}) then
            project_contractor.rows.city = project_contractor.rows{'city_'.+lg};
        endif
        
        // variable for the email subject
        id_projet = project_contractor.rows.uid;
        if (email_to eq '') then
            email_to = project_contractor.rows.ct_email;
        endif
        if (cc_email eq '') then
            cc_email = '';
        endif

        void insert(table:'sr_log', fields:{'uid_project_contractor':uid_project_contractor,'uid_project':id_projet, 'email_to': project_contractor.rows.ct_email  ,'description':'email test_notifyContractorWinProject','value':''});
        automail::sendEmail(
            "notifyContractorWinProject",
            to: email_to, 
            parseSubject: "use id_projet;",
            lg:lg,
            uid_project_contractor:uid_project_contractor,
            uid_project:id_projet,
            cc:cc_email
        );
        
    endf
    
    
    // C08
    /*
        string uid_project_contractor
    */
    function notifyAdminContractorAcceptQuoteProject(uid_project_contractor)
    
        project_contractor = sql(single:true, "
            SELECT  ct.contact_title, ct.contact_firstname, ct.contact_lastname, c.firstname, c.lastname, c.gender,
                    a.street_no, a.street, a.city, city.name_fr as city_fr, city.name_en as city_en, a.phone1, a.phone2, a.phone3, 
                    ct.contact_gender,
                    c.email, c.when_to_call, p.description, p.additional_info, p.uid,
                    ct.company_name, ct.company_phone, ct.rbq, ct.website, ct.contact_phone, ct.contact_email, 
                    ct.contact_lg
            FROM sr_project_contractor pc 
            INNER JOIN sr_contractor ct ON ct.uid=pc.uid_contractor
            INNER JOIN sr_project p ON p.uid=pc.uid_project
            INNER JOIN sr_client c ON c.uid=p.uid_client
            LEFT JOIN sr_address a ON a.uid=p.uid_address
            LEFT JOIN sr_city city ON city.uid=a.uid_city
            WHERE pc.uid = '?'"
        , uid_project_contractor);
        
        lg = project_contractor.rows.contact_lg;
        if (lg eq '') then
            lg = 'fr';
        endif
        
        if (project_contractor.rows{'city_'.+lg}) then
            project_contractor.rows.city = project_contractor.rows{'city_'.+lg};
        endif
        
        // variables for the subject
        compagnie = project_contractor.rows.company_name;
        id_projet = project_contractor.rows.uid;
        
        automail::sendEmail(
            "notifyAdminContractorAcceptQuoteProject",
            parseSubject: "use id_projet; use compagnie;"
        );
        
    endf    
        
    // C09
    /*
        string uid_contractor - the uid of the contractor
        string pdf -  the path of the file (pdf) to join to the email
    */
    function sendInvoicePdf(uid_contractor, pdf)
    
        contractor = sql(single:true,"SELECT * FROM sr_contractor WHERE uid='?'", uid_contractor);
        url = sql(single:true, "SELECT url_prod FROM sn_configs");
        url = url.rows.url_prod;
        
        lg = contractor.rows.contact_lg;
        if (lg eq '') then
            lg = 'fr';
        endif
     
        time = time();
        token_tracking = hash(algo:"sha512", contractor.rows.email_accounting .+ uid_contractor .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
     
        pdf_file = "/pdf/" .+ pdf;
        pdf_file;
        automail::sendEmail(
            "sendInvoicePdf",
            group: 'contractors',
            to: contractor.rows.email_accounting, 
            attachfile: pdf_file,
            lg:lg,
            uid_contractor: uid_contractor,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
    endf
    
    
    //TEST function
    function test_sendInvoicePdf(uid_contractor, pdf;...)
    
        contractor = sql(single:true,"SELECT * FROM sr_contractor WHERE uid='?'", uid_contractor);
        url = sql(single:true, "SELECT url_prod FROM sn_configs");
        url = url.rows.url_prod;
        
        lg = contractor.rows.contact_lg;
        if (lg eq '') then
            lg = 'fr';
        endif
        
        if to == undefined then
		    to = contractor.rows.email_accounting;
	    endif

     
        pdf_file = "/pdf/" .+ pdf;
        
        automail::sendEmail(
            "sendInvoicePdf",
            to: to, 
            attachfile: pdf_file,
            lg:lg
        );
    endf
    
    
    
    function sendUnreachableNoticeToClient(uid_project_contractor)
        contractor = sql(single:true,"
            SELECT c.contact_firstname, c.contact_lastname, c.company_name, c.contact_lg, s.name_fr, s.name_en, pc.uid, pc.uid_project, pc.token, cr.reason, cr.no_quote
            FROM sr_project_contractor pc
            INNER JOIN sr_credit cr ON cr.uid_project_contractor = pc.uid
            INNER JOIN sr_project p ON p.uid = pc.uid_project
            INNER JOIN sr_service s ON s.uid = p.uid_service
            INNER JOIN sr_contractor c ON c.uid=pc.uid_contractor
            WHERE pc.accepted = 'yes'
            AND pc.uid = '?' 
            ", uid_project_contractor
        );  
        
        if (contractor.nbrows > 0) then
            //Il faut prendre le token de sr_project_contractor et non de sr_project
            client = sql(single:true,"SELECT c.email, c.lang, p.token, c.gender, c.uid FROM sr_project p INNER JOIN sr_client c ON c.uid = p.uid_client WHERE p.uid='?'",contractor.rows.uid_project);
            lg = client.rows.lang;
            gender = client.rows.gender;
        
            res = (resub(trim2(client.rows.email),emailRegex,"$1"));
            //void insert(table:'sr_log', fields:{'uid_contractor':contractors.rows.uid,'uid_project':uid_project.+'-1','email_to': email_to  ,'description':'email sendSatisfactionSurveyToClient--avant1','value':client.rows.email});
            //void insert(table:'sr_log', fields:{'uid_project':uid_project.+'-1','email_to': email_to  ,'description':'email sendSatisfactionSurveyToClient--res','value':res});
            
            client.rows.email;
            
            if( res ne '' && client.rows.email ne '' && strpos(res,' ') < 0 && strpos(res,',') < 0 && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
                email_to = res;

                    //create tracking token
                    time = time();
                    token_tracking = hash(algo:"sha512", client.rows.email .+ project_contractor.rows.uid_project .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));

                    void insert(table:'sr_log', fields:{'uid_project':uid_project.+'-1','email_to': email_to  ,'description':'email sendSatisfactionSurveyToClient---','value':client.rows.email});
                    automail::sendEmail(
                        "sendUnreachableNoticeToClient",
                        group: 'contractors',
                        to: client.rows.email, 
                        lg:lg,
                        uid_project: contractor.rows.uid_project,
                        token_tracking: token_tracking,
                        tracking: 'yes'
                    );
            endif
        endif
    endf
    
    /**
     * @desc: Send credit survey to client and credit contractor depending on their feedback
     * @args: integer uid_project
     * 
     **/
    function sendCreditSurveyToClient(uid_credit)
        contractor = sql(single:true,"
            SELECT c.contact_firstname, c.contact_lastname, c.company_name, c.contact_lg, s.name_fr, s.name_en, cr.uid, pc.uid_project, pc.token, cr.reason, cr.no_quote
            FROM sr_project_contractor pc
            INNER JOIN sr_credit cr ON cr.uid_project_contractor = pc.uid
            INNER JOIN sr_project p ON p.uid = pc.uid_project
            INNER JOIN sr_service s ON s.uid = p.uid_service
            INNER JOIN sr_contractor c ON c.uid=pc.uid_contractor
            WHERE pc.accepted = 'yes'
            AND cr.uid = '?' 
            ", uid_credit
        );  
        
        if (contractor.nbrows > 0) then
            //Il faut prendre le token de sr_project_contractor et non de sr_project
            client = sql(single:true,"SELECT c.email, c.lang, p.token, c.gender, c.uid FROM sr_project p INNER JOIN sr_client c ON c.uid = p.uid_client WHERE p.uid='?'",contractor.rows.uid_project);
            lg = client.rows.lang;
            gender = client.rows.gender;
        
            res = (resub(trim2(client.rows.email),emailRegex,"$1"));
            //void insert(table:'sr_log', fields:{'uid_contractor':contractors.rows.uid,'uid_project':uid_project.+'-1','email_to': email_to  ,'description':'email sendSatisfactionSurveyToClient--avant1','value':client.rows.email});
            //void insert(table:'sr_log', fields:{'uid_project':uid_project.+'-1','email_to': email_to  ,'description':'email sendSatisfactionSurveyToClient--res','value':res});
            
            company = contractor.rows.company_name;
            
            if( res ne '' && client.rows.email ne '' && strpos(res,' ') < 0 && strpos(res,',') < 0 && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
                email_to = res;

                    //create tracking token
                    time = time();
                    token_tracking = hash(algo:"sha512", client.rows.email .+ contractor.rows.uid_project .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));

                    void insert(table:'sr_log', fields:{'uid_project':uid_project.+'-1','email_to': email_to  ,'description':'email sendSatisfactionSurveyToClient---','value':client.rows.email});
                    automail::sendEmail(
                        "sendCreditSurveyToClient",
                        group: 'contractors',
                        parseSubject: "use company;",
                        to: client.rows.email, 
                        lg:lg,
                        uid_contractor: contractor.rows.cuid,
                        uid_project: contractor.rows.uid_project,
                        token_tracking: token_tracking,
                        tracking: 'yes'
                    );
            endif
        endif
    endf
    
    
    function  notifyContractorCreditRefusedReason1(uid_credit)
        credit = sql(single:true, "SELECT * FROM sr_credit WHERE uid = '?'", uid_credit);
        contractor = sql(single:true,"
            SELECT c.contact_firstname, c.contact_lastname, c.contact_email, c.company_name, c.contact_lg, c.contact_gender, s.name_fr, s.name_en, cr.uid, pc.uid_project, pc.token, cr.reason, pc.accepted_date
            FROM sr_project_contractor pc
            INNER JOIN sr_credit cr ON cr.uid_project_contractor = pc.uid
            INNER JOIN sr_project p ON p.uid = pc.uid_project
            INNER JOIN sr_service s ON s.uid = p.uid_service
            INNER JOIN sr_contractor c ON c.uid=pc.uid_contractor
            WHERE pc.accepted = 'yes'
            AND cr.uid = '?' 
            ", uid_credit
        );  
        
        contractor;
        
        id_projet = contractor.rows.uid_project;
        lg = contractor.rows.contact_lg;
        
        time = time();
        token_tracking = hash(algo:"sha512", contractor.rows.contact_email .+ id_projet .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        if (contractor.nbrows > 0) then
                automail::sendEmail(
                    "notifyContractorCreditRefusedReason1",
                    group: 'contractors',
                    parseSubject: "use id_projet;",
                    to: contractor.rows.contact_email, 
                    lg:lg,
                    uid_contractor: contractor.rows.cuid,
                    uid_project: id_projet,
                    token_tracking: token_tracking,
                    tracking: 'yes'
                );
        
        void insert(table:'sr_log', fields:{'type':'credit request','uid_project_contractor':credit.rows.uid_project_contractor,'uid_project':'credit.rows.uid_project', 'email_to': 'contact_email'  ,'description':"Refusé; vue qu'un prix n'à pas été donné et le projet est annulé/donné "});

        endif
        
        
    endf

    function  notifyContractorCreditRefusedReason3(uid_credit)
        credit = sql(single:true, "SELECT * FROM sr_credit WHERE uid = '?'", uid_credit);
        contractor = sql(single:true,"
            SELECT c.contact_firstname, c.contact_lastname, c.contact_email, c.company_name, c.contact_lg, c.contact_gender, s.name_fr, s.name_en, cr.uid, pc.uid_project, pc.token, cr.reason, pc.accepted_date
            FROM sr_project_contractor pc
            INNER JOIN sr_credit cr ON cr.uid_project_contractor = pc.uid
            INNER JOIN sr_project p ON p.uid = pc.uid_project
            INNER JOIN sr_service s ON s.uid = p.uid_service
            INNER JOIN sr_contractor c ON c.uid=pc.uid_contractor
            WHERE pc.accepted = 'yes'
            AND cr.uid = '?' 
            ", uid_credit
        );  
        
        id_projet = contractor.rows.uid_project;
        lg = contractor.rows.contact_lg;
        
        time = time();
        token_tracking = hash(algo:"sha512", contractor.rows.contact_email .+ id_projet .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        if (contractor.nbrows > 0) then
                automail::sendEmail(
                    "notifyContractorCreditRefusedReason3",
                    group: 'contractors',
                    parseSubject: "use id_projet;",
                    to: contractor.rows.contact_email, 
                    lg:lg,
                    uid_contractor: contractor.rows.cuid,
                    uid_project: id_projet,
                    token_tracking: token_tracking,
                    tracking: 'yes'
                );
        void insert(table:'sr_log', fields:{'type':'credit request','uid_project_contractor':credit.rows.uid_project_contractor,'uid_project':'credit.rows.uid_project', 'email_to': 'contact_email'  ,'description':"Refusé; vue qu'un prix à été donné et le projet est toujours disponible "});
        endif
    endf
    
    function  notifyContractorCreditRefusedReason4(uid_credit)
        credit = sql(single:true, "SELECT * FROM sr_credit WHERE uid = '?'", uid_credit);
        contractor = sql(single:true,"
            SELECT c.contact_firstname, c.contact_lastname, c.contact_email, c.company_name, c.contact_lg, c.contact_gender, s.name_fr, s.name_en, cr.uid, pc.uid_project, pc.token, cr.reason, pc.accepted_date
            FROM sr_project_contractor pc
            INNER JOIN sr_credit cr ON cr.uid_project_contractor = pc.uid
            INNER JOIN sr_project p ON p.uid = pc.uid_project
            INNER JOIN sr_service s ON s.uid = p.uid_service
            INNER JOIN sr_contractor c ON c.uid=pc.uid_contractor
            WHERE pc.accepted = 'yes'
            AND cr.uid = '?' 
            ", uid_credit
        );  
        
        id_projet = contractor.rows.uid_project;
        lg = contractor.rows.contact_lg;
        
        time = time();
        token_tracking = hash(algo:"sha512", contractor.rows.contact_email .+ id_projet .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        if (contractor.nbrows > 0) then
                automail::sendEmail(
                    "notifyContractorCreditRefusedReason4",
                    group: 'contractors',
                    parseSubject: "use id_projet;",
                    to: contractor.rows.contact_email, 
                    lg:lg,
                    uid_contractor: contractor.rows.cuid,
                    uid_project: id_projet,
                    token_tracking: token_tracking,
                    tracking: 'yes'
                );
        void insert(table:'sr_log', fields:{'type':'credit request','uid_project_contractor':credit.rows.uid_project_contractor,'uid_project':'credit.rows.uid_project', 'email_to': 'contact_email'  ,'description':"Refusé; vue qu'un prix à été donné et le projet est toujours disponible "});
        endif
    endf
    
    
    function sendCreditReasonExplanationToAdmin(uid_credit, explanation)
        contractor = sql(single:true,"
            SELECT c.contact_firstname, c.contact_lastname, c.company_name, c.contact_lg, s.name_fr, s.name_en, cr.uid, pc.uid_contractor, pc.uid_project, pc.token, cr.reason
            FROM sr_project_contractor pc
            INNER JOIN sr_credit cr ON cr.uid_project_contractor = pc.uid
            INNER JOIN sr_project p ON p.uid = pc.uid_project
            INNER JOIN sr_service s ON s.uid = p.uid_service
            INNER JOIN sr_contractor c ON c.uid=pc.uid_contractor
            WHERE pc.accepted = 'yes'
            AND cr.uid = '?' 
            ", uid_credit
        );  
        
        client_explanation = explanation;
        id_projet = contractor.rows.uid_project;
        id_credit = contractor.rows.uid;
        lg = contractor.rows.contact_lg;

        
        if (contractor.nbrows > 0) then
            //Il faut prendre le token de sr_project_contractor et non de sr_project
            client = sql(single:true,"SELECT c.email, c.firstname, c.lastname, c.lang, p.token, c.gender, c.uid FROM sr_project p INNER JOIN sr_client c ON c.uid = p.uid_client WHERE p.uid='?'",contractor.rows.uid_project);
            lg = 'fr';
            gender = client.rows.gender;
        
            automail::sendEmail(
                "sendCreditReasonExplanationToAdmin",
                parseSubject: "use id_projet; use id_credit;",
                to: 'deb@xpertsource.com', 
                cc: 'louis.jhonny@gmail.com',
                lg:lg
            );
        endif
    endf

    
    // C10
    /*
        string uid_contractor - the uid of the owner of the card
        string uid_cc - the uid of the credit card that failed
    */
    function paymentFailedToContractor(uid_contractor, cardinfo, amount)
        contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid='?'", uid_contractor);
        
        lg = contractor.rows.contact_lg;
        if (lg eq '') then
            lg = 'fr';
        endif
        
        time = time();
        token_tracking = hash(algo:"sha512", contractor.rows.contact_email .+ uid_contractor .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        automail::sendEmail(
            "paymentFailedToContractor",
            group: 'contractors',
            to: contractor.rows.contact_email, 
            cc: contractor.rows.email_accounting, 
            lg:lg,
            uid_contractor: uid_contractor,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
    endf
    
    
    // C11
    /*
        string uid_contractor - the uid of the owner of the card
        string uid_cc - the uid of the credit card that failed
    */
    function paymentFailedToAdmin(uid_contractor, cardinfo, amount)
        contractor = sql(single:true, "SELECT contact_firstname, contact_lastname, contact_email, contact_title FROM sr_contractor WHERE uid='?'", uid_contractor);
        
        automail::sendEmail(
            "paymentFailedToAdmin",
            lg:'fr'
        );
    endf
    
    // C12
    /*
        string uid_project - the uid of the project   //!!
    */
    function sendSatisfactionSurveyToClient(uid_project)
        
        client = sql(single:true,"SELECT c.email, c.lang, p.token, c.uid FROM sr_project p INNER JOIN sr_client c ON c.uid = p.uid_client WHERE p.uid='?'",uid_project);
        lg = client.rows.lang;
        
        service = sql(single:true,"
            SELECT s.name_? as service
            FROM sr_service s
            INNER JOIN sr_project p ON p.uid_service = s.uid
            WHERE p.uid = '?'
            ", lg, uid_project
        );
        
        contractors = sql("
            SELECT c.contact_firstname, c.contact_lastname, c.company_name, pc.uid, pc.token, c.contact_lg, seo
            FROM sr_project_contractor pc
            INNER JOIN sr_contractor c ON c.uid=pc.uid_contractor
            INNER JOIN sr_project p ON p.uid = pc.uid_project
            INNER JOIN sr_service s ON s.uid = p.uid_service
            WHERE accepted = 'yes'
            AND uid_project = '?' 
            ", uid_project
        );  

        if (contractors.nbrows > 0) then
            //Il faut prendre le token de sr_project_contractor et non de sr_project
            token = client.rows.token;
            res = (resub(trim2(client.rows.email),emailRegex,"$1"));
            //void insert(table:'sr_log', fields:{'uid_contractor':contractors.rows.uid,'uid_project':uid_project.+'-1','email_to': email_to  ,'description':'email sendSatisfactionSurveyToClient--avant1','value':client.rows.email});
            //void insert(table:'sr_log', fields:{'uid_project':uid_project.+'-1','email_to': email_to  ,'description':'email sendSatisfactionSurveyToClient--res','value':res});
            if   ( res ne '' && client.rows.email ne '' && strpos(res,' ') < 0 && strpos(res,',') < 0 && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
                email_to = res;
                void insert(table:'sr_log', fields:{'uid_project':uid_project.+'-1','email_to': email_to  ,'description':'email sendSatisfactionSurveyToClient---','value':client.rows.email});
                
                //create tracking token
                time = time();
                token_tracking = hash(algo:"sha512", client.rows.email .+ client.rows.uid .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
                
                automail::sendEmail(
                    "sendSatisfactionSurveyToClient",
                    group: 'clients',
                    to: client.rows.email, 
                    lg:lg,
                    uid_client: client.rows.uid,
                    token_tracking: token_tracking,
                    tracking: 'yes'
                );
            endif
        endif
    endf
    
   // C13
   /*
        context contractor 
   */
    function notifyAdminContractorRequestInformation(contractor)
        automail::sendEmail(
            "notifyAdminContractorRequestInformation"
        );
    endf

    // C14
    /*
        string uid_contractor - the uid of the contractor
    */
    function notifyAdminContractorInscription(uid_contractor)
        lg = 'fr';
        contractor = sql(single:true, "
            SELECT  c.uid, c.contact_firstname, c.contact_lastname, c.contact_phone, c.contact_email, 
                    c.contact_title, c.company_name, c.address, c.company_phone, c.rbq, c.ne, c.insurance_number, c.insurance_company, c.comments
            FROM sr_contractor c
            LEFT JOIN sr_contractor_service cs ON c.uid=cs.uid_contractor
            WHERE c.uid='?'
        ", uid_contractor);
        
        territories = sql(single:true,"
            SELECT GROUP_CONCAT(t.name_".+lg.+" SEPARATOR ', ' ) as territories FROM sr_contractor_territory ct
            INNER JOIN sr_territory t ON t.uid=ct.uid_territory 
            WHERE ct.uid_contractor='?' AND t.active='yes'", uid_contractor);
            
        automail::sendEmail(
            "notifyAdminContractorInscription"
        );
            
    endf
    
    // C15 
    /*
        context before_info - a context containing the information of the contractor and his address before the update
        context after_info - a context containing the information of the contractor and his address after the update
    */
    function notifyAdminModifyContractorProfile(before_info, after_info) 
    
        // get the city name from uid
         lg = 'fr';
        after_city_name = sql(single:true,"SELECT name_".+ lg .+" as name FROM sr_city WHERE uid='?'", after_info.city);
      //  after_city_name = sql(single:true,"SELECT name_".+lg.rows.lg.+" as name FROM sr_city WHERE uid='?'", after_info.city);
        after_info.city = after_city_name.rows.name;
        
        // for subject
        entreprise = before_info.company_name;
        
        automail::sendEmail(
            "notifyAdminModifyContractorProfile",
            parseSubject: "use entreprise;"
        );
    endf
    
    
    // C16
    /*
        string uid_contractor - the uid of the contractor
        string uid_project - the uid of the project which the contractor wants a credit
    */
    function notifyAdminContractorCreditProject(uid_contractor, uid_project) 
    
        credit = sql(single:true,
            "SELECT * FROM sr_credit WHERE uid_project_contractor=(SELECT uid FROM sr_project_contractor WHERE uid_contractor='?' AND uid_project='?')"
            , uid_contractor, uid_project
        );
        
        client = sql(single:true, "SELECT uid_client FROM sr_project where uid = '?'", uid_project);
        
        contractor_info = {
            "uid_contractor": uid_contractor,
            "uid_project": uid_project,
            "reason":credit.rows.reason,
            "no_quote": credit.rows.no_quote,
            "called": credit.rows.called,
            "voicemail": credit.rows.voicemail,
            "email": credit.rows.email,
            "call1_date":credit.rows.call1_date,
            "call2_date":credit.rows.call2_date,
            "call3_date":credit.rows.call3_date,
            "explanation":credit.rows.explanation,
            "uid_client":client.rows.uid_client
        };

        automail::sendEmail(
            "notifyAdminContractorCreditProject"
        );
        
    endf    
    
    
    // C17
    /*
        uid_contractor - the uid of the contractor
    */
    function notifyAdminContractorChangeTerritory(uid_contractor) 

        // Variables for the email
        lg = 'fr';
        contractor = sql(single:true,"SELECT company_name FROM sr_contractor WHERE uid='?'", uid_contractor);
        contractor_territories = sql(single:true,"
            SELECT GROUP_CONCAT(t.name_".+lg.+" SEPARATOR ', ') as name
            FROM sr_territory t
            INNER JOIN sr_contractor_territory ct ON t.uid=ct.uid_territory
            WHERE t.active='yes'
            AND ct.uid_contractor='?'
            ", uid_contractor
        );
        
        // infos to be passed to the email
        contractor_info = {
            "company_name": contractor.rows.company_name,
            "uid_contractor": uid_contractor,
            "territories": contractor_territories.rows.name
        };
        
        automail::sendEmail(
            "notifyAdminContractorChangeTerritory"
        );
        
    endf
  
 
  
    
    // C18
    /*
        string uid_contractor - the uid of the contractor
        array[] services_uid - an array containing the uids of the services added
    */
    function notifyAdminContractorAddService(uid_contractor, services_uid) 
    
        // Variables for the email
        contractor = sql(single:true,"SELECT company_name FROM sr_contractor WHERE uid='?'", uid_contractor);
        lg = contractor.rows.contact_lg;
        if (lg eq '') then
            lg = 'fr';
        endif
        
        service_names = sql(single:true,"SELECT GROUP_CONCAT(service SEPARATOR ', ') as name FROM sr_service WHERE active='yes' AND find_in_set(uid,'?')", implode(",",services_uid));
        
        // infos to be passed to the email
        contractor_info = {
            "company_name": contractor.rows.company_name,
            "uid_contractor": uid_contractor,
            "services": service_names.rows.name
        };
        
        automail::sendEmail(
            "notifyAdminContractorAddService"
        );
        
    endf
    

    
    // C19
    /*
        string uid_contractor - the uid of the contractor
        string suggestion - the suggestion/comment of the contractor
    */
    function contractorSuggestionToAdmin(uid_contractor, suggestion) 
    
        // Variables for the email
        contractor = sql(single:true,"SELECT company_name, contact_phone, contact_email, contact_gender, contact_firstname, contact_lastname FROM sr_contractor WHERE uid='?'", uid_contractor);
    
        // infos to be passed to the email body
        contractor_info = {
            "company_name": contractor.rows.company_name,
            "uid_contractor": uid_contractor,
            "gender": contractor.rows.contact_gender,
            "first_name": contractor.rows.contact_firstname,
            "last_name": contractor.rows.contact_lastname,
            "telephone": contractor.rows.contact_phone,
            "email_contractor": contractor.rows.contact_email,
            "suggestion": suggestion
        };    
        
        // infos to be passed to the email subject for webmaster use
        entreprise = contractor.rows.company_name;
        id_entrepreneur = uid_contractor;
    
        automail::sendEmail(
            "contractorSuggestionToAdmin",
            to:'pro@xpertsource.com',
            parseSubject: "use entreprise; use id_entrepreneur;"
        );
        
    endf
    
    function clientSuggestionToAdmin(uid_contractor, client_email, suggestion) 
    
        // Variables for the email
        contractor = sql(single:true,"SELECT company_name, contact_phone, contact_email, contact_gender, contact_firstname, contact_lastname FROM sr_contractor WHERE uid='?'", uid_contractor);
    
        // infos to be passed to the email body
        contractor_info = {
            "company_name": contractor.rows.company_name,
            "uid_contractor": uid_contractor,
            "gender": contractor.rows.contact_gender,
            "first_name": contractor.rows.contact_firstname,
            "last_name": contractor.rows.contact_lastname,
            "telephone": contractor.rows.contact_phone,
            "email_contractor": contractor.rows.contact_email,
            "suggestion": suggestion
        };    
        
        // infos to be passed to the email subject for webmaster use
        entreprise = contractor.rows.company_name;
        id_entrepreneur = uid_contractor;
    
        automail::sendEmail(
            "clientSuggestionToAdmin",
            to:'deb@xpertsource.com',
            parseSubject: "use entreprise; use id_entrepreneur;"
        );
        
    endf
    
    
    // C20
    /*
        string uid_contractor - the uid of the contractor
        note sql in email modified  for renoquotes
    */
    function contractorActivation(uid_contractor)
        contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
        lg = contractor.rows.contact_lg;
        if (lg eq '') then
            lg = 'fr';
        endif

        time = time();
        token_tracking = hash(algo:"sha512", contractor.rows.contact_email .+ uid_contractor .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));

        automail::sendEmail(
            "contractorActivation",
            group: 'contractors',
            to: contractor.rows.contact_email,
            lg: lg,
            uid_contractor: uid_contractor,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
        
    endf
    
    // C21
    /*
        string uid_contractor - the uid of the contractor
    */
    function contractorForgotPassword(uid_contractor)
        contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
        lg = contractor.rows.contact_lg;
        if (lg eq '') then
            lg = 'fr';
        endif
        
        time = time();
        token_tracking = hash(algo:"sha512", contractor.rows.contact_email .+ uid_contractor .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        automail::sendEmail(
            "contractorForgotPassword",
            group: 'contractors',
            to: contractor.rows.contact_email, 
            lg: lg,
            uid_contractor: uid_contractor,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
        
    endf
    
    
    // C22
    /*
        string uid_project - the uid of the project
    */
    function notifyAdminErrorScript(uid_project)
        lg = 'fr';
        project = sql(single:true, "
            SELECT  c.uid as client_uid, c.firstname, c.lastname, c.gender, a.street_no, a.street, a.city, a.zip, 
                    c.lang, c.languages, a.phone1, a.phone2, a.phone3, p.uid as project_uid, s.name_".+lg.+" as service, p.description, p.due_date,
                    p.status, p.comments, p.token, p.max_quotes, a.uid_city
            FROM sr_project p
            INNER JOIN sr_client c ON p.uid_client=c.uid
            LEFT JOIN sr_address a ON p.uid_address=a.uid
            LEFT JOIN sr_service s ON p.uid_service=s.uid
            WHERE p.uid='?'
        ", uid_project);
        
        territory = sql(single:true, "SELECT t.name_".+lg.+" as name FROM sr_territory t WHERE t.uid=(SELECT uid_territory FROM sr_city c WHERE c.uid='?')", project.rows.uid_city);
   
        automail::sendEmail(
            "notifyAdminErrorScript"
        );
        
    endf
    
    // C23
    /*
        string uid_project - the uid of the project
    */
    function appologiesToClientNotEnoughQuotes(uid_project)
        project = sql(single:true, "
            SELECT  p.uid, c.email, c.gender, c.firstname, c.lastname, c.lang, p.uid_service, p.uid_client
            FROM sr_project p
            INNER JOIN sr_client c ON p.uid_client=c.uid
            WHERE p.uid='?'
        ", uid_project);
        
        lg = project.rows.lang;
        if (lg eq '') then
            lg = 'fr';
        endif
        
        service = sql(single:true, "SELECT name_? as name FROM sr_service WHERE uid='?'", lg, project.rows.uid_service);
        
        // for email subject
        service = service.rows.name;
        
        //create tracking token
        time = time();
        token_tracking = hash(algo:"sha512", project.rows.email .+ project.rows.uid_client .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        automail::sendEmail(
            "appologiesToClientNotEnoughQuotes",
            group: 'clients',
            to: project.rows.email, 
            lg: lg,
            parseSubject: "use service;",
            uid_client: project.rows.uid_client,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
        
    endf
    
    // C24
    /*
        string uid_contractor - the uid of the contractor
    */
    function contractorAccountBlocked(uid_contractor)
        
        contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid='?'", uid_contractor);
        lg = contractor.rows.contact_lg;
        if (lg eq '') then
            lg = 'fr';
        endif
        
        time = time();
        token_tracking = hash(algo:"sha512", contractor.rows.contact_email .+ uid_contractor .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        automail::sendEmail(
            "contractorAccountBlocked",
            group: 'contractors',
            to: contractor.rows.contact_email,
            cc: contractor.rows.email_accounting,
            lg: lg,
            uid_contractor: uid_contractor,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
        
    endf
    
    
    // C25
    /*
        string email - email of the contractor
        string name - name of the contractor
        string id_appels_entrepreneurs - id of the contractor in tbl_appels_entrepreneurs
    */        
     function contractorProfileReminder1(contact_email, name, id_appels_entrepreneurs, lg)
    
        url = sql(single:true, "SELECT url_prod_alt_".+ lg .+" as url_prod FROM sn_configs");
        url = url.rows.url_prod;
       // url_link = url .+ "";
        //url_link = url .+ "/en/expert-create-login";
        if (lg eq 'en')then
            url_link = "https://xpertsource.com/en/contractor-form"; //en
            //email_from = "jabile@renoquotes.com";
        else
            url_link = "https://xpertsource.com/fr/formulaire-entrepreneur";//fr
            //email_from = "jabile@soumissionrenovation.ca";
        endif
       
        time = time();
        token_tracking = hash(algo:"sha512", contact_email .+ id_appels_entrepreneurs .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
       
        emailRegex = "([\w\.-]+@[\w\.-]+\.[\w]+)";
        res = (resub(trim2(contact_email),emailRegex,"$1"));
        if   ( res ne '' && contact_email ne '' && res ne 'aucun' &&  strpos(res,'@') > 0)    then
            contact_email = res;
            automail::sendEmail(
                "contractorProfileReminder1",
                group: 'contractors',
                to: contact_email,
                lg: lg,
                uid_contractor: id_appels_entrepreneurs,
                token_tracking: token_tracking,
                tracking: 'yes'
            );
        else
            void insert(table:'sr_log', fields:{'type':'email  error','uid_project_contractor':id_appels_entrepreneurs,'uid_project':id_projet, 'email_to': contact_email  ,'description':'email contractorProfileReminder1_'.+lg,'value':name});
        endif
    endf
    
    function contractorProfileReminder1B(contact_email, name, id_appels_entrepreneurs, lg)
    
        url = sql(single:true, "SELECT url_prod_alt_".+ lg .+" as url_prod FROM sn_configs");
        url = url.rows.url_prod;
        if (lg eq 'en')then
            url_link = "https://xpertsource.com/en/contractor-form";
        else
            url_link = "https://xpertsource.com/fr/formulaire-entrepreneur";
        endif
       
        //create the token for tracking
        time = time();
        token_tracking = hash(algo:"sha512", contact_email .+ id_appels_entrepreneurs .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
       
        emailRegex = "([\w\.-]+@[\w\.-]+\.[\w]+)";
        res = (resub(trim2(contact_email),emailRegex,"$1"));
        //if   ( res ne '' && contact_email ne '' && strpos(res,' ') < 0 && strpos(res,',') < 0 && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
        if   ( res ne '' && contact_email ne '' && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
            contact_email = res;
            //void insert(table:'sr_log', fields:{'type':'email  OK','uid_project_contractor':id_appels_entrepreneurs,'uid_project':id_projet, 'email_to': contact_email  ,'description':'email contractorProfileReminder1_OK'.+lg,'value':name});
            automail::sendEmail(
                "contractorProfileReminder1B",
                group: 'contractors',
                to: contact_email,
                lg: lg,
                uid_contractor: id_appels_entrepreneurs,
                token_tracking: token_tracking,
                tracking: 'yes'
            );
        else
            void insert(table:'sr_log', fields:{'type':'email  error','uid_project_contractor':id_appels_entrepreneurs,'uid_project':id_projet, 'email_to': contact_email  ,'description':'email contractorProfileReminder1_'.+lg,'value':name});
        endif
    endf
   
    // C25C
    //envoie courriel sur le cellulaire
    function contractorProfileReminder_cell(contact_email, name, id_appels_entrepreneurs, lg)
         url = sql(single:true, "SELECT url_prod_alt_".+ lg .+" as url_prod FROM sn_configs");
        url = url.rows.url_prod;
        if (lg eq 'en')then
            url_link = "https://xpertsource.com/en/contractor-form"; //en
        else
            url_link = "https://xpertsource.com/fr/formulaire-entrepreneur";//fr
        endif
        void insert(table:'sr_log', fields:{'type':'email  test18','uid_project_contractor':id_appels_entrepreneurs,'uid_project':id_projet, 'email_to': contact_email  ,'description':'email contractorProfileReminder1_'.+lg,'value':name});
       
        emailRegex = "([\w\.-]+@[\w\.-]+\.[\w]+)";
        res = (resub(trim2(contact_email),emailRegex,"$1"));
        if   ( res ne '' && contact_email ne '' && strpos(res,' ') < 0 && strpos(res,',') < 0 && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
            contact_email = res;
            automail::sendEmail(
                "contractorProfileReminder_cell",
                to: contact_email,
                lg: lg
            );
        else
            void insert(table:'sr_log', fields:{'type':'email  error','uid_project_contractor':id_appels_entrepreneurs,'uid_project':id_projet, 'email_to': contact_email  ,'description':'email contractorProfileReminder1_'.+lg,'value':name});
        endif
    endf
    
    //envoie courriel sur le cellulaire  pour des test
    function contractorProfileReminder_cell2(contact_email, name, id_appels_entrepreneurs, lg)
         url = sql(single:true, "SELECT url_prod_alt_".+ lg .+" as url_prod FROM sn_configs");
        url = url.rows.url_prod;
       // url_link = url .+ "";
        //url_link = url .+ "/en/expert-create-login";
        if (lg eq 'en')then
            url_link = "https://xpertsource.com/en/contractor-form"; //en
        else
            url_link = "https://xpertsource.com/fr/formulaire-entrepreneur";//fr
        endif
        void insert(table:'sr_log', fields:{'type':'email2  test18','uid_project_contractor':id_appels_entrepreneurs,'uid_project':id_projet, 'email_to': contact_email  ,'description':'email contractorProfileReminder1_'.+lg,'value':name});
       
        emailRegex = "([\w\.-]+@[\w\.-]+\.[\w]+)";
        res = (resub(trim2(contact_email),emailRegex,"$1"));
        if   ( res ne '' && contact_email ne '' && strpos(res,' ') < 0 && strpos(res,',') < 0 && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
            contact_email = res;
            //void insert(table:'sr_log', fields:{'type':'email  OK','uid_project_contractor':id_appels_entrepreneurs,'uid_project':id_projet, 'email_to': contact_email  ,'description':'email contractorProfileReminder1_OK'.+lg,'value':name});
            automail::sendEmail(
                "contractorProfileReminder_cell2",
                to: contact_email,
                lg: lg
            );
        else
            void insert(table:'sr_log', fields:{'type':'emaile test  error','uid_project_contractor':id_appels_entrepreneurs,'uid_project':id_projet, 'email_to': contact_email  ,'description':'email contractorProfileReminder1_'.+lg,'value':name});
        endif
    endf

    // C26
    /*
        string email - email of the contractor
        string name - name of the contractor
        string id_appels_entrepreneurs - id of the contractor in tbl_appels_entrepreneurs
    */  
     function contractorProfileReminder2(contact_email, name, id_appels_entrepreneurs, lg)
    
        url = sql(single:true, "SELECT url_prod_alt_".+ lg .+" as url_prod FROM sn_configs");
        url = url.rows.url_prod;
       // url_link = url .+ "";
        //url_link = url .+ "/en/expert-create-login";
        if (lg eq 'en')then
            url_link = "https://xpertsource.com/en/contractor-form"; //en
            //email_from = "jabile@renoquotes.com";
        else
            url_link = "https://xpertsource.com/fr/formulaire-entrepreneur";//fr
            //email_from = "jabile@soumissionrenovation.ca";
        endif
       
        //create the token for tracking
        time = time();
        token_tracking = hash(algo:"sha512", contact_email .+ id_appels_entrepreneurs .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
       
        emailRegex = "([\w\.-]+@[\w\.-]+\.[\w]+)";
        res = (resub(trim2(contact_email),emailRegex,"$1"));
        if   ( res ne '' && contact_email ne '' && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
            contact_email = res;
            automail::sendEmail(
                "contractorProfileReminder2",
                group: 'contractors',
                to: contact_email,
                lg: lg,
                uid_contractor: id_appels_entrepreneurs,
                token_tracking: token_tracking,
                tracking: 'yes'
            );
        else
            void insert(table:'sr_log', fields:{'type':'email  error','uid_project_contractor':id_appels_entrepreneurs,'uid_project':id_projet, 'email_to': contact_email  ,'description':'email contractorProfileReminder2_'.+lg,'value':name});
        endif
    endf
    
    function contractorProfileReminder2B(contact_email, name, id_appels_entrepreneurs, lg)
    
        url = sql(single:true, "SELECT url_prod_alt_".+ lg .+" as url_prod FROM sn_configs");
        url = url.rows.url_prod;
       // url_link = url .+ "";
        //url_link = url .+ "/en/expert-create-login";
        if (lg eq 'en')then
            url_link = "https://xpertsource.com/en/contractor-form"; //en
        else
            url_link = "https://xpertsource.com/fr/formulaire-entrepreneur";//fr
        endif
       
        //create the token for tracking
        time = time();
        token_tracking = hash(algo:"sha512", contact_email .+ id_appels_entrepreneurs .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
       
        emailRegex = "([\w\.-]+@[\w\.-]+\.[\w]+)";
        res = (resub(trim2(contact_email),emailRegex,"$1"));
        if   ( res ne '' && contact_email ne '' && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
            contact_email = res;
            automail::sendEmail(
                "contractorProfileReminder2B",
                group: 'contractors',
                to: contact_email,
                lg: lg,
                uid_contractor: id_appels_entrepreneurs,
                token_tracking: token_tracking,
                tracking: 'yes'
            );
        else
            void insert(table:'sr_log', fields:{'type':'email  error','uid_project_contractor':id_appels_entrepreneurs,'uid_project':id_projet, 'email_to': contact_email  ,'description':'email contractorProfileReminder2_'.+lg,'value':name});
        endif
    endf


    
    // C27
    /*
        string email - email of the contractor
        string name - name of the contractor
        string id_appels_entrepreneurs - id of the contractor in tbl_appels_entrepreneurs  //!!!
    */  
    function contractorProfileReminder3(contact_email, name, id_appels_entrepreneurs, lg)
    
        url = sql(single:true, "SELECT url_prod_alt_".+ lg .+" as url_prod FROM sn_configs");
        url = url.rows.url_prod;

        lg  = lc(lg);
        if (lg eq 'en')then
            url_link = "https://xpertsource.com/en/contractor-form"; //en
        else
            url_link = "https://xpertsource.com/fr/formulaire-entrepreneur";//fr
        endif
       
        //create the token for tracking
        time = time();
        token_tracking = hash(algo:"sha512", contact_email .+ id_appels_entrepreneurs .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
       
        emailRegex = "([\w\.-]+@[\w\.-]+\.[\w]+)";
        res = (resub(trim2(contact_email),emailRegex,"$1"));
        if   ( res ne '' && contact_email ne '' && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
            contact_email = res;
            automail::sendEmail(
                "contractorProfileReminder3",
                group: 'contractors',
                to: contact_email,
                lg: lg,
                uid_contractor: id_appels_entrepreneurs,
                token_tracking: token_tracking,
                tracking: 'yes'
            );
        else
            void insert(table:'sr_log', fields:{'type':'email  error','uid_project_contractor':id_appels_entrepreneurs,'uid_project':id_projet, 'email_to': contact_email  ,'description':'email contractorProfileReminder3_'.+lg,'value':name});
        endif
    endf
    
    function contractorProfileReminder3B(contact_email, name, id_appels_entrepreneurs, lg)
    
        url = sql(single:true, "SELECT url_prod_alt_".+ lg .+" as url_prod FROM sn_configs");
        url = url.rows.url_prod;

        lg  = lc(lg);
        if (lg eq 'en')then
            url_link = "https://xpertsource.com/en/contractor-form"; //en
        else
            url_link = "https://xpertsource.com/fr/formulaire-entrepreneur";//fr
        endif
       
        //create the token for tracking
        time = time();
        token_tracking = hash(algo:"sha512", contact_email .+ id_appels_entrepreneurs .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
       
        emailRegex = "([\w\.-]+@[\w\.-]+\.[\w]+)";
        res = (resub(trim2(contact_email),emailRegex,"$1"));
        if   ( res ne '' && contact_email ne '' && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
            contact_email = res;
            automail::sendEmail(
                "contractorProfileReminder3B",
                group: 'contractors',
                to: contact_email,
                lg: lg,
                uid_contractor: id_appels_entrepreneurs,
                token_tracking: token_tracking,
                tracking: 'yes'
            );
        else
            void insert(table:'sr_log', fields:{'type':'email  error','uid_project_contractor':id_appels_entrepreneurs,'uid_project':id_projet, 'email_to': contact_email  ,'description':'email contractorProfileReminder3_'.+lg,'value':name});
        endif
    endf
    
    function contractorProfileReminder4(contact_email, name, id_appels_entrepreneurs, lg, month)
    
        url = sql(single:true, "SELECT url_prod_alt_".+ lg .+" as url_prod FROM sn_configs");
        url = url.rows.url_prod;

        lg  = lc(lg);
        if (lg eq 'en')then
            url_link = "https://xpertsource.com/en/contractor-form"; //en
        else
            url_link = "https://xpertsource.com/fr/formulaire-entrepreneur";//fr
        endif
       
        //create the token for tracking
        time = time();
        token_tracking = hash(algo:"sha512", contact_email .+ id_appels_entrepreneurs .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
       
        emailRegex = "([\w\.-]+@[\w\.-]+\.[\w]+)";
        res = (resub(trim2(contact_email),emailRegex,"$1"));
        if   ( res ne '' && contact_email ne '' && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
            contact_email = res;
            //void insert(table:'sr_log', fields:{'type':'email  OK','uid_project_contractor':id_appels_entrepreneurs,'uid_project':id_projet, 'email_to': contact_email  ,'description':'email contractorProfileReminder1_OK'.+lg,'value':name});
            automail::sendEmail(
                "contractorProfileReminder4",
                group: 'contractors',
                to: contact_email,
                lg: lg,
                uid_contractor: id_appels_entrepreneurs,
                token_tracking: token_tracking,
                tracking: 'yes'
            );
        else
            void insert(table:'sr_log', fields:{'type':'email  error','uid_project_contractor':id_appels_entrepreneurs,'uid_project':id_projet, 'email_to': contact_email  ,'description':'email contractorProfileReminder4_'.+lg,'value':name});
        endif
    endf

    // C28
    function creditApproved(uid_credit)
        credit = sql(single:true, "SELECT * FROM sr_credit WHERE uid = '?'", uid_credit);
        contractor = sql(single:true, "
            SELECT pc.uid_project, c.contact_firstname, c.contact_lastname, c.contact_email, c.contact_gender, c.contact_lg, c.uid
            FROM sr_project_contractor pc 
            INNER JOIN sr_contractor c ON c.uid=pc.uid_contractor
            WHERE pc.uid='?'
            ", credit.rows.uid_project_contractor);
            
        id_projet = contractor.rows.uid_project;
        
        lg = contractor.rows.contact_lg;
        if (lg eq '') then
            lg = 'fr';
        endif
        
        //create the token for tracking
        time = time();
        token_tracking = hash(algo:"sha512", contractor.rows.contact_email .+ id_projet .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        automail::sendEmail(
            "creditApproved",
            group: 'contractors',
            parseSubject: "use id_projet;",
            to: contractor.rows.contact_email,
            lg: lg,
            uid_contractor: contractor.rows.uid,
            uid_project: id_projet,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
    endf
    
    // C29
    function creditDenied(uid_credit, reason)
        
        credit = sql(single:true, "SELECT * FROM sr_credit WHERE uid = '?'", uid_credit);
        contractor = sql(single:true, "
            SELECT pc.uid_project, c.contact_firstname, c.contact_lastname, c.contact_email, c.contact_gender, contact_lg, c.uid, pc.accepted_date
            FROM sr_project_contractor pc 
            INNER JOIN sr_contractor c ON c.uid=pc.uid_contractor
            WHERE pc.uid='?'
            ", credit.rows.uid_project_contractor);
        
        id_projet = contractor.rows.uid_project;
        
        lg = contractor.rows.contact_lg;
        if (lg eq '') then
            lg = 'fr';
        endif

        //create the token for tracking
        time = time();
        token_tracking = hash(algo:"sha512", contractor.rows.contact_email .+ id_projet .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));

        automail::sendEmail(
            "creditDenied",
            group: 'contractors',
            parseSubject: "use id_projet;",
            to: contractor.rows.contact_email,
            lg: lg,
            uid_contractor: contractor.rows.uid,
            uid_project: id_projet,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
        
    endf
    
        // 
    /*
        uid_contractor - the uid of the contractor
    */
    function notifyAdminClientSatisfactionSite(uid_project) 

        // Variables for the email
        lg = 'fr';
        project = sql(single:true,"SELECT * FROM sr_project WHERE uid='?'", uid_project);

        // infos to be passed to the email
        project_info = {
            "uid_project": uid_project,
            "client_satisfaction": project.rows.client_satisfaction,
            "comment_satisfaction": project.rows.comment_satisfaction
        };

        void automail::sendEmail(
            "notifyAdminClientSatisfactionSite"
        );
        
    endf


    function sendMessageAdminEmail(message, title,typeMessage)
        lg = 'fr';
        message = message;
        title=title;
        type = typeMessage;

        automail::sendEmail(
            "sendMessageEmail",
             parseSubject: "use type;",
             lg:lg
        );
    endf
    
    
    function sendMessageToDev(message, title, typeMessage)
        lg = 'fr';
        message = message;
        title=title;
        type = typeMessage;

        automail::sendEmail(
            "sendMessageToDev",
             parseSubject: "use type;",
             lg:lg
        );
    endf

    

    function sendContactEmail()
        automail::sendEmail("sed_contact_form_email");
    endf
    
    function sendContactEmailNewsletter()
        automail::sendEmail("sed_contact_form_email_newsletter");
    endf

//----------------------- fonctions de tests  --------------------

    function test2_suggestProjectToContractor(uid_contractor, uid_project, lg, email_to)
      //  project_contractor = sql(single:true,"SELECT uid_project, uid_contractor, uid FROM sr_project_contractor WHERE token='?'", token);
        contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
        
      //  lg = contractor.rows.contact_lg;
        if (lg eq '') then
            lg = 'fr';
        endif
        
        project = sql(single:true, "
                SELECT p.*, IFNULL(c.name_?, a.city) as city, a.zip ,a.province
                FROM sr_project p 
                LEFT JOIN sr_address a ON p.uid_address=a.uid 
                LEFT JOIN sr_city c ON c.uid=a.uid_city 
                WHERE p.uid = '?'", lg, uid_project);
        
        service = sql(single:true, "SELECT * FROM sr_service WHERE uid = '?'", project.rows.uid_service);
        service = service.rows{'name_'.+lg};
        
        // for the email subject
        id_projet = project.rows.uid;
        void insert(table:'sr_debug', fields:{'description':'suggestPtoC,email_from='.+' ','text':'email_to='.+email_to.+ '  lg='.+lg});

        automail::sendEmail(
            "suggestProjectToContractor",
            group: 'contractors',
            to: email_to,
            parseSubject: "use id_projet; use service;",
            lg: lg
        );  
    endf 
    
    
    function test_creditApproved(uid_contractor, uid_project, lg, to_email; uid_credit )
        credit = sql(single:true, "SELECT * FROM sr_credit WHERE uid = '?'", uid_credit);
        contractor = sql(single:true, "
            SELECT  c.contact_firstname, c.contact_lastname, c.contact_email, c.contact_gender, c.contact_lg
            FROM  sr_contractor c 
            WHERE c.uid='?'
            ", uid_contractor);
            
        id_projet = uid_project;
        
        //lg = contractor.rows.contact_lg;
        if (lg eq '') then
            lg = 'fr';
        endif
        
        automail::sendEmail(
            "creditApproved",
            parseSubject: "use id_projet;",
            to: contractor.rows.contact_email,
            lg: lg
        );
        
    endf






    function test_sendEmail(email;...)  
        if (lg eq '') then
            lg = "en";
            if (lg eq '') then
                lg = 'fr';
            endif
        endif
        if (type(email) eq 'string') then
           email = automail::getEmail(email, lg);
        endif
        if (subject eq '') then
            subject = email.subject;
        endif
        if (parseSubject ne '') then
            subject = parse(state:0, data:"{".+ "{".+parseSubject.+"}}" .+ subject);
            // void insert(table:'sr_debug', fields:{'description':'parseSubject='.+subject,'text':''});
        endif
        if (email.active) then
            email_to = (email.debug_mode || to eq '') ? email.to : to;
            if attachfile ne "" then
                if (attachfilect eq '') then
                    attachfilect = 'application/pdf';
                endif
                void email(
                    from: email.from,
                    to: email_to,
                    subject: subject,
                    ct:"text/html",
                    charset: "utf-8",
                    file: email.file,
                    encoding:"base64",
                    ct: attachfilect,
                    attachfile: attachfile,
                    domain: 'xpertsource.com'
                );
            else
                void email(
                    from: email.from,
                    to: email_to,
                    subject: subject,
                    ct:"text/html",
                    charset: "utf-8",
                    file: email.file,
                    encoding:"base64",
                    domain: 'xpertsource.com'
                );           
            endif
        endif
    endf


    function contractorReferaContractor(referrer_uid, referral_uid)
        
        referrer = sql(single:true, "SELECT contact_gender, contact_lastname, contact_email, contact_lg, uid FROM sr_contractor WHERE uid = '?'", referrer_uid);
        referral = sql(single:true, "SELECT company_name FROM sr_contractor WHERE uid = '?'", referral_uid);
        
        //create tracking token
        time = time();
        token_tracking = hash(algo:"sha512", referrer.rows.contact_email .+ referrer_uid .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        automail::sendEmail(
            "contractorReferaContractor",
            group: 'contractors',
            to: referrer.rows.contact_email,
            lg: referrer.rows.contact_lg,
            uid_contractor: referrer_uid,
            token_tracking: token_tracking,
            tracking: 'yes'
        ); 
            
    endf
    
    function sendClientReviewToContractor(project_contractor_uid, language)
     accent = ['À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ÿ', 'Ā', 'ā', 'Ă', 'ă', 'Ą', 'ą', 'Ć', 'ć', 'Ĉ', 'ĉ', 'Ċ', 'ċ', 'Č', 'č', 'Ď', 'ď', 'Đ', 'đ', 'Ē', 'ē', 'Ĕ', 'ĕ', 'Ė', 'ė', 'Ę', 'ę', 'Ě', 'ě', 'Ĝ', 'ĝ', 'Ğ', 'ğ', 'Ġ', 'ġ', 'Ģ', 'ģ', 'Ĥ', 'ĥ', 'Ħ', 'ħ', 'Ĩ', 'ĩ', 'Ī', 'ī', 'Ĭ', 'ĭ', 'Į', 'į', 'İ', 'ı', 'Ĳ', 'ĳ', 'Ĵ', 'ĵ', 'Ķ', 'ķ', 'Ĺ', 'ĺ', 'Ļ', 'ļ', 'Ľ', 'ľ', 'Ŀ', 'ŀ', 'Ł', 'ł', 'Ń', 'ń', 'Ņ', 'ņ', 'Ň', 'ň', 'ŉ', 'Ō', 'ō', 'Ŏ', 'ŏ', 'Ő', 'ő', 'Œ', 'œ', 'Ŕ', 'ŕ', 'Ŗ', 'ŗ', 'Ř', 'ř', 'Ś', 'ś', 'Ŝ', 'ŝ', 'Ş', 'ş', 'Š', 'š', 'Ţ', 'ţ', 'Ť', 'ť', 'Ŧ', 'ŧ', 'Ũ', 'ũ', 'Ū', 'ū', 'Ŭ', 'ŭ', 'Ů', 'ů', 'Ű', 'ű', 'Ų', 'ų', 'Ŵ', 'ŵ', 'Ŷ', 'ŷ', 'Ÿ', 'Ź', 'ź', 'Ż', 'ż', 'Ž', 'ž', 'ſ', 'ƒ', 'Ơ', 'ơ', 'Ư', 'ư', 'Ǎ', 'ǎ', 'Ǐ', 'ǐ', 'Ǒ', 'ǒ', 'Ǔ', 'ǔ', 'Ǖ', 'ǖ', 'Ǘ', 'ǘ', 'Ǚ', 'ǚ', 'Ǜ', 'ǜ', 'Ǻ', 'ǻ', 'Ǽ', 'ǽ', 'Ǿ', 'ǿ', 'Ά', 'ά', 'Έ', 'έ', 'Ό', 'ό', 'Ώ', 'ώ', 'Ί', 'ί', 'ϊ', 'ΐ', 'Ύ', 'ύ', 'ϋ', 'ΰ', 'Ή', 'ή'];
     noaccent = ['A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 's', 'a', 'a', 'a', 'a', 'a', 'a', 'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c', 'D', 'd', 'D', 'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g', 'H', 'h', 'H', 'h', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j', 'K', 'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'l', 'l', 'N', 'n', 'N', 'n', 'N', 'n', 'n', 'O', 'o', 'O', 'o', 'O', 'o', 'OE', 'oe', 'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S', 's', 'T', 't', 'T', 't', 'T', 't', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'W', 'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's', 'f', 'O', 'o', 'U', 'u', 'A', 'a', 'I', 'i', 'O', 'o', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'A', 'a', 'AE', 'ae', 'O', 'o', 'Α', 'α', 'Ε', 'ε', 'Ο', 'ο', 'Ω', 'ω', 'Ι', 'ι', 'ι', 'ι', 'Υ', 'υ', 'υ', 'υ', 'Η', 'η'];
    
    query = "SELECT pc.uid, 
                    DATE(accepted_date) as system_date, 
                    pc.evaluation_date, 
                    pc.uid_project, 
                    pc.uid_contractor,
                    pc.client_comment, 
                    pc.client_satisfaction, 
                    pc.contractor_reply, 
                    pc.reply_date, 
                    pc.comment_verified,
                    (select contact_email from sr_contractor where uid = pc.uid_contractor) as emailto,
                    (select name_? from sr_service where uid = p.uid_service) as sname, 
                    (select ct.name_? from sr_address addr INNER JOIN sr_city ct on addr.uid_city = ct.uid where addr.uid = p.uid_address) as city, 
                    (select firstname from sr_client where uid = p.uid_client) as firstname 
                    FROM sr_project_contractor pc INNER JOIN sr_project p on p.uid = pc.uid_project 
                    WHERE pc.uid = '?' ";
                    
        review = sql(single:true, query, language, language, project_contractor_uid);
        comment = review.rows.client_comment;
        contact_email = review.rows.emailto;
        client_firstname = review.rows.firstname;
        client_service = review.rows.sname;
        city_name = review.rows.city;
        uid_project = review.rows.uid_project;

        //create tracking token
        time = time();
        token_tracking = hash(algo:"sha512", contact_email .+ uid_project .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));

        automail::sendEmail(
            "sendClientReviewToContractor",
            group: 'contractors',
            to: contact_email,
            parseSubject: "use uid_project;",
            lg: language,
            uid_contractor: review.rows.uid_contractor,
            uid_project: uid_project,
            token_tracking: token_tracking,
            tracking: 'yes'
        ); 
    endf
    
    
    /*
    *@description : valider un 
    *
    */
    function filter_contractor_subject(uid, csvpath)
        str = read(csvpath);
        
        out = str_getcsv(str);
        witness = false;
            
        for s in out do
            if(s[1] == uid) then
                witness = true;
            endif
        endfor
          
        return witness;
    endf

    
    /*
    * @Description : utiliser l'api de neverbounce pour valider les adresses emails.
    * @args email: l'adresse email a verifier, access: le token neverbound qui donne accès au service de verification.
    * @return les valeurs de retour sont "vrai" si neverbound retourne 0 ou 4 et "faux" s'il retourne 1 à 3
    *
    */
    function validateEmail(email)
        access = sql(single:true,"select * from sr_neverbounce where status = 'success'");
        
        //POST information to Neverbounce with access token and email.
        res = curl(url: 'https://api.neverbounce.com/v3/single', 
                        header: 'Content-Type: application/x-www-form-urlencoded',
                        data:"access_token=" .+ access.rows.token .+ "&email=" .+ email
                        );
                        
        res = unstringnify(res.body);
    
        if(res.success == false) then
            r = res.error_msg;
            description = 'Neverbounce(-1): access error while processing ' .+ email;
            msg = res.error_msg;
        else
            if(res.result == 0 || res.result == 4) then
                r =  0;
            else
                description = 'Neverbounce(' .+ res.result .+ '): email validation error for ' .+ email;
                //error codes
                if(res.result == 1) then
                    msg = 'The email "' .+ email .+ '" is invalid';
                elseif(res.result == 2) then
                    msg = 'The email "' .+ email .+ '" is a temporary or disposal address';
                elseif(res.result == 3) then
                    msg = 'The email "' .+ email .+ '" is a domain-wide setting';
                endif
                r = res.result;
            endif
            
        endif 
            
            
        void insert(table:'sr_debug', fields:{'description':description,'text':msg});    
        return r;
    endf
    
    
    /*
    * @Description : Se connecter a neverbounce pour generer un token (le token est sauvegarder dans la base de données)
    * @args username: l'utilisateur que vous avez creé sur le site de neverbounce
    * @args password: le password du compte neverbounce que vous avez creé
    *
    */
    function connect_neverbounce(username, password)
        res = curl(url: 'https://api.neverbounce.com/v3/access_token',
                        username: username,
                        password: password,
                        header: 'Content-Type: application/x-www-form-urlencoded',
                        data:"grant_type=client_credentials"
                        );
        init = sql(single:true,"select * from sr_neverbounce where status = 'success'");
        
        res = unstringnify(res.body);
        token = res.access_token;
        nowdate = datetime(format:'%Y-%m-%d %H:%M:%S');
        
        if(token ne "") then
            if(init.nbrows > 0) then
                void sql("update sr_neverbounce set token = '?', gendate = '?' where status='success'", token, nowdate);
            else
                void insert(table:'sr_neverbounce', fields:{'token':token, 'gendate':nowdate, 'status':'success'});
            endif
        else
            void insert(table:'sr_neverbounce', fields:{'token':token, 'gendate':nowdate, 'status':'failure'}, status:'success', msg:res.body);
        endif
    endf
    
    
    function test_email_from(lg)
        email_from = (lg eq 'fr')?'pro@xpertsource.com':'pro@xpertsource.com';
        
        email_from;
        
        automail::sendEmail(
            "contractorProfileReminder1",
            from: 'pro@xpertsource.com',
            to: 'louis.jhonny@gmail.com',
            parseSubject: "use uid_project;",
            lg: language
        );
    endf
    
    function askWorkplanToClient(uid_project)
        project = sql(single:true,"
            SELECT c.firstname, c.lastname, c.lang, c.email, p.uid, p.uid_client
            FROM sr_project p
            INNER JOIN sr_client c ON c.uid=p.uid_client
            WHERE p.uid = '?'"
            , uid_project
        );
        
        lg = project.rows.lang;
        
        //create tracking token
        time = time();
        token_tracking = hash(algo:"sha512", project.rows.email .+ project.rows.uid .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
        automail::sendEmail(
            "askWorkplanToClient",
            to: project.rows.email,
            group: 'clients',
            bcc: 'clients@soumissionrenovation.ca',
            parseSubject: "use uid_project;",
            lg: lg,
            uid_client: project.rows.uid,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
        
    endf
    
    
    function customEmailToWaitingClient(from, uid_project, message, choices)
        project = sql(single:true,"
            SELECT c.firstname, c.lastname, c.lang, c.email, p.uid, p.uid_client
            FROM sr_project p
            INNER JOIN sr_client c ON c.uid=p.uid_client
            WHERE p.uid = '?'"
            , uid_project
        );
        
        all = sql("SELECT * FROM sr_project where uid_client = '?' AND status = 'new'",project.rows.uid_client);
        savedcall = sql(single:true,"SELECT * FROM sr_followup WHERE msg_uid = 1 AND uid_project = '?' ORDER by sn_cdate DESC", uid_project);
        savedmsg = sql(single:true,"SELECT * FROM gc_email_history WHERE uid_project = '?'", uid_project);
        
        choices.msg = message;
        fullmsg = stringnify(choices);
        oldmsg = savedmsg.rows.message;
        
        fullmsg = unstringnify(fullmsg);
        oldmsg = unstringnify(oldmsg);
        
        if(oldmsg.chx0) then
            deletectx(fullmsg, 'chx0');
        endif
        if(oldmsg.chx1) then
            deletectx(fullmsg, 'chx1');
        endif
        if(oldmsg.chx2) then
            deletectx(fullmsg, 'chx2');
        endif
        if(oldmsg.chx3) then
            deletectx(fullmsg, 'chx3');
        endif
        if(oldmsg.chx4) then
            deletectx(fullmsg, 'chx4');
        endif
        if(oldmsg.chx5) then
            deletectx(fullmsg, 'chx5');
        endif
        if(oldmsg.chx6) then
            deletectx(fullmsg, 'chx6');
        endif
        if(oldmsg.chx7) then
            deletectx(fullmsg, 'chx7');
        endif
        if(oldmsg.msg eq fullmsg.msg) then
            deletectx(fullmsg, 'msg');
        endif
        
        lg = project.rows.lang;
        e_from = substr(from, strpos(from,'<') + 1, strpos(from,'>') - 1);
        if(e_from ne "" && project.rows.email ne "") then
        
            //create tracking token
            time = time();
            token_tracking = hash(algo:"sha512", project.rows.email .+ project.rows.uid_client .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
            automail::sendEmail(
                "customEmailToWaitingClient",
                from: from,
                to: project.rows.email,
                bcc: from,
                lg: lg,
                uid_client: project.rows.uid_client,
                token_tracking: token_tracking,
                tracking: 'yes'
            );
        endif
    endf
    
    function customEmailToClient(from, uid_project, message, choices)
        
        project = sql(single:true,"
            SELECT c.firstname, c.lastname, c.lang, c.email, p.uid, p.uid_client
            FROM sr_project p
            INNER JOIN sr_client c ON c.uid=p.uid_client
            WHERE p.uid = '?'"
            , uid_project
        );
        
        all = sql("SELECT * FROM sr_project where uid_client = '?' AND status = 'new'",project.rows.uid_client);
        choices.msg = message;
        fullmsg = stringnify(choices);
        
        //save new email message
        for p in all.rows do
            void insert(
                table:"gc_email_history",
                fields:{'message':fullmsg,'uid_project':p.uid}
            );
        endfor

        lg = project.rows.lang;
        e_from = substr(from, strpos(from,'<') + 1, strpos(from,'>') - 1);
        if(e_from ne "" && project.rows.email ne "") then
        
            //create tracking token
            time = time();
            token_tracking = hash(algo:"sha512", project.rows.email .+ project.rows.uid_client .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
        
            automail::sendEmail(
                "customEmailToClient",
                from: from,
                to: project.rows.email,
                bcc: from,
                lg: lg,
                uid_client: project.rows.uid_client,
                token_tracking: token_tracking,
                tracking: 'yes'
            );
        endif
    endf
    
    function contractor_tip1(contact_email, contact_lg)
        manager = sql(single:true, "SELECT u.firstname, u.lastname, u.phone, u.email, u.photo
            FROM sn_users u
            INNER JOIN sr_contractor c ON u.uid = c.account_manager
            WHERE c.contact_email = '?'
            ", contact_email);

        //create tracking token
        time = time();
        token_tracking = hash(algo:"sha512", contact_email .+ manager.rows.uid .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));

        automail::sendEmail(
            "contractor_tip1",
            group: 'contractors',
            to: contact_email,
            lg: contact_lg,
            uid_contractor: manager.rows.uid,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
    endf
    
    function contractor_tip2(contact_email, contact_lg)
        manager = sql(single:true, "SELECT u.firstname, u.lastname, u.phone, u.email, u.photo
            FROM sn_users u
            INNER JOIN sr_contractor c ON u.uid = c.account_manager
            WHERE c.contact_email = '?'
            ", contact_email);
            
        //create tracking token
        time = time();
        token_tracking = hash(algo:"sha512", contact_email .+ manager.rows.uid .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));

        automail::sendEmail(
            "contractor_tip2",
            group: 'contractors',
            to: contact_email,
            lg: contact_lg,
            uid_contractor: manager.rows.uid,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
    endf
    
    function contractor_tip3(contact_email, contact_lg)
        manager = sql(single:true, "SELECT u.firstname, u.lastname, u.phone, u.email, u.photo
            FROM sn_users u
            INNER JOIN sr_contractor c ON u.uid = c.account_manager
            WHERE c.contact_email = '?'
            ", contact_email);
            
        //create tracking token
        time = time();
        token_tracking = hash(algo:"sha512", contact_email .+ manager.rows.uid .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));

        automail::sendEmail(
            "contractor_tip3",
            group: 'contractors',
            to: contact_email,
            lg: contact_lg,
            uid_contractor: manager.rows.uid,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
    endf
    
    function contractor_tip4(contact_email, contact_lg)
        manager = sql(single:true, "SELECT u.firstname, u.lastname, u.phone, u.email, u.photo
            FROM sn_users u
            INNER JOIN sr_contractor c ON u.uid = c.account_manager
            WHERE c.contact_email = '?'
            ", contact_email);
            
        //create tracking token
        time = time();
        token_tracking = hash(algo:"sha512", contact_email .+ manager.rows.uid .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));

        automail::sendEmail(
            "contractor_tip4",
            group: 'contractors',
            to: contact_email,
            lg: contact_lg,
            uid_contractor: manager.rows.uid,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
    endf
    
    function contractor_tip5(contact_email, contact_lg)
        manager = sql(single:true, "SELECT u.firstname, u.lastname, u.phone, u.email, u.photo
            FROM sn_users u
            INNER JOIN sr_contractor c ON u.uid = c.account_manager
            WHERE c.contact_email = '?'
            ", contact_email);
            
        //create tracking token
        time = time();
        token_tracking = hash(algo:"sha512", contact_email .+ manager.rows.uid .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));

        automail::sendEmail(
            "contractor_tip5",
            group: 'contractors',
            to: contact_email,
            lg: contact_lg,
            uid_contractor: manager.rows.uid,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
    endf
    
    function contractor_tip6(contact_email, contact_lg)
        manager = sql(single:true, "SELECT u.firstname, u.lastname, u.phone, u.email, u.photo
            FROM sn_users u
            INNER JOIN sr_contractor c ON u.uid = c.account_manager
            WHERE c.contact_email = '?'
            ", contact_email);
            
        //create tracking token
        time = time();
        token_tracking = hash(algo:"sha512", contact_email .+ manager.rows.uid .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));

        automail::sendEmail(
            "contractor_tip6",
            group: 'contractors',
            to: contact_email,
            lg: contact_lg,
            uid_contractor: manager.rows.uid,
            token_tracking: token_tracking,
            tracking: 'yes'
        );
    endf
    
    function contractor_follow_up(contact_email, contact_lg)
        automail::sendEmail(
            "contractor_follow_up",
            group: 'contractors',
            to: contact_email,
            lg: contact_lg
        );
    endf
    
    function NotifyAdminClientWantsMoreService(uid, service)
    
        client = uid;
        service = service;
    
        automail::sendEmail(
            "NotifyAdminClientWantsMoreService",
            to: 'deb@xpertsource.com',
            lg: contact_lg
        );
    endf
    
    
    //C12
    /*
        string uid_project - the uid of the project   //!!
    */
    function sendSatisfactionSurveyToClient(uid_project, ...)
        client = sql(single:true,"SELECT c.email, c.lang, p.token, c.uid FROM sr_project p INNER JOIN sr_client c ON c.uid = p.uid_client WHERE p.uid='?'",uid_project);
        if(client.rows.lang ne "") then
            lg = client.rows.lang;
        endif
        
        service = sql(single:true,"
            SELECT s.name_? as service
            FROM sr_service s
            INNER JOIN sr_project p ON p.uid_service = s.uid
            WHERE p.uid = '?'
            ", lg, uid_project
        );
        
        contractors = sql("
            SELECT c.contact_firstname, c.contact_lastname, c.company_name, pc.uid, pc.token, c.contact_lg, seo
            FROM sr_project_contractor pc
            INNER JOIN sr_contractor c ON c.uid=pc.uid_contractor
            INNER JOIN sr_project p ON p.uid = pc.uid_project
            INNER JOIN sr_service s ON s.uid = p.uid_service
            WHERE accepted = 'yes'
            AND uid_project = '?' 
            ", uid_project
        );  
        

        if (contractors.nbrows > 0) then
            token = client.rows.token;
            //res = (resub(trim2(client.rows.email),emailRegex,"$1"));
            res = client.rows.email;
            
            if   ( res ne '' && client.rows.email ne '' && strpos(res,' ') < 0 && strpos(res,',') < 0 && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
                email_to = res;
                void insert(table:'sr_log', fields:{'uid_project':uid_project.+'-1','email_to': email_to  ,'description':'email sendSatisfactionSurveyToClient---','value':client.rows.email});
                
                //create tracking token
                time = time();
                token_tracking = hash(algo:"sha512", client.rows.email .+ client.rows.uid .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
                
                automail::sendEmail(
                    "sendSatisfactionSurveyToClient",
                    group: 'clients',
                    to: client.rows.email, 
                    lg:lg,
                    uid_client: client.rows.uid,
                    token_tracking: token_tracking,
                    tracking: 'yes'
                );
            endif
        endif
    endf
    
    function sendSatisfactionSurveyToClient_reminder1(uid_project)
        
        client = sql(single:true,"SELECT c.email, c.lang, p.token, c.uid FROM sr_project p INNER JOIN sr_client c ON c.uid = p.uid_client WHERE p.uid='?'",uid_project);
        lg = (client.rows.lang ne "")? lg: 'fr';
        
        service = sql(single:true,"
            SELECT s.name_? as service
            FROM sr_service s
            INNER JOIN sr_project p ON p.uid_service = s.uid
            WHERE p.uid = '?'
            ", lg, uid_project
        );
        
        contractors = sql("
            SELECT c.contact_firstname, c.contact_lastname, c.company_name, pc.uid, pc.token, c.contact_lg, seo
            FROM sr_project_contractor pc
            INNER JOIN sr_contractor c ON c.uid=pc.uid_contractor
            INNER JOIN sr_project p ON p.uid = pc.uid_project
            INNER JOIN sr_service s ON s.uid = p.uid_service
            WHERE accepted = 'yes'
            AND uid_project = '?' 
            ", uid_project
        );  

        if (contractors.nbrows > 0) then
            token = client.rows.token;
            // res = (resub(trim2(client.rows.email),emailRegex,"$1"));
            res = client.rows.email;
            
            if   ( res ne '' && client.rows.email ne '' && strpos(res,' ') < 0 && strpos(res,',') < 0 && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
                email_to = res;
                void insert(table:'sr_log', fields:{'uid_project':uid_project.+'-1','email_to': email_to  ,'description':'email sendSatisfactionSurveyToClient_reminder1---','value':client.rows.email});
                
                //create tracking token
                time = time();
                token_tracking = hash(algo:"sha512", client.rows.email .+ client.rows.uid .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
                
                automail::sendEmail(
                    "sendSatisfactionSurveyToClient_reminder1",
                    group: 'clients',
                    to: client.rows.email, 
                    lg:lg,
                    uid_client: client.rows.uid,
                    token_tracking: token_tracking,
                    tracking: 'yes'
                );
            endif
        endif
    endf    
    
    function sendSatisfactionSurveyToAdmin(uid_project_contractor, uid_project, ...)
        
        client = sql(single:true,"SELECT c.email, c.lang, p.token, c.uid FROM sr_project p INNER JOIN sr_client c ON c.uid = p.uid_client WHERE p.uid='?'",uid_project);
        lg = (client.rows.lang ne "" && lg)? lg :'fr';
        
        service = sql(single:true,"
            SELECT s.name_? as service
            FROM sr_service s
            INNER JOIN sr_project p ON p.uid_service = s.uid
            WHERE p.uid = '?'
            ", lg, uid_project
        );
        
        contractors = sql(single:true,"
            SELECT c.contact_firstname, c.contact_lastname, c.company_name, pc.uid, pc.token, pc.client_satisfaction, pc.client_comment, pc.evaluation_date, c.contact_lg, seo
            FROM sr_project_contractor pc
            INNER JOIN sr_contractor c ON c.uid=pc.uid_contractor
            INNER JOIN sr_project p ON p.uid = pc.uid_project
            INNER JOIN sr_service s ON s.uid = p.uid_service
            WHERE accepted = 'yes'
            AND pc.uid = '?' 
            ", uid_project_contractor
        );  
        
        if (contractors.nbrows > 0) then
            token = contractors.rows.token;
            automail::sendEmail(
                "sendSatisfactionSurveyToAdmin",
                to: "deb@xpertsource.com",
                lg:lg
            );
        endif
    endf    
    
    //expert send survey to client from his/her profile
    function expertSendSurveyToClient(uid_project_contractor,...)
        contractor = sql(single:true,"
            SELECT c.contact_firstname, c.contact_lastname, c.company_name, pc.uid, pc.uid_project, pc.token, c.contact_lg, seo
            FROM sr_project_contractor pc
            INNER JOIN sr_contractor c ON c.uid=pc.uid_contractor
            INNER JOIN sr_project p ON p.uid = pc.uid_project
            INNER JOIN sr_service s ON s.uid = p.uid_service
            WHERE accepted = 'yes'
            AND pc.uid = '?'
            ", uid_project_contractor
        );  
        
        client = sql(single:true,"SELECT c.email, c.lang, p.token, c.uid FROM sr_project p INNER JOIN sr_client c ON c.uid = p.uid_client WHERE p.uid='?'", contractor.rows.uid_project);
        client;
        if(client.rows.lang ne "") then
            lg = client.rows.lang;
        else
            lg = 'fr';
        endif
        
        service = sql(single:true,"
            SELECT s.name_? as service
            FROM sr_service s
            INNER JOIN sr_project p ON p.uid_service = s.uid
            WHERE p.uid = '?'
            ", lg, contractor.rows.uid_project
        );
        

        if (contractor.nbrows > 0) then
        
            token = client.rows.token;
            
            //res = (resub(trim2(client.rows.email),emailRegex,"$1"));
            res = client.rows.email;
            
            if   ( res ne '' && client.rows.email ne '' && strpos(res,' ') < 0 && strpos(res,',') < 0 && res ne 'aucun' &&  strpos(res,'@') > 0)    then //adresse valide
                email_to = res;
                void insert(table:'sr_log', fields:{'uid_project':uid_project.+'-1','email_to': email_to  ,'description':'email sendSatisfactionSurveyToClient---','value':client.rows.email});
                
                //create tracking token
                time = time();
                token_tracking = hash(algo:"sha512", client.rows.email .+ client.rows.uid .+ time.secs .+ time.usecs .+ random(min:1, max:99999999));
                company = contractor.rows.company_name;
                
                automail::sendEmail(
                    "expertSendSurveyToClient",
                    group: 'clients',
                    to: client.rows.email, 
                    lg:lg,
                    parseSubject: "use company;",
                    uid_client: client.rows.uid,
                    token_tracking: token_tracking,
                    tracking: 'yes'
                );
            endif
        endif
    endf 
    
    function bad_client_notify_admin(name, address, client_email, phone, ext1, description, country)

        lg = 'fr';

        automail::sendEmail(
            "bad_client_notify_admin",
            group: 'clients',
            to: 'deb@xpertsource.com',
            lg: lg
        );

    endf
endp

}}{{
    /*
        @title contractor package
        
        @author olivier@sednove.com
        
        @version 1.0 2016-08-08
        @version 1.0 2016-11-19     bbduc@yahoo.com   ajout de prov
        @version 1.01 2017-01-10    chnager chemin PDF
        @version 1.02 2017-03-15    add uid_pivotal dans transaction
        @version 1.03 2017-03-15    change directory for PDF to "0"+YEAR/
        @version 1.04 2017-04-02    Recover PDF  with uid_pivotal
    */
    
    package contractor;
        
        function activateContractor(uid_contractor)
            contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
            if (contractor.rows.sent_welcome_email ne 'yes' ) then
                //  NE PAS COCHER AFFICHAGE EDIT  POUR LE CHAMP sent_welcome_email SINON PAS D'UPDATE
                void sql("UPDATE sr_contractor SET sent_welcome_email = 'yes', active = 'yes' WHERE uid = '?'", uid_contractor);
                //void insert(table:'sr_debug', fields:{'description':'avant test de sent_welcome_email','text':contractor.rows.sent_welcome_email});
                automail::contractorActivation(uid_contractor);
            endif
        endf
        
        /* 
         * Returns a list of billing lines including the balance, invoices, credits and transactions.
         * The totals of 'price' is the amount to pay
         * Available fields are : uid, id, type, description, address, amount
         */
        function getCurrentBilling(uid_contractor)
            if (lg eq '') then
                lg = 'en';
            endif
            if (lg eq '') then
                lg = 'fr';
            endif
            billing = sql("
            
                SELECT  null as uid,
                        '' as id,
                        '' as date,
                        'balance' as 'type',
                        '' as description,
                        '' as address,
                        '' as info_extra,
                        balance as 'amount',
                        '' as name
                    FROM sr_contractor 
                    WHERE uid='?'
                    
                UNION
                
                SELECT  i.uid as uid,
                        p.uid as id,
                        pc.accepted_date as date,
                        'lead' as 'type',
                        concat(cl.firstname, ' ', cl.lastname) as description,
                        concat(cl.firstname, ' ', cl.lastname, ' ', IF(a.uid IS NULL, '', CONCAT(a.street_no, ' ', a.street, ', ', IF(c.name_".+lg.+"  IS NOT NULL, c.name_".+lg.+", a.city), ', ', a.province, ' ', a.zip))) as address,
                        '' as info_extra,
                        i.amount as 'amount',
                        concat(cl.firstname, ' ', cl.lastname) as name
                    FROM sr_invoice i
                    INNER JOIN sr_project_contractor pc ON pc.uid = i.uid_project_contractor
                    INNER JOIN sr_project p ON p.uid = pc.uid_project
                    INNER JOIN sr_client cl ON cl.uid = p.uid_client
                    LEFT JOIN sr_address a ON a.uid = p.uid_address
                    LEFT JOIN sr_city c ON c.uid = a.uid_city
                    WHERE   (i.completed != 'yes' OR i.completed IS NULL)
                        AND pc.uid_contractor='?'
                        
                UNION
                
                SELECT  cr.uid as uid,
                        p.uid as id,
                        cr.sn_cdate as date,
                        'credit' as 'type',
                        '' as description,
                        IF(a.uid IS NULL, '', CONCAT(a.street_no, ' ', a.street, ', ', IF(c.name_".+lg.+"  IS NOT NULL, c.name_".+lg.+", a.city), ', ', a.province, ' ', a.zip)) as address,
                        'Credit' as info_extra,
                        (pc.lead_price*-1) as 'amount',
                        '' as name
                    FROM sr_credit cr
                    INNER JOIN sr_project_contractor pc ON pc.uid = cr.uid_project_contractor
                    INNER JOIN sr_project p ON p.uid = pc.uid_project
                    LEFT JOIN sr_address a ON a.uid = p.uid_address
                    LEFT JOIN sr_city c ON c.uid = a.uid_city
                    WHERE   (cr.completed != 'yes' OR cr.completed IS NULL)
                        AND cr.accepted = 'yes'
                        AND pc.uid_contractor='?'
                        
                UNION
                
                SELECT  uid,
                        '' as id,
                        sn_cdate as date,
                        'transaction' as 'type',
                        CONCAT('Transaction', ' ', DATE_FORMAT(sn_cdate, '%Y-%m-%d') , ' ', uniqueref) as description,
                        '' as address,
                        '' as info_extra,
                        (amount*-1) as 'amount',
                        '' as name
                    FROM sr_transaction
                    WHERE uid_contractor = '?'
                        AND (completed != 'yes' OR completed IS NULL)
                        AND (status = 'succeeded' OR status IS NULL)
                        
                UNION
                
                SELECT  sc.uid as uid,
                        '' as id,
                        sc.start_date as date,
                        'subscription' as type,
                        sp.name_? as description,
                        '' as address,
						'' as info_extra,
                        (sc.price - ifnull(sc.discount,0)) as amount,
                        '' as name
                    FROM sr_subscription_contractor sc
                    INNER JOIN sr_subscription_plan sp ON sp.uid = sc.uid_subscription_plan
                    WHERE sc.uid_contractor = '?'
                        AND (sc.paid is null OR sc.paid <> 'yes')
                        AND sc.start_date <= curdate()
                        AND (sc.trial IS NULL OR sc.trial <> 'yes')
                        
                ORDER BY id ASC, date ASC, type DESC
                
                ", uid_contractor, uid_contractor, uid_contractor, uid_contractor, lg, uid_contractor);
                
            return billing.rows;
        endf
        
        
        ////////////////////////////////////////////////////
        // Total Amount calculations
        function getBillingFooter(billing)
            subtotal = 0;
            transactions = 0;
            balance = 0;
            for b in billing do
                if (b.type eq 'transaction') then
                    transactions += b.amount;
                elseif (b.type eq 'balance') then
                    balance = b.amount;
                else
                    subtotal += b.amount;
                endif
            endfor
            if (subtotal < 0) then
                subtotal = 0;
            endif
            taxes = contractor::calculateTaxes(subtotal);
            solde = taxes.total + transactions + balance;
            return {
                'subtotal': subtotal,
                'tps': taxes.tps,
                'tvq': taxes.tvq,
                'total': taxes.total,
                'paid': transactions,
                'balance': balance,
                'solde': solde
            };
        endf
       
        
        // Total Amount calculations  by Provinces
        function getBillingFooterByProv(billing, uid_contractor)
            subtotal = 0;
            transactions = 0;
            balance = 0;
            for b in billing do
                if (b.type eq 'transaction') then
                    transactions += b.amount;
                elseif (b.type eq 'balance') then
                    balance = b.amount;
                else
                    subtotal += b.amount;
                endif
            endfor
            if (subtotal < 0) then
                subtotal = 0;
            endif
            taxes = contractor::calculateTaxesByProv(subtotal,uid_contractor);
            solde = taxes.total + transactions + balance;
            return {
                'subtotal'      : subtotal,
                'tps'           : taxes.tps,
                'tvq'           : taxes.tvq,
                'total'         : taxes.total,
                'paid'          : transactions,
                'balance'       : balance,
                'solde'         : solde,
                'tps_name'      : taxes.tps_name,
                'tvp_name'      : taxes.tvp_name,
                'tvp_taxe_no'   : taxes.tvp_taxe_no
            };
        endf
        
        function getCurrentBillingTotal(uid_contractor)
            billingTotals = sql(single:true, contractor::getAllContractorsCurrentBillingTotalsQuery() .+ " WHERE c.uid = '?'", uid_contractor);
            subtotal = billingTotals.rows.invoices_total - billingTotals.rows.credits_total + billingTotals.rows.subscription_total;
           // taxes = contractor::calculateTaxes(subtotal);
            taxes = contractor::calculateTaxesByProv(subtotal,uid_contractor);
            return billingTotals.rows.balance + taxes.total - billingTotals.rows.transactions_total;
        endf
        
        ////////////////////////////////////////////////////
        
        
        function calculateTaxes(subtotal)

            if (subtotal < 0) then
                subtotal = 0;
            endif
            tps = subtotal * 0.05;
            tvq = subtotal * 0.09975;
            taxtotal = tps + tvq;
            total = subtotal + taxtotal;
            return {
                'tps': tps,
                'tvq': tvq,
                'taxtotal': taxtotal,
                'total': total
            };
        endf
        
        function calculateTaxesByProv(subtotal,uid_contractor)  // contractor to get province
            if (c.lg ne '') then
                lg = c.lg;
            endif
            if (lg eq '') then
                lg = 'en';
            endif
            if (lg eq '') then
                lg = 'fr';
            endif

            adresse = sql(single:true, "
                        SELECT a.province FROM sr_address a 
                        WHERE a.uid_contractor = '?' 
                        ORDER BY a.uid DESC 
                        LIMIT 1
                    ", uid_contractor);
            prov = (adresse.rows.province eq '')?'QC':adresse.rows.province;     // default = QC  
            taxes = sql(single:true," SELECT tps,tvp, name_tps_".+lg.+" as name_tps, name_tvp_".+lg.+" as name_tvp, tvp_taxe_no  FROM sr_taxes WHERE code_prov = '?'",prov);        

            if (subtotal < 0) then
                subtotal = 0;
            endif
            tps = subtotal * taxes.rows.tps;
            tvq = subtotal * taxes.rows.tvp;
            taxtotal = tps + tvq;
            total = subtotal + taxtotal;
            return {
                'tps'           : tps,
                'tvq'           : tvq,
                'taxtotal'      : taxtotal,
                'total'         : total,
                'tps_name'      : taxes.rows.name_tps,
                'tvp_name'      : taxes.rows.name_tvp,
                'tvp_taxe_no'   : taxes.rows.tvp_taxe_no
            };
        endf

        function getAllContractorsCurrentBillingTotalsQuery() // returns uid_contractor,balance,invoices_total,credits_total,transactions_total
            return "
                SELECT 
                    c.uid AS 'uid_contractor',
                    c.balance as 'balance',
                    c.contact_lg as 'lg',
                    IFNULL((
                        SELECT sum(i.amount) 
                        FROM sr_invoice i 
                        INNER JOIN sr_project_contractor pc ON pc.uid = i.uid_project_contractor
                        WHERE pc.uid_contractor = c.uid
                        AND (i.completed is null OR i.completed != 'yes')
                    ),0) AS 'invoices_total',
                    IFNULL((
                        SELECT sum(pc.lead_price) 
                        FROM sr_credit cr 
                        INNER JOIN sr_project_contractor pc ON pc.uid = cr.uid_project_contractor
                        WHERE pc.uid_contractor = c.uid
                        AND cr.accepted = 'yes' 
                        AND (cr.completed is null OR cr.completed != 'yes')
                    ),0) AS 'credits_total',
                    IFNULL((
                        SELECT sum(t.amount)
                        FROM sr_transaction t
                        WHERE t.uid_contractor = c.uid
                        AND (t.completed != 'yes' OR t.completed IS NULL)
                        AND (t.status = 'succeeded' OR t.status IS NULL)
                    ),0) AS 'transactions_total',
                    IFNULL((
                        SELECT sum(sc.price) - ifnull(sc.discount,0)
                        FROM sr_subscription_contractor sc
                        WHERE sc.uid_contractor = c.uid
                        AND (sc.paid is null OR sc.paid <> 'yes')
                        AND sc.start_date <= curdate()
                        AND (sc.trial is null OR sc.trial <> 'yes')
                    ),0) AS 'subscription_total'                    
                FROM sr_contractor c
            ";
        endf
        
        function debit_charge(uid_contractor, amount)
            // Fetch credit cards
            creditcards = sql("SELECT * FROM sr_cc WHERE uid_contractor = '?' ORDER BY priority ASC, uid DESC", uid_contractor);
            cardInfo = "";
            if (creditcards.nbrows > 0) then
                for cc in creditcards.rows do
                    cardInfo = cc.type .+ " ************" .+ cc.last_digits;
                    // For each credit card, try to execute a payment
                    transaction = pivotal::make_payment_cc_ref(cc.reference, "CAD", amount, uid_contractor);
                    if (transaction.uid) then
                        // If a payment succeeds, trigger the transaction and stop the loop
                        contractor::trigger_transaction(transaction.uid);
                        return transaction.uid;
                    else
                        cardInfo .+= " (".+transaction.error.+")";
                    endif
                endfor
                // If payment failed, trigger the payment failure
                contractor::trigger_payment_failed(uid_contractor, cardInfo, amount);
                
            endif
            return false;
        endf
        
        function addCreditCardPrivilege(uid_contractor)
            contractor = sql(single:true,"SELECT credit_threshold FROM sr_contractor WHERE uid='?'", uid_contractor);
            data = {'credit_cards':1};
            // Increase credit threshold
            configs = sql(single:true, "SELECT * FROM sn_configs WHERE uid = 1 LIMIT 1");
            if (contractor.nbrows == 1 && contractor.rows.credit_threshold < configs.rows.credit_limit_after_cc_added) then
                data.credit_threshold = configs.rows.credit_limit_after_cc_added;
            endif
            void update(tables: 'sr_contractor', uid: uid_contractor, fields:data);
        endf
        
        function trigger_transaction(uid_transaction)
            qb_realm_id = "193514830636359";
            void insert(table:'sr_debug', fields:{'description':'test_Billing_debut3','text':'uid_transaction='.+uid_transaction});

            transaction = sql(single:true, "SELECT * FROM sr_transaction WHERE uid = '?' AND (status <> 'failed' OR status IS NULL)", uid_transaction);
            contractor = sql(single:true,"SELECT credit_threshold,balance FROM sr_contractor WHERE uid='?'", transaction.rows.uid_contractor);
            prev_solde = contractor.rows.balance;
            void insert(table:'sr_debug', fields:{'description':'test_Billing_debut3A','text':'balance='.+contractor.rows.balance .+ " " .+ transaction.rows});
            configs = sql(single:true, "SELECT * FROM sn_configs WHERE uid = 1 LIMIT 1");
            
            // Increase credit threshold
            if (transaction.rows.uid_contractor ne '' && contractor.rows.credit_threshold < configs.rows.credit_limit_after_payment_success) then
                void update(tables: 'sr_contractor', uid: transaction.rows.uid_contractor, fields:{'credit_threshold':configs.rows.credit_limit_after_payment_success});
            endif
        
            // Calculate current billing
            billing = contractor::getCurrentBilling(transaction.rows.uid_contractor, lg:contractor.rows.contact_lg);
            
            //convert html descriptions to plain text;
            for desc in billing do
                desc.description = html2text(desc.description);
            endfor

            //billing_footer = contractor::getBillingFooter(billing);
            billing_footer = contractor::getBillingFooterByProv(billing,transaction.rows.uid_contractor);
            
            //send data to quickbooks
            qbdata = contractor::createSalesReceipt(uid_transaction, qb_realm_id);
            void insert(table:'sr_debug', fields:{'description':'Quickbook_transaction - ' .+ uid_transaction,'text': qbdata});
            
            // If current billing is paid in full, clear billing and generate a pdf invoice
            if (billing_footer.solde < 0.01) then
            
                // Remove unwanted decimals if very close to zero
                if (billing_footer.solde > -0.01) then
                    billing_footer.solde = 0;
                endif
                
                // init totals
                invoices = [];
                credits = [];
                transactions = [];
                subscription = [];
                
                // Calculate totals and list current invoices, credits, transactions
                for line in billing do
                    if (line.type eq 'lead') then
                        push(invoices, line.uid);
                    endif
                    if (line.type eq 'credit') then 
                        push(credits, line.uid);
                    endif
                    if (line.type eq 'transaction') then
                        push(transactions, line.uid);
                    endif
                    if (line.type eq 'subscription') then
                        push(subscription, line.uid);
                    endif
                endfor
                void insert(table:'sr_debug', fields:{'description':'test_Billing2','text':'uid_transaction='.+uid_transaction});

                // Generate pdf invoice
                pdf = contractor::generate_pdf(transaction.rows.uid_contractor, billing);
                
                // Set account balance to Solde
                void update(tables:'sr_contractor', uid: transaction.rows.uid_contractor, fields:{'balance':billing_footer.solde});
                //V1.02       
                // Clear invoices
                for uid in invoices do
                    void update(tables:'sr_invoice', uid: uid, fields:{'completed':'yes','uid_pivotal':uid_transaction});
                   // void update(tables:'sr_invoice', uid: uid, fields:{'completed':'yes'});
                endfor
                
                //V1.02
                // Clear credits
                for uid in credits do
                    void update(tables:'sr_credit', uid: uid, fields:{'completed':'yes','uid_pivotal':uid_transaction});
                   // void update(tables:'sr_credit', uid: uid, fields:{'completed':'yes'});
                endfor
                
                //V1.02
                // Clear transactions
                for uid in transactions do
                    void update(tables:'sr_transaction', uid: uid, fields:{'completed':'yes','uid_pivotal':uid_transaction,'pre_solde':prev_solde});
                    //void update(tables:'sr_transaction', uid: uid, fields:{'completed':'yes'});
                endfor
                
                // Clear subscription
                for uid in subscription do
                    void update(tables:'sr_subscription_contractor', uid: uid, fields:{'paid':'yes','uid_pivotal':uid_transaction});
                endfor                
                
                // Send email with pdf attached
                if (pdf) then
                    automail::sendInvoicePdf(transaction.rows.uid_contractor, pdf);
                else
                    void insert(table:'sr_debug', fields:{'description':'test_Billing_error_PDF','text':'uid_transaction='.+uid_transaction});
                endif
            endif
        endf
        
        
        /**
         * v.1.1 updated on 2017/11/09 by louis.jhonny@gmail.com
         * change desc: comment line "Remove redit cards privilege"
         * 
         **/
        function trigger_payment_failed(uid_contractor, cardinfo, amount)
            configs = sql(single:true, "SELECT * FROM sn_configs WHERE uid = 1 LIMIT 1");
            contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
            if (contractor.nbrows > 0) then
                // Reduce credit threshold
                if (contractor.rows.credit_threshold > configs.rows.credit_limit_after_payment_failed) then
                    void update(tables: 'sr_contractor', uid: uid_contractor, fields:{'credit_threshold':configs.rows.credit_limit_after_payment_failed});
                endif
                // Remove credit cards privilege (for calculation of the contractors's score)
                // void update(tables: 'sr_contractor', uid: uid_contractor, fields:{'credit_cards':0});
                // Send email notifications
                // automail::paymentFailedToAdmin(uid_contractor, cardinfo, amount);
                
                
                automail::paymentFailedToContractor(uid_contractor, cardinfo, amount);
            endif
        endf
        
        function generate_pdf(uid_contractor, billing)
            contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
            lg = contractor.rows.contact_lg;
            if (lg eq '') then
                lg = 'fr';
            endif
            
            if contractor.rows.company_name_legal ne "" then
                contractor.rows.company_name;
            endif
            
            contractor_address = sql(single:true, "
                    SELECT a.*, IF(c.name_".+lg.+" IS NOT NULL, c.name_".+lg.+", a.city) as city_name 
                    FROM sr_address a 
                    LEFT JOIN sr_city c ON c.uid = a.uid_city 
                    WHERE a.uid_contractor = '?' 
                    ORDER BY a.uid ASC 
                    LIMIT 1
                ", contractor.rows.uid);
                
            //billing_footer = contractor::getBillingFooter(billing);
            billing_footer = contractor::getBillingFooterByProv(billing,contractor.rows.uid);
            
            bills = billing;
            billing = [];
            
            for b in bills do
                description = str_replace("&nbsp;", " ", b.description);
                description = str_replace("&quot;", " ", description);
                description = str_replace("&eacute;", " ", description);
                description = str_replace("&egrave;", " ", description);
                description = substr(strip_tags(description),0,(500 + strpos(description," ", 0)));
                push(billing, {"id":b.id, "date":b.date, "type":b.'type', "description":description, "address":b.address, "amount":b.amount});
            endfor
            
            content = {
                'billing': billing,
                'billing_footer': billing_footer
            };
            
            billing_pdf = insert(table:'sr_billing_pdf', fields:{});
            t = time();
            //v10
            tmpfilename = ((lg eq 'fr')? 'facture':'invoice').+"_".+uid_contractor.+"_".+billing_pdf.uid;
            //tmpfilename = ((lg eq 'fr')? 'facture':'invoice').+"_".+uid_contractor.+"_".+billing_pdf.uid.+"_".+t.secs;
            tmpfilepath = "/tmp/".+tmpfilename;
            
            write(tmpfilepath, data:"", append:false, data:read(compilefile:'/site/pdf_invoice_template.txt'));
            output = exec("/extenso/utils/pdflatex.sh", tmpfilename);
            void insert(table:'sr_debug', fields:{'description':'Billing_PDF_output','text':'output.output='.+output.output});
            success_regex = 'Output written on '.+tmpfilename.+'\.pdf';
            //V1.03
            //d = "0".+datetime(date:datetime(),format:'%Y');
            //tmpfilename = d .+ "/" .+ tmpfilename;
            if (output.output =~ success_regex) then
                void update(tables:'sr_billing_pdf', uid: billing_pdf.uid, fields:{
                    'uid_contractor': uid_contractor,
                    'pdf': tmpfilename.+".pdf",
                    'content': stringnify(content)
                });
                
                pdf = tmpfilename.+".pdf";
                void insert(table:'sr_debug', fields:{'description':'Billing_pdf_success','text':'REUSSIT - PDF='.+pdf});
                
                return tmpfilename.+".pdf";
            else
                void sql("DELETE FROM sr_billing_pdf WHERE uid = '?'", billing_pdf.uid);
                void insert(table:'sr_debug', fields:{'description':'Billing_PDF_ERROR','text':'output.error='.+output.error.+' uid_contractor='.+uid_contractor});
                automail::sendMessageAdminEmail("Erreur PDF", "Erreur: ".+ output.error,"ERREUR dans PDF");
                return false;
            endif
        endf

        //------------------------  SECTION  //TO GENERATE PDF WITH THE UID_PIVOTAL   ------------------------------------------------//
        function test_getCurrentBilling(uid_contractor, uid_pivotal)
            if (lg eq '') then
                lg = 'en';
            endif
            if (lg eq '') then
                lg = 'fr';
            endif
            billing = sql("
            
                SELECT  null as uid,
                        '' as id,
                        '' as date,
                        'balance' as 'type',
                        'Balance' as description,
                        '' as address,
                        balance as 'amount'
                    FROM sr_contractor 
                    WHERE uid='?'
                    
                UNION
                
                SELECT  i.uid as uid,
                        p.uid as id,
                        pc.accepted_date as date,
                        'lead' as 'type',
                        -- p.description as description,
                         CONVERT(p.description USING utf8) as description,  
                        IF(a.uid IS NULL, '', CONCAT(a.street_no, ' ', a.street, ', ', IF(c.name_".+lg.+"  IS NOT NULL, c.name_".+lg.+", a.city), ', ', a.province, ' ', a.zip)) as address,
                        i.amount as 'amount'
                    FROM sr_invoice i
                    INNER JOIN sr_project_contractor pc ON pc.uid = i.uid_project_contractor
                    INNER JOIN sr_project p ON p.uid = pc.uid_project
                    LEFT JOIN sr_address a ON a.uid = p.uid_address
                    LEFT JOIN sr_city c ON c.uid = a.uid_city
                    WHERE    i.uid_pivotal = '?'   -- and p.uid  in (	23314)
                     
                UNION
                
                SELECT  cr.uid as uid,
                        p.uid as id,
                        cr.sn_cdate as date,
                        'credit' as 'type',
                        'Crédit' as description,
                        '' as address,
                        (pc.lead_price*-1) as 'amount'
                    FROM sr_credit cr
                    INNER JOIN sr_project_contractor pc ON pc.uid = cr.uid_project_contractor
                    INNER JOIN sr_project p ON p.uid = pc.uid_project
                    LEFT JOIN sr_address a ON a.uid = p.uid_address
                    LEFT JOIN sr_city c ON c.uid = a.uid_city
                    WHERE  
                        cr.accepted = 'yes'
                        AND cr.uid_pivotal = '?'
                        
                UNION
                
                SELECT  uid,
                        '' as id,
                        sn_cdate as date,
                        'transaction' as 'type',
                        CONCAT('Transaction', ' ', DATE_FORMAT(sn_cdate, '%Y-%m-%d') , ' ', uniqueref) as description,
                        '' as address,
                        (amount*-1) as 'amount'
                    FROM sr_transaction t
                    WHERE   t.uid_pivotal = '?'
                    AND t.uid <> t.uid_pivotal

                        
                ORDER BY (type = 'transaction') ASC, date ASC, type DESC
                
                ", uid_contractor, uid_pivotal, uid_pivotal, uid_pivotal);
            return billing.rows;
        endf
        
        function test_getAllContractorsCurrentBillingTotalsQuery() // returns uid_contractor,balance,invoices_total,credits_total,transactions_total
            return "
                SELECT 
                    c.uid AS 'uid_contractor',
                    c.balance as 'balance',
                    IFNULL((
                        SELECT sum(i.amount) 
                        FROM sr_invoice i 
                        INNER JOIN sr_project_contractor pc ON pc.uid = i.uid_project_contractor
                        WHERE pc.uid_contractor = c.uid
                        AND uid_pivotal = '?'
                    ),0) AS 'invoices_total',
                    IFNULL((
                        SELECT sum(pc.lead_price) 
                        FROM sr_credit cr 
                        INNER JOIN sr_project_contractor pc ON pc.uid = cr.uid_project_contractor
                        WHERE pc.uid_contractor = c.uid
                        AND uid_pivotal = '?'
                    ),0) AS 'credits_total',
                    IFNULL((
                        SELECT sum(t.amount)
                        FROM sr_transaction t
                        WHERE t.uid_contractor = c.uid
                        AND uid_pivotal = '?'
                    ),0) AS 'transactions_total'
                FROM sr_contractor c
            ";
        endf


        //function test_trigger_transaction(uid_pivotal, email)
        function recreate_transaction(uid_pivotal, email, upd)
            //void insert(table:'sr_debug', fields:{'description':'test_Billing_debut2_','text':'uid_transaction='.+uid_pivotal});
            transaction = sql(single:true, "SELECT * FROM sr_transaction WHERE uid = '?'", uid_pivotal);
            uid_transaction = uid_pivotal;
            uid_contractor = transaction.rows.uid_contractor;
            
            //Verifier contact_lg
            contractor = sql(single:true,"SELECT credit_threshold,contact_lg FROM sr_contractor WHERE uid='?'", transaction.rows.uid_contractor);
            void insert(table:'sr_debug', fields:{'description':'test_Billing_debut2a_  Contractor=','text':contractor});
            
            configs = sql(single:true, "SELECT * FROM sn_configs WHERE uid = 1 LIMIT 1");

            // Calculate current billing
            //billing = contractor::test_getCurrentBilling(transaction.rows.uid_contractor, uid_pivotal, lg:contractor.rows.contact_lg);
            billing = contractor::test_getCurrentBilling(transaction.rows.uid_contractor, uid_pivotal);

            billing_footer = contractor::getBillingFooterByProv(billing,transaction.rows.uid_contractor);

            // If current billing is paid in full, clear billing and generate a pdf invoice
            // if (billing_footer.solde < 0.01) then
            
                // Remove unwanted decimals if very close to zero
                if (billing_footer.solde > -0.01) then
                    billing_footer.solde = 0;
                endif
                
                
                // Generate pdf invoice
                contractor::test_generate_pdf(uid_contractor, billing, uid_transaction, email, upd);

            //endif
        endf


        function test_generate_pdf(uid_contractor, billing, uid_pivotal, email, save_pdf)
            contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
            lg = contractor.rows.contact_lg;
            if (lg eq '') then
                lg = 'fr';
            endif
            
            contractor_address = sql(single:true, "
                    SELECT a.*, IF(c.name_".+lg.+" IS NOT NULL, c.name_".+lg.+", a.city) as city_name 
                    FROM sr_address a 
                    LEFT JOIN sr_city c ON c.uid = a.uid_city 
                    WHERE a.uid_contractor = '?' 
                    ORDER BY a.uid ASC 
                    LIMIT 1
                ", contractor.rows.uid);
            void insert(table:'sr_debug', fields:{'description':'test_Billing_smp','text':'Avant billing footer, uid_c='.+uid_contractor});


            billing_footer = contractor::getBillingFooterByProv(billing,contractor.rows.uid);
            billing_footer.paid = billing_footer.total;
            billing_footer.solde = billing_footer.paid - billing_footer.total;
            
            bills = billing;
            billing = [];
            
            for b in bills do
                description = str_replace("&nbsp;", " ", b.description);
                description = str_replace("&quot;", " ", description);
                description = str_replace("&eacute;", " ", description);
                description = str_replace("&egrave;", " ", description);
                description = substr(strip_tags(description),0,(500 + strpos(description," ", 0)));
                push(billing, {"id":b.id, "date":b.date, "type":b.'type', "description":description, "address":address, "amount":b.amount});
            endfor
            
            content = {
                'billing': billing,
                'billing_footer': billing_footer
            };
            
            billing_pdf = insert(table:'sr_billing_pdf', fields:{});
            t = time();
            
            //v10
            tmpfilename = ((lg eq 'fr')? 'facture':'invoice').+"_".+uid_contractor.+"_".+billing_pdf.uid;
            //tmpfilename = ((lg eq 'fr')? 'facture':'invoice').+"_".+uid_contractor.+"_".+billing_pdf.uid.+"_".+t.secs;
            tmpfilepath = "/tmp/".+tmpfilename;
            filepath = "/bill/bills_2017_03/";
            
            write(tmpfilepath, data:"", append:false, data:read(compilefile:'/site/pdf_invoice_template.txt'));
            output = exec("/extenso/utils/pdflatex_v2.sh", tmpfilename);
            void insert(table:'sr_debug', fields:{'description':'test_Billing_PDF','text':'output.output='.+output.output});
            success_regex = 'Output written on '.+tmpfilename.+'\.pdf';
            
            if (output.output =~ success_regex) then
                if(save_pdf eq 'yes') then
                    void update(tables:'sr_billing_pdf', uid: billing_pdf.uid, fields:{
                        'uid_contractor': uid_contractor,
                        'pdf': tmpfilename.+".pdf",
                        'content': stringnify(content)
                    });
                endif
                pdf = tmpfilename.+".pdf";
                
                if(email ne '') then
                    automail::test_sendInvoicePdf(transaction.rows.uid_contractor, pdf, to: email);
                endif
                
                return pdf;
            else
                void sql("DELETE FROM sr_billing_pdf WHERE uid = '?'", billing_pdf.uid);
                automail::sendMessageAdminEmail("Erreur PDF", "Erreur: ".+ output.error,"ERREUR dans PDF");
            endif
        endf
  //------------------     
  

  //------------------TEST SECTION------------------
        
        function test_generate_pdf_simple(uid_contractor)
            contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
            lg = contractor.rows.contact_lg;
            if (lg eq '') then
                lg = 'fr';
            endif
            
            contractor_address = sql(single:true, "
                    SELECT a.*, IF(c.name_".+lg.+" IS NOT NULL, c.name_".+lg.+", a.city) as city_name 
                    FROM sr_address a 
                    LEFT JOIN sr_city c ON c.uid = a.uid_city 
                    WHERE a.uid_contractor = '?' 
                    ORDER BY a.uid ASC 
                    LIMIT 1
                ", contractor.rows.uid);
            void insert(table:'sr_debug', fields:{'description':'test_Billing_smp','text':'Avant billing footer, uid_c='.+uid_contractor});
 
//            tmpfilename = "aaaa".+"_".+str_pad("123",6,"0",1).+"_".+"1299";
            tmpfilename = "aaaa".+"_".+str_pad(uid_contractor,6,"0",1).+"_".+"777";
            //  year/uid_contractor/   
            tmppdfpath = "0".+datetime(date:datetime(),format:'%Y').+"/".+str_pad(uid_contractor,6,"0",1).+"/";
            //tmpfilename = ((lg eq 'fr')? 'facture':'invoice').+"_".+.+"_".+billing_pdf.uid.+"_".+t.secs;
            tmpfilepath = "/tmp/".+tmpfilename;
            
            write(tmpfilepath, data:"", append:false, data:read(compilefile:'/site/pdf_invoice_template.txt'));
        //    output = exec("/extenso/utils/pdflatex.sh", tmpfilename);
            output = exec("/extenso/utils/pdflatex.sh", tmpfilename,tmppdfpath);

           
            void insert(table:'sr_debug', fields:{'description':'test_Billing','text':'après PDF- tmpfilename='.+tmpfilename});
           
            success_regex = 'Output written on '.+tmpfilename.+'\.pdf';
            void insert(table:'sr_debug', fields:{'description':'test_Billing','text':'success_regex='.+success_regex});
            void insert(table:'sr_debug', fields:{'description':'test_Billing','text':'output.output='.+output.output});
            void insert(table:'sr_debug', fields:{'description':'test_Billing','text':'output.error='.+output.error});
            void insert(table:'sr_debug', fields:{'description':'test_Billing_','text':'output='.+output});
            if (output.output =~ success_regex) then
                pdf = tmpfilename.+".pdf";
                void insert(table:'sr_debug', fields:{'description':'test_Billing','text':'REUSSIT - PDF='.+pdf});
                // Send email with pdf attached
                if (pdf) then
                    //automail::sendInvoicePdf(uid_contractor, pdf);
                    void insert(table:'sr_debug', fields:{'description':'test_Billing_pdfOK','text':'REUSSIT - PDF='.+tmppdfpath.+pdf});
                else
                    void insert(table:'sr_debug', fields:{'description':'test_Billing_PDF_NO','text':'NO - PDF='.+pdf});
                endif
            endif
        endf
        
        
       function generate(cuid)
       
         template_en = "/site/profiles/profile_template.sn";
         template_fr = "/site/profiles/profile_modele.sn";
    
        res = sql("select * from sr_contractor where active = 'yes' and uid = ?", cuid);
    	counter = 0;
        contractors = res.rows;
     	contractors;
     	
        //create data structure contractor to be used in templates.
        for contractor in contractors do
            photos = sql("SELECT * FROM sr_gallery WHERE uid_contractor='?' AND active='yes' ORDER BY priority ASC, uid DESC", contractor.uid);    	
            address = sql(single:true, "SELECT a.street_no, a.street, a.zip, a.province, c.name_? as real_city FROM sr_address a INNER JOIN sr_city c ON a.uid_city = c.uid WHERE uid_contractor = ?", contractor.contact_lg, contractor.uid);
            contractor_services = sql("SELECT * FROM sr_contractor_service cs INNER JOIN sr_service s ON s.uid = cs.uid_service WHERE cs.uid_contractor = ? GROUP BY name_?", contractor.uid, contractor.contact_lg);
            profil = sql(single:true, "SELECT * FROM sr_contractor_profil WHERE uid_contractor='?'", contractor.uid);
            customLicenses = sql("SELECT * FROM sr_additional_license WHERE uid_contractor='?'", contractor.uid);
            update_profile = sql("UPDATE sr_contractor SET show_profile = 'yes' WHERE show_profile IS NULL and uid = ? ", contractor.uid);
    
            
            licenses = customLicenses.rows;
            lic_iterator = 0;
            current_profil = profil.rows;
            pics = photos.rows;
            services = contractor_services.rows;
            numpic = 0;
            contractor.streetNo = address.rows.street_no;
            contractor.street = address.rows.street;
            contractor.city = address.rows.real_city;
            contractor.zip = address.rows.zip;
            contractor.province = address.province;
            //contractor.services = services;
            contractor.language = lg;
            contractor.mylogo = current_profil.company_logo;
            contractor.mybanner = current_profil.banner_1;
    
    
            current_page = contractor.seo;
    		lg = contractor.contact_lg;
    		
    		//Company description length
    		if(contractor.company_desc.length() > 200) then
    		    if(lg eq 'fr') then
        		    new_string = contractor.company_desc.substr(0,200) .+ "<a href='#apropos'>Lire plus</a>";
    		        contractor.brieve_desc = new_string;
    		    else
        		    new_string = contractor.company_desc.substr(0,200) .+ "... <a href='#about'>Read more</a>";
    		        contractor.brieve_desc = new_string;
    		    endif
    		endif
    		
    		//Generate bgcolor if there is no logo
    		if(current_profil.company_logo ne "") then
                contractor.logoBg = "";
            else
        		contractor.logoBg = "#eeeeee";
    		endif
    		
            //create album element
            for thePic in pics do
                contractor.pic[numpic] = thePic.photo;
                numpic++;
            endfor
            
            for l in licenses do 
                contractor.licname[lic_iterator]  = l.lic_name;
                contractor.licnumber[lic_iterator] = l.lic_number;
                
                contractor.lics .+= '<tr><th><h5>';
                contractor.lics .+= contractor.licname[lic_iterator];
                contractor.lics .+= '</h5></th><td>';
                contractor.lics .+= contractor.licnumber[lic_iterator];
                contractor.lics .+= '</td></tr>';
                lic_iterator = lic_iterator + 1;
            endfor
    
            
            
            //load contractor services
            i = 0;
            for s in services do 
                if lg eq "fr" then
                    contractor.srv[i] = s.name_fr;
                    i = i + 1;
                elseif lg eq "en" then
                    contractor.srv[i] = s.name_en;
                    i = i + 1;
                endif
            endfor
    
    
            if current_page.length() > 0 then
    			//profile has not been updated, since last update skip
    		else
                seo = lc(esc(nodouble:true,filter:"filenameinutf8", contractor.company_name));
                void sql("update sr_contractor set seo = '?' where uid = '?'", seo, contractor.uid);
                contractor.seo = seo;
                
                  if(lg eq 'fr') then
                    // generate the profile in french for the contractor
                    generate(delcompile: false, compile: true, file: "/html/entrepreneur/" .+ contractor.seo .+ ".snc",template: template_fr);
                  elseif(lg eq 'en') then
                    // generate the profile in english for the contractor
                    generate(delcompile: false, compile: true, file: "/html/contractor/" .+ contractor.seo .+ ".snc",template: template_en);
                  endif
    
    			  counter++;
            endif
    
         	//log information into sr_debug for each profile updated according to the generation language.
             if lg eq "fr" then
        		void insert(table:'sr_debug', fields:{'description':'Profile generation for contractor '.+ contractor.uid,'text':'page='.+ "/html/entrepreneur/" .+ contractor.seo .+ ".snc"});
             elseif lg eq "en" then
        		void insert(table:'sr_debug', fields:{'description':'Profile generation for contractor '.+ contractor.uid,'text':'page='.+ "/html/contractor/" .+ contractor.seo .+ ".snc"});
             endif
        
            endfor
        	
        	//count number of generation for this rope
        	void insert(table:'sr_debug', fields:{'description':'Total profile generation for this rope is '.+ counter,'text':'waiting for next rope'});
        endf
        
        /*
        *
        *Check if a contractor already exists
        */
        function contractor_exists(company_name)
            query = "select * from sr_contractor where company_name = '?'";
            exists = sql(single:true, query, company_name);

            if(exists.nbrows > 0) then
                return true;
            else
                return false;
            endif
        endf
        
        
        /*
        *
        *Check if a contractor already exists
        */
        function expert_exists(email)
            query = "select * from sr_contractor where contact_email = '?'";
            exists = sql(single:true, query, email);

            if(exists.nbrows > 0) then
                return true;
            else
                return false;
            endif
        endf
        
        function profile_ct(phrase,name;...)
            p = substr(phrase, 0, 100); 
            code = name .+ " - " .+ p; 
            
            exists = sql(single:true,"SELECT * FROM ct WHERE code ='?'", code);

            if(exists.nbrows == 0) then
                void insert(table:'ct', fields:{'format':'text', 'text_en':phrase, 'text_fr':phrase, 'code':code});
            endif
            
            if(lg eq 'en') then
                txt = sql(single:true,"SELECT text_en as phrase FROM ct WHERE code ='?'", code);
            else
                txt = sql(single:true,"SELECT text_fr as phrase FROM ct WHERE code ='?'", code);
            endif
            
            
            return txt.rows.phrase;
            
        endf
        
        function contractorTime(uid_contractor, sysdate)
            c = sql(single:true,"SELECT t.uid_province, t.name_fr, p.utc_offset, c.uid FROM sr_contractor c INNER JOIN sr_territory t ON t.uid = c.uid_territory
                             INNER JOIN sr_province p ON p.uid = t.uid_province
                             WHERE c.uid = '?'",
                             uid_contractor);
                             
            offset = c.rows.utc_offset + 4;
            
                             
            return datetime(date:sysdate,op:offset .+ "h");
        endf
        
        
        function expertSendSurveyToClient(uid_project, uid_contractor)
            lead = sql(single:true,
                        "SELECT pc.* FROM sr_project_contractor pc 
                        INNER JOIN sr_project p ON p.uid = pc.uid_project 
                        WHERE pc.uid_project = '?' 
                        AND pc.uid_contractor = '?' 
                        AND (p.xpert_sent_survey IS NULL OR p.xpert_sent_survey = '' OR p.xpert_sent_survey = 'no')", 
                        uid_project, uid_contractor);
            
            if(lead.nbrows > 0) then
                automail::expertSendSurveyToClient(lead.rows.uid);
                void update(tables: 'sr_project', fields: {
                  'xpert_sent_survey': 'yes'
                }, uid: uid_project);
                
                return true;
            else
                return false;
            endif
        endf
        
        //*******************************************************************************************************//
        // Quickbooks application SALES RECEIPT créé via l'API de Quickbooks Online pour petite entreprise
        //*******************************************************************************************************//
        
        /**
         * Charger les access générer par l'application Tiers qbapp dand le fichier /qbapp/jsondata/access.json
         * @args {uid_transaction} integer
         * @return JSON
         * 
         **/        
        function getQBAccess()
            access = read('/apps/jsondata/access.json');
            return unstringnify(access);
        endf
        
        function getQBSalesReceipt(query, reamlId)
            auth = unstringnify(contractor::getQBAccess());
            encoded_query = urlencode(query);
            prod_url = "https://quickbooks.api.intuit.com";
            full_url = prod_url .+ "/v3/company/" .+ reamlId .+ "/query?query=" .+ encoded_query .+ "&minorversion=51";
            
            res = curl(
                error: t,
                url: full_url, 
                header:"Content-Type: application/json",
                header:"Accept: application/json",
                header: "Authorization: Bearer " .+ auth.access_token,
                sslversion:6
                );

            if(t ne "") then
                return res.body;
            else
                return t;
            endif
        endf
        
        
        function getQBTaxeCode(taxe_code, reamlId)
        
            taxe_code_query = urlencode("select Id From TaxCode Where Name = '" .+ taxe_code .+ "'");

            auth = unstringnify(contractor::getQBAccess());
            
            prod_url = "https://quickbooks.api.intuit.com";
            
            full_url = prod_url .+ "/v3/company/" .+ reamlId .+ "/query?query=" .+ taxe_code_query .+ "&minorversion=51";
            
            res = curl(
                error: t,
                url: full_url, 
                header:"Content-Type: application/json",
                header:"Accept: application/json",
                header: "Authorization: Bearer " .+ auth.access_token,
                sslversion:6
                );
            json = unstringnify(res.body);

            if(json ne "") then
                return json.QueryResponse.TaxCode[0].Id;
            else
                return 7;
            endif
        endf


        /**
         * Trouver un client existant dans Quickbooks Online sinon créer le client
         * @args {uid_transaction} integer
         * @return JSON
         * 
         **/
        function getQBCustomer(company_data, reamlId)

            if(company_data.customer ne "") then
                customer_query = urlencode("select * from Customer Where DisplayName = '" .+ company_data.customer .+ "'");
            else
                return false;
            endif
            
            auth = unstringnify(contractor::getQBAccess());
            
            prod_url = "https://quickbooks.api.intuit.com";
            full_url = prod_url .+ "/v3/company/" .+ reamlId .+ "/query?query=" .+ customer_query .+ "&minorversion=51";
            
            res = curl(
                error: t,
                url: full_url, 
                header:"Content-Type: application/json",
                header:"Accept: application/json",
                header: "Authorization: Bearer " .+ auth.access_token,
                sslversion:6
            );
            
            jsondata = unstringnify(res.body);
            if(jsondata.QueryResponse.Customer) then
                jsondata = unstringnify(res.body);
                return jsondata.QueryResponse.Customer[0];
            else
                newQBCustomer = {
                  "FullyQualifiedName": company_data.customer, 
                  "PrimaryEmailAddr": {
                    "Address": company_data.email
                  }, 
                  "DisplayName":company_data.customer , 
                  "Notes": "Here are other details.", 
                  "FamilyName": company_data.contact_lastname, 
                  "PrimaryPhone": {
                    "FreeFormNumber": company_data.contact_phone
                  }, 
                  "CompanyName": company_data.customer, 
                  "BillAddr": {
                    "CountrySubDivisionCode":company_data.billing_address_country_subdivision_code, 
                    "City": "Mountain View", 
                    "PostalCode": company_data.billing_address_zip, 
                    "Line1": company_data.sale.billing_address_line_1, 
                    "Country": "CANADA"
                  }, 
                  "GivenName": company_data.contact_firstname
                };                
                customer = contractor::createQBCustomer(newQBCustomer, reamlId);
                jsondata = unstringnify(customer);
                
                return jsondata.Customer;
            endif
        endf
        
        
        /**
         * Ajouter un nouveau client dans Quickbooks Online
         * @args {jsonData: Json, realmId: string}
         * @return JSON
         * 
         **/        
        function createQBCustomer(jsonData, reamlId)
            auth = unstringnify(contractor::getQBAccess());
            prod_url = "https://quickbooks.api.intuit.com";
            full_url = prod_url .+ "/v3/company/" .+ reamlId .+ "/customer?minorversion=51";
            
            res = curl(
                error: t,
                url: full_url, 
                header:"Content-Type: application/json",
                header:"Accept: application/json",
                header: "Authorization: Bearer " .+ auth.access_token,
                data: jsonData,
                sslversion:6
            );

            return res.body;
        endf
        
        
        /**
         * Creer un SalesReceipt dans Quickbooks Online
         * @args {uid_transaction} integer
         * @return JSON
         * 
         **/
        function createSalesReceipt(uid_transaction, realmId)
            auth = unstringnify(contractor::getQBAccess());
            sale = contractor::getQBData(uid_transaction);
            
            customer = contractor::getQBCustomer(sale, realmId);
            taxe_code = contractor::getQBTaxeCode(sale.Line_item_tax_code, reamlId);
            
            // create SalesReceipt json object only if the customer exists or has been succefully created.
            if(customer.Id ne "") then
                jsondata =     
                {
                    "domain":"QBO",
                    "DocNumber":sale.sales_receipt_no,
                    "TxnDate":sale.transaction_date,
                    "CurrencyRef":{
                        "value":"CAD",
                        "name":"Dollar canadien"
                    },
                    
                    "Line": [
                        {
                          "Description": "Lead", 
                          "DetailType": "SalesItemLineDetail", 
                          "SalesItemLineDetail": {
                            "TaxCodeRef": {
                                "value": contractor::getQBTaxeCode(sale.Line_item_tax_code, realmId),
                                "name": sale.Line_item_tax_code                              
                            }, 
                            "Qty": sale.line_item_quantity, 
                            "UnitPrice": sale.Total, 
                            "ItemRef": {
                              "name": "Sales", 
                              "value": "1"
                            }
                          }, 
                          "LineNum": 1, 
                          "Amount": sale.Total, 
                          "Id": "1"
                        }, 
                        {
                          "DetailType": "SubTotalLineDetail", 
                          "Amount": sale.Total, 
                          "SubTotalLineDetail": {}
                        }
                    ],                     
                        
                    "TxnTaxDetail":{
                        "TotalTax":sale.taxes
                    },
                    "CustomerRef":{
                        "value":customer.Id,
                        "name":customer.DisplayName
                    },
                    "BillAddr":{
                        "Line1":sale.billing_address_line_1,
                        "CountrySubDivisionCode":sale.billing_address_country_subdivision_code,
                        "PostalCode":sale.billing_address_zip
                    },
                    "GlobalTaxCalculation":"TaxExcluded",
                    "PaymentMethodRef":{
                        "value":"2",
                        "name":sale.payment_method
                    },
                    "PaymentRefNum": sale.reference_no,
                    "DepositToAccountRef":{
                        "value":sale.manual_transaction,
                        "name":sale.deposit_to
                    }
                };
                
                jsondata;"<br><br>";
                
                prod_url = "https://quickbooks.api.intuit.com";
                full_url = prod_url .+ "/v3/company/" .+ realmId .+ "/salesreceipt?minorversion=51";
                
                res = curl(
                    error: t,
                    url: full_url, 
                    header:"Content-Type: application/json",
                    header:"Accept: application/json",
                    header: "Authorization: Bearer " .+ auth.access_token,
                    data: jsondata,
                    sslversion:6
                );
                
                void sql("UPDATE sr_transaction SET quickbooks = 'yes' WHERE uid = '?'", uid_transaction);

                return res.body;
            endif
        endf
        
        
        /**
         * Recueillir les données nécéssaires pour une transaction de l'entrepreneur
         * @args {uid_transaction} integer
         * @return JSON
         * 
         **/
        function getQBData(uid_transaction)
            qbdata = sql(single:true,
                "SELECT ctr.uid,
                CONCAT(ctr.uid, '-', ctr.truid) as sales_receipt_no,
                CONCAT(REPLACE(REPLACE(ctr.company_name, '’', ''), '\'', ''), ' - ',ctr.uid) as customer,
                CONCAT(atx.street_no, ' ', REPLACE(atx.street, '\'', '')) as billing_address_line_1,
                REPLACE(atx.city, '\'', '') as billing_address_city,
                atx.zip as billing_address_zip,
                atx.province as billing_address_country_subdivision_code,
                ctr.sn_cdate as transaction_date,
                ctr.status,
                ctr.uniqueref as reference_no,
                (atx.tps + atx.tvp) AS taxes,
                ROUND((ctr.amount / (1 + atx.tps + atx.tvp)), 2) AS Total, 
                'TaxEcluded' as global_tax_calculation,
                atx.accounting_tax_code as Line_item_tax_code,
                'Credit Card' as payment_method,
                'Nuvei / Pivotal' as deposit_to,
                1 as line_item_quantity,
                ctr.email,
                ctr.contact_firstname,
                ctr.contact_lastname,
                ctr.contact_phone,
                if(ctr.manual_transaction = 'yes',52,5) as manual_transaction
                FROM
                    (
                        SELECT c.uid, c.company_name, c.contact_firstname, c.contact_lastname, c.email, c.contact_phone, tr.uid as truid, tr.status, tr.amount, tr.sn_cdate, tr.uniqueref, tr.manual_transaction
                        FROM sr_contractor c 
                        INNER JOIN sr_transaction tr ON tr.uid_contractor = c.uid
                        WHERE tr.status = 'succeeded'
                    ) as ctr
                INNER JOIN
                    (
                        SELECT a.*, tx.tvp, tx.tps, tx.accounting_tax_code FROM sr_address a INNER JOIN sr_taxes tx ON tx.code_prov = a.province
                    ) as atx
                ON ctr.uid = atx.uid_contractor 
                WHERE (ctr.status = 'succeeded' OR ISNULL(ctr.status ) OR ctr.status = '') AND ctr.truid = '?'
                GROUP BY ctr.truid,sales_receipt_no,customer,total,transaction_date,reference_no,taxes, 
                ROUND(total/(1+taxes),2), global_tax_calculation, atx.accounting_tax_code,payment_method,deposit_to  
                ORDER BY ctr.truid
                ",
                uid_transaction
            );
            
            return qbdata.rows;
        endf
        
        //*******************************************************************************************************//
        // Fin de l'API QuickBooks Online SALES RECEIPTS
        //*******************************************************************************************************//        
    endp
}}
{{
    /*
        @title project package
        
        @author olivier@sednove.com
        
        @version 1.0 2016-07-27
        @version 1.01 2017-02-10     add limit amount by contractor
        
        @modified by louis.jhonny@gmail.com
        @version 1.02 2017-05-03    Modify findContractorForProject function to include project type

    */
    package project;
        
        function activateProject(uid)
            project = sql(single:true, "SELECT * FROM sr_project WHERE uid = '?'", uid);
            locks = sql(single:true,"SELECT count(*) as nbr_lck FROM sr_project p 
                        INNER JOIN sr_client c ON c.uid = p.uid_client 
                        WHERE c.locked = 'yes' AND p.status = 'new' AND p.uid_client = '?'", project.rows.uid_client);
                        
            if (project.nbrows > 0) then
                client = sql(single:true, "SELECT * FROM sr_client WHERE uid = '?'", project.rows.uid_client);
                if (client.nbrows > 0) then
                
                    //Unlock all client's project
                    if(locks.rows.nbr_lck == 0) then
                        void sql("UPDATE `sr_client` SET `locked` = '', `locked_by` = '' WHERE `uid` = '?'", project.rows.uid_client);
                    endif
                    
                    //activate project
                    void sql("UPDATE `sr_project` SET `active_date` = NOW() WHERE `uid` = '?'", project.rows.uid);
                    automail::projectActivatedClient(project.rows.uid);
                    automail::projectActivatedAdmin(project.rows.uid);
                    // Refresh client qualification status
                    project::qualifyClient(client); 
                endif
            endif
        endf
        
        function qualifyClient(client)
            if (type(client) ne 'context' && client ne '') then
                client = sql(single:true, "SELECT * FROM sr_client WHERE uid = '?'", client);
            endif
            if (client ne '' && client.nbrows > 0 && client.rows.to_qualify eq 'yes') then
                projects_to_qualify = sql("SELECT uid FROM sr_project WHERE uid_client = '?' AND status = 'new'", client.rows.uid);
                if (projects_to_qualify.nbrows == 0) then
                    void update(tables: 'sr_client', fields:{
                        'to_qualify': 'no'
                    }, uid:client.rows.uid);
                endif
            endif
        endf
        
        function completeProject(uid_project)
            void update(tables:'sr_project', fields: {
                'status': 'completed',
                'completion_date':datetime()
            }, uid: uid_project);
        endf
        
        function incompleteProject(uid_project)
            void update(tables:'sr_project', fields: {
                'status': 'inactive-incomplete',
                'completion_date':datetime()
            }, uid: uid_project);
        endf
        
        function cancel_project(uid_project)
            project = sql(single:true, "SELECT * FROM sr_project WHERE uid = '?'", uid_project);
            locks = sql(single:true,"SELECT count(*) as nbr_lck FROM sr_project p 
                        INNER JOIN sr_client c ON c.uid = p.uid_client 
                        WHERE c.locked = 'yes' AND p.status = 'new' AND p.uid_client = '?'", project.rows.uid_client);
                        
            if (project.nbrows > 0) then
                client = sql(single:true, "SELECT * FROM sr_client WHERE uid = '?'", project.rows.uid_client);
                if (client.nbrows > 0) then
                
                    //Unlock all client's project
                    if(locks.rows.nbr_lck == 0) then
                        void sql("UPDATE `sr_client` SET `locked` = '', `locked_by` = '' WHERE `uid` = '?'", project.rows.uid_client);
                    endif
                    
                    //Cancel project by setting status depending on project's existing status
                    if (project.rows.status eq 'new') then
                        void update(tables:'sr_project', fields: {
                            'status': 'cancelled-before-qualification'
                        }, uid: uid_project);
                    else
                        void update(tables:'sr_project', fields: {
                            'status': 'cancelled-after-qualification'
                        }, uid: uid_project);
                    endif
                endif
            endif
        endf
        
        function acceptProjectContractor(uid_project_contractor, lead_price)
            // Update project_contractor link
            void update(tables:'sr_project_contractor', fields: {
                'accepted': 'yes',
                'lead_price': lead_price,
                "accepted_date":datetime()
            }, uid: uid_project_contractor);
            // Check for existing invoice
            invoice = sql(single:true,"SELECT uid FROM sr_invoice WHERE uid_project_contractor='?'", uid_project_contractor);
            if invoice.nbrows == 0 then
                // Create invoice
                void insert(table:'sr_invoice', fields:{
                    'uid_project_contractor': uid_project_contractor,
                    'amount': lead_price
                });
                
                project_contractor = sql(single:true, "SELECT * FROM sr_project_contractor where uid = '?'", uid_project_contractor);
                
                if(project_contractor.rows.accepted_free ne 'yes') then
                    // Send emails
                    automail::sendContractorToClient(uid_project_contractor);
                    automail::notifyContractorWinProject(uid_project_contractor);
                    automail::notifyAdminContractorAcceptQuoteProject(uid_project_contractor);
                endif
            endif
        endf
        
        function generateProjectContractorToken(uid_project, uid_contractor)
            time = time();
            token = hash(algo:"sha512", uid_project .+ uid_contractor .+ time.secs .+ time.usecs .+ random(min:1, max:999999));
            doublon = sql(single:true, "select uid_project, uid_contractor  from sr_project_contractor  where uid_project = '?' and  uid_contractor = '?'", uid_project, uid_contractor);
            if doublon.nbrows > 0 then
                if (doublon.rows.token ne '') then
                    token = doublon.rows.token;
                else
                    void sql("UPDATE sr_project_contractor SET token = '?' WHERE uid_contractor = '?' AND uid_project = '?'", token, uid_contractor, uid_project);
                endif
            else
                void insert(table:'sr_project_contractor', fields:{
                    'uid_contractor': uid_contractor,
                    'uid_project': uid_project,
                    'token': token
                });
            endif
            return token;
        endf
        
        function generateFreeProjectContractorToken(uid_project, uid_contractor)
            time = time();
            token = hash(algo:"sha512", uid_project .+ uid_contractor .+ time.secs .+ time.usecs .+ random(min:1, max:999999));
            project = sql(single:true, "select * from sr_project  where uid = '?'", uid_project);
            doublon = sql(single:true, "select uid_project, uid_contractor from sr_project_contractor  where uid_project = '?' and  uid_contractor = '?'", uid_project, uid_contractor);
            if doublon.nbrows > 0 then
                if (doublon.rows.token ne '') then
                    token = doublon.rows.token;
                else
                    void sql("UPDATE sr_project_contractor SET token = '?', accepted_free = 'yes' WHERE uid_contractor = '?' AND uid_project = '?'", token, uid_contractor, uid_project);
                endif
            else
                project_contractor =  insert(table:'sr_project_contractor', fields:{
                    'uid_contractor': uid_contractor,
                    'uid_project': uid_project,
                    'token': token,
                    'accepted_free': 'yes'
                });
            endif
            
            //complete the project immediately if its status is free
            project::acceptProjectContractor(project_contractor.uid, 0);

            return token;
        endf
        
        function connectProjectContractor(uid_project, uid_contractor)
            token = project::generateProjectContractorToken(uid_project, uid_contractor);
            automail::suggestProjectToContractor(token);
        endf
        
        function connectFreeProjectContractor(uid_project, uid_contractor)
            token = project::generateFreeProjectContractorToken(uid_project, uid_contractor);
            automail::suggestFreeProjectToContractor(token);
        endf

        function findContractorsForProject_v2_old(uid_project, limit)
            project = sql(single:true, "
                    SELECT  p.*,
                            city.uid_territory,
                            client.languages
                    FROM sr_project p
                    LEFT JOIN sr_client client ON p.uid_client = client.uid
                    LEFT JOIN sr_address a ON p.uid_address = a.uid
                    LEFT JOIN sr_city city ON a.uid_city = city.uid
                    WHERE p.uid = '?'
                ", uid_project);
                
            //verify if the project is from of an external network (eg: Groupe Reso)
            if project.rows.network > 0 then
                //if project is from an external network, offer that project to contractors from that network, if there are contractors remaining in that network, use the usual query but with that extra condition, if none remain, use the usual query without that extra condition.
                network_remaining = sql(single:true, "
                    SELECT c.*
                    FROM   sr_contractor c 
                           INNER JOIN sr_contractor_territory ct ON ct.uid_contractor = c.uid 
                                  AND ct.uid_territory = ifnull('?',0)
                                  AND IFNULL(?,0) BETWEEN IFNULL(ct.min_amount,0) AND IF(IFNULL(ct.max_amount,0) = 0,9999999,ct.max_amount)
                    WHERE  c.active = 'yes' 
                    AND    c.verified = 'yes' 
                    AND    languages + ? != 3 
                    AND    ( 
                                  '?' IN 
                                  ( 
                                         SELECT cs.uid_service 
                                         FROM   sr_contractor_service cs 
                                         WHERE  cs.uid_contractor = c.uid 
                                         AND    approved = 'yes') 
                           OR     '?' IN 
                                  ( 
                                         SELECT cs.uid_service 
                                         FROM   sr_contractor_service cs 
                                         WHERE  cs.uid_contractor = c.uid 
                                         AND    approved = 'yes')) 
                    AND    NOT EXISTS 
                           ( 
                                  SELECT NULL 
                                  FROM   sr_project_contractor pc 
                                  WHERE  pc.uid_project = '?' 
                                  AND    pc.uid_contractor = c.uid) 
                    AND    (( 
                                         Now() NOT BETWEEN c.deactivate_date AND c.reactivate_date) 
                           OR     ( 
                                         c.enable_vacation = 'no' OR c.enable_vacation is null)) 
                    AND    (( 
                                         date_format(Now(),'%H:%i') BETWEEN c.from_active_hour AND c.to_active_hour)
                           OR     ( 
                                         c.enable_daily_schedule = 'no') 
                           OR     isnull(c.enable_daily_schedule))
                           
                    AND (
                            c.allow_budget = 'yes' 
                            AND EXISTS
                                (
                                SELECT * FROM sr_project WHERE 
                                    (
                                        (shared_budget IS NOT NULL AND shared_budget <> '') 
                                    ) 
                                    AND uid = '?' 
                                ) 
                            OR c.allow_budget <> 'yes'
                            OR isnull(c.allow_budget)
                        )
                    AND c.network = '?'
                    ORDER BY (note_global + IF(c.uid_territory = '?', 1.1, 0)) DESC
                    LIMIT 1",  project.rows.uid_territory, 
                    project.rows.estimated_value, 
                    project.rows.languages, 
                    project.rows.uid_service, 
                    project.rows.uid_secondary_service, 
                    project.rows.uid, 
                    project.rows.uid,
                    project.rows.network,
                    project.rows.uid_territory
                    );
                if network_remaining.nbrows > 0 then
                    network_query = "AND c.network = " .+ project.rows.network;
                endif
            endif
                
            return sql("
                SELECT c.*
                FROM   sr_contractor c 
                       INNER JOIN sr_contractor_territory ct ON ct.uid_contractor = c.uid 
                              AND ct.uid_territory = ifnull('?',0)
                              AND IFNULL(?,0) BETWEEN IFNULL(ct.min_amount,0) AND IF(IFNULL(ct.max_amount,0) = 0,9999999,ct.max_amount)
                WHERE  c.active = 'yes' 
                AND    c.verified = 'yes' 
                AND    languages + ? != 3 
                AND    ( 
                              '?' IN 
                              ( 
                                     SELECT cs.uid_service 
                                     FROM   sr_contractor_service cs 
                                     WHERE  cs.uid_contractor = c.uid 
                                     AND    approved = 'yes') 
                       OR     '?' IN 
                              ( 
                                     SELECT cs.uid_service 
                                     FROM   sr_contractor_service cs 
                                     WHERE  cs.uid_contractor = c.uid 
                                     AND    approved = 'yes')) 
                AND    NOT EXISTS 
                       ( 
                              SELECT NULL 
                              FROM   sr_project_contractor pc 
                              WHERE  pc.uid_project = '?' 
                              AND    pc.uid_contractor = c.uid) 
                AND    (( 
                                     Now() NOT BETWEEN c.deactivate_date AND c.reactivate_date) 
                       OR     ( 
                                     c.enable_vacation = 'no' OR c.enable_vacation is null)) 
                AND    (( 
                                     date_format(Now(),'%H:%i') BETWEEN c.from_active_hour AND c.to_active_hour)
                       OR     ( 
                                     c.enable_daily_schedule = 'no') 
                       OR     isnull(c.enable_daily_schedule))
                       
                AND (
                        c.allow_budget = 'yes' 
                        AND EXISTS
                            (
                            SELECT * FROM sr_project WHERE 
                                (
                                    (shared_budget IS NOT NULL AND shared_budget <> '') 
                                ) 
                                AND uid = '?' 
                            ) 
                        OR c.allow_budget <> 'yes'
                        OR isnull(c.allow_budget)
                    )
                " .+ network_query .+ "
                ORDER BY (note_global + IF(c.uid_territory = '?', 1.1, 0)) DESC
                LIMIT ?
            ",   project.rows.uid_territory, 
                project.rows.estimated_value, 
                project.rows.languages, 
                project.rows.uid_service, 
                project.rows.uid_secondary_service, 
                project.rows.uid, 
                project.rows.uid,
                project.rows.uid_territory, 
                limit
                );
                
                
            /*return sql("
                SELECT c.*
                FROM   sr_contractor c 
                       INNER JOIN sr_project_type_contractor ON uid_contractor = c.uid 
                              AND uid_project_type = ?
                       INNER JOIN sr_contractor_territory ct ON ct.uid_contractor = c.uid 
                              AND ct.uid_territory = ifnull('?',0)
                              AND IFNULL(?,0) BETWEEN IFNULL(ct.min_amount,0) AND IF(IFNULL(ct.max_amount,0) = 0,9999999,ct.max_amount)
                WHERE  c.active = 'yes' 
                AND    c.verified = 'yes' 
                AND    languages + ? != 3 
                AND    ( 
                              '?' IN 
                              ( 
                                     SELECT cs.uid_service 
                                     FROM   sr_contractor_service cs 
                                     WHERE  cs.uid_contractor = c.uid 
                                     AND    approved = 'yes') 
                       OR     '?' IN 
                              ( 
                                     SELECT cs.uid_service 
                                     FROM   sr_contractor_service cs 
                                     WHERE  cs.uid_contractor = c.uid 
                                     AND    approved = 'yes')) 
                AND    NOT EXISTS 
                       ( 
                              SELECT NULL 
                              FROM   sr_project_contractor pc 
                              WHERE  pc.uid_project = '?' 
                              AND    pc.uid_contractor = c.uid) 
                AND    (( 
                                     Now() NOT BETWEEN c.deactivate_date AND c.reactivate_date) 
                       OR     ( 
                                     c.enable_vacation = 'no')) 
                AND    (( 
                                     date_format(Now(),'%H:%i') BETWEEN c.from_active_hour AND c.to_active_hour)
                       OR     ( 
                                     c.enable_daily_schedule = 'no') 
                       OR     isnull(c.enable_daily_schedule))
                       
                AND (
                        ('?' >= DATE(NOW() + INTERVAL ifnull(c.delay_dynamic, 0) DAY ) AND (isnull(c.delay_to) OR c.delay_to = '' OR c.delay_to = '0000-00-00') AND (isnull(c.delay_from) or c.delay_from = '' OR c.delay_from = '0000-00-00'))
                       
                       OR
                       
                       (('?' >= ifnull(c.delay_from,0)) AND ('?' <= ifnull(c.delay_to, '2028-01-01') OR c.delay_to = '' OR c.delay_to = '0000-00-00') AND (isnull(c.delay_dynamic) OR c.delay_dynamic = ''))
                
                    )
                AND (
                        c.allow_budget = 'yes' 
                        AND EXISTS
                            (
                            SELECT * FROM sr_project WHERE 
                                (
                                    (shared_budget IS NOT NULL AND shared_budget <> '') 
                                ) 
                                AND uid = '?' 
                            ) 
                        OR c.allow_budget <> 'yes'
                        OR isnull(c.allow_budget)
                    )
                ORDER BY (note_global + IF(c.uid_territory = '?', 1.1, 0)) DESC
                LIMIT ?
            ",project.rows.uid_project_type, 
                project.rows.uid_territory, 
                project.rows.estimated_value, 
                project.rows.languages, 
                project.rows.uid_service, 
                project.rows.uid_secondary_service, 
                project.rows.uid, 
                project.rows.delay_to,
                project.rows.delay_to,
                project.rows.delay_from,
                project.rows.uid,
                project.rows.uid_territory, 
                limit
                );*/

            /*return sql("
                    SELECT c.* 
                    FROM sr_contractor c
                    WHERE   c.active = 'yes'
                    AND c.verified = 'yes'
                        AND ((now() NOT BETWEEN c.deactivate_date AND c.reactivate_date) OR (c.enable_vacation = 'no'))
                        AND ((DATE_FORMAT(now(),'%H:%i') BETWEEN c.from_active_hour AND c.to_active_hour) OR (c.enable_daily_schedule = 'no') OR isnull(c.enable_daily_schedule))
                        AND '?' IN (SELECT ifnull(uid_project_type,0) FROM sr_project_type_contractor WHERE uid_contractor = c.uid)
                        AND languages + ? <> 3
                        AND ('?' IN (SELECT cs.uid_service FROM sr_contractor_service cs WHERE cs.uid_contractor = c.uid AND approved = 'yes') OR '?' IN (SELECT cs.uid_service FROM sr_contractor_service cs WHERE cs.uid_contractor = c.uid AND approved = 'yes'))
                        AND NOT EXISTS (SELECT null FROM sr_project_contractor pc WHERE pc.uid_project = '?' AND pc.uid_contractor = c.uid)
                        AND '?' IN (SELECT ct.uid_territory FROM sr_contractor_territory ct WHERE ct.uid_contractor = c.uid AND ifnull(?,0) between ifnull(ct.min_amount,0) and if(ifnull(ct.max_amount,0)=0,9999999,ct.max_amount))

                    ORDER BY (note_global + IF(uid_territory = '?', 1.1, 0)) DESC
                    LIMIT ?
                ", project.rows.uid_project_type, project.rows.languages, project.rows.uid_service, project.rows.uid_secondary_service, project.rows.uid, project.rows.uid_territory,
                   project.rows.estimated_value, project.rows.uid_territory, limit);*/
                    
        endf
        
        
        function findContractorsForProject_v3(uid_project, limit)
            project = sql(single:true, "
                    SELECT  p.*,
                            city.uid_territory,
                            client.languages
                    FROM sr_project p
                    LEFT JOIN sr_client client ON p.uid_client = client.uid
                    LEFT JOIN sr_address a ON p.uid_address = a.uid
                    LEFT JOIN sr_city city ON a.uid_city = city.uid
                    WHERE p.uid = '?'
                ", uid_project);

            return sql("SELECT c.*, cs.uid_service, sp.rank, c.note_global
                FROM sr_contractor c
                INNER JOIN sr_contractor_service cs ON c.uid = cs.uid_contractor
                LEFT JOIN sr_subscription_contractor sc ON sc.uid_contractor = c.uid AND sc.active = 'yes'
                LEFT JOIN sr_subscription_plan sp ON sp.uid = sc.uid_subscription_plan 
                LEFT JOIN (SELECT sp.rank, sp.delay, pc.sn_cdate, uid_project 
                    FROM sr_project_contractor pc 
                    LEFT JOIN sr_subscription_contractor sc ON sc.uid_contractor = pc.uid_contractor 
                    LEFT JOIN sr_subscription_plan sp ON sp.uid = sc.uid_subscription_plan
                    WHERE pc.uid_project = '?' 
                    AND sc.active = 'yes'
                    ORDER BY pc.uid DESC LIMIT 1) as last_pc ON last_pc.uid_project = '?'
                WHERE   c.active = 'yes'
                    AND c.verified = 'yes'
                    AND languages + '?' <> 3
                    AND cs.uid_service = '?'
                    AND ((now() NOT BETWEEN c.deactivate_date AND c.reactivate_date) OR (c.enable_vacation = 'no'))
                    AND NOT EXISTS (SELECT null FROM sr_project_contractor pc WHERE pc.uid_project = '?' AND pc.uid_contractor = c.uid)
                    AND '?' IN (SELECT ct.uid_territory FROM sr_contractor_territory ct WHERE ct.uid_contractor = c.uid)
                    AND NOT EXISTS (SELECT NULL FROM sr_project_contractor pc INNER JOIN sr_project p ON p.uid = pc.uid_project WHERE pc.accepted_date > '2017/01/01' AND p.uid_client = '?' AND p.uid <> '?' AND pc.uid_contractor = c.uid)
                    AND (
                        sp.rank = last_pc.rank
                        OR
                        last_pc.rank IS NULL
                        OR
                        (TIMESTAMPDIFF(MINUTE, last_pc.sn_cdate, now()) > last_pc.delay AND TIMESTAMPDIFF(MINUTE, '?', now()) > last_pc.delay)
                        )
                GROUP BY c.uid
                ORDER BY c.network = '?' DESC, sp.rank DESC, (note_global + IF(uid_territory = '?', 3.1, 0)) DESC 
                LIMIT ?", project.rows.uid, project.rows.uid, project.rows.languages, project.rows.uid_service, project.rows.uid, project.rows.uid_territory,
                                project.rows.uid_client, uid_project, project.rows.active_date, project.rows.network,
                                project.rows.uid_territory, limit);
                
        endf
        
        
        function findContractorsForProject_v2(uid_project, limit)
            project = sql(single:true, "
                    SELECT  p.*,
                            city.uid_territory,
                            client.languages
                    FROM sr_project p
                    LEFT JOIN sr_client client ON p.uid_client = client.uid
                    LEFT JOIN sr_address a ON p.uid_address = a.uid
                    LEFT JOIN sr_city city ON a.uid_city = city.uid
                    WHERE p.uid = '?'
                ", uid_project);
                
            //verify if the project is from of an external network (eg: Groupe Reso)
            if project.rows.network > 0 then
                //if project is from an external network, offer that project to contractors from that network, if there are contractors remaining in that network, use the usual query but with that extra condition, if none remain, use the usual query without that extra condition.
                network_remaining = sql(single:true, "
                    SELECT c.*
                    FROM   sr_contractor c 
                            INNER JOIN sr_contractor_territory ct ON ct.uid_contractor = c.uid 
                                  AND ct.uid_territory = ifnull('?',0)
                                  AND IFNULL(?,0) BETWEEN IFNULL(ct.min_amount,0) AND IF(IFNULL(ct.max_amount,0) = 0,9999999,ct.max_amount)
                            LEFT JOIN sr_subscription_contractor sc ON sc.uid_contractor = c.uid AND sc.active = 'yes'
                            LEFT JOIN sr_subscription_plan sp ON sp.uid = sc.uid_subscription_plan 
                            LEFT JOIN (SELECT sp.rank, sp.delay, pc.sn_cdate, uid_project 
                                FROM sr_project_contractor pc 
                                LEFT JOIN sr_subscription_contractor sc ON sc.uid_contractor = pc.uid_contractor 
                                LEFT JOIN sr_subscription_plan sp ON sp.uid = sc.uid_subscription_plan
                                WHERE pc.uid_project = '?' 
                                AND sc.active = 'yes'
                                ORDER BY pc.uid DESC LIMIT 1) as last_pc ON last_pc.uid_project = '?'
                    WHERE  c.active = 'yes' 
                    AND    c.verified = 'yes' 
                    AND    languages + ? != 3 
                    AND    ( 
                                  '?' IN 
                                  ( 
                                         SELECT cs.uid_service 
                                         FROM   sr_contractor_service cs 
                                         WHERE  cs.uid_contractor = c.uid 
                                         AND    approved = 'yes') 
                           OR     '?' IN 
                                  ( 
                                         SELECT cs.uid_service 
                                         FROM   sr_contractor_service cs 
                                         WHERE  cs.uid_contractor = c.uid 
                                         AND    approved = 'yes')) 
                    AND    NOT EXISTS 
                           ( 
                                  SELECT NULL 
                                  FROM   sr_project_contractor pc 
                                  WHERE  pc.uid_project = '?' 
                                  AND    pc.uid_contractor = c.uid) 
                    AND    (( 
                                         Now() NOT BETWEEN c.deactivate_date AND c.reactivate_date) 
                           OR     ( 
                                         c.enable_vacation = 'no' OR c.enable_vacation is null)) 
                    AND    (( 
                                         date_format(Now(),'%H:%i') BETWEEN c.from_active_hour AND c.to_active_hour)
                           OR     ( 
                                         c.enable_daily_schedule = 'no') 
                           OR     isnull(c.enable_daily_schedule))
                           
                    AND (
                            c.allow_budget = 'yes' 
                            AND EXISTS
                                (
                                SELECT * FROM sr_project WHERE 
                                    (
                                        (shared_budget IS NOT NULL AND shared_budget <> '') 
                                    ) 
                                    AND uid = '?' 
                                ) 
                            OR c.allow_budget <> 'yes'
                            OR isnull(c.allow_budget)
                        )
                    AND c.network = '?'
                    ORDER BY (note_global + IF(c.uid_territory = '?', 1.1, 0)) DESC
                    LIMIT 1",  project.rows.uid_territory, 
                    project.rows.uid,
                    project.rows.uid,
                    project.rows.estimated_value, 
                    project.rows.languages, 
                    project.rows.uid_service, 
                    project.rows.uid_secondary_service, 
                    project.rows.uid, 
                    project.rows.uid,
                    project.rows.network,
                    project.rows.uid_territory
                );
                    
                if network_remaining.nbrows > 0 then
                    network_query = "AND c.network = " .+ project.rows.network;
                endif
            endif
                
            return sql("
                SELECT c.*
                FROM   sr_contractor c 
                        INNER JOIN sr_contractor_territory ct ON ct.uid_contractor = c.uid
                              AND ct.uid_territory = ifnull('?',0)
                              AND IFNULL(?,0) BETWEEN IFNULL(ct.min_amount,0) 
                              AND IF(IFNULL(ct.max_amount,0) = 0,9999999,ct.max_amount)                        
                        LEFT JOIN sr_subscription_contractor sc ON sc.uid_contractor = c.uid AND sc.active = 'yes'
                        LEFT JOIN sr_subscription_plan sp ON sp.uid = sc.uid_subscription_plan 
                        LEFT JOIN (SELECT sp.rank, sp.delay, pc.sn_cdate, uid_project 
                            FROM sr_project_contractor pc 
                            LEFT JOIN sr_subscription_contractor sc ON sc.uid_contractor = pc.uid_contractor 
                            LEFT JOIN sr_subscription_plan sp ON sp.uid = sc.uid_subscription_plan
                            WHERE pc.uid_project = '?' 
                            AND sc.active = 'yes'
                            ORDER BY pc.uid DESC LIMIT 1) as last_pc ON last_pc.uid_project = '?'
                WHERE  c.active = 'yes' 
                AND    c.verified = 'yes' 
                AND    languages + ? != 3 
                AND    ( 
                              '?' IN 
                              ( 
                                     SELECT cs.uid_service 
                                     FROM   sr_contractor_service cs 
                                     WHERE  cs.uid_contractor = c.uid 
                                     AND    approved = 'yes') 
                       OR     '?' IN 
                              ( 
                                     SELECT cs.uid_service 
                                     FROM   sr_contractor_service cs 
                                     WHERE  cs.uid_contractor = c.uid 
                                     AND    approved = 'yes')) 
                AND    NOT EXISTS 
                       ( 
                              SELECT NULL 
                              FROM   sr_project_contractor pc 
                              WHERE  pc.uid_project = '?' 
                              AND    pc.uid_contractor = c.uid) 
                AND    (( 
                                     Now() NOT BETWEEN c.deactivate_date AND c.reactivate_date) 
                       OR     ( 
                                     c.enable_vacation = 'no' OR c.enable_vacation is null)) 
                AND    (( 
                                     date_format(Now(),'%H:%i') BETWEEN c.from_active_hour AND c.to_active_hour)
                       OR     ( 
                                     c.enable_daily_schedule = 'no') 
                       OR     isnull(c.enable_daily_schedule))
                       
                AND (
                        c.allow_budget = 'yes' 
                        AND EXISTS
                            (
                            SELECT * FROM sr_project WHERE 
                                (
                                    (shared_budget IS NOT NULL AND shared_budget <> '') 
                                ) 
                                AND uid = '?' 
                            ) 
                        OR c.allow_budget <> 'yes'
                        OR isnull(c.allow_budget)
                    )
                AND (
                    sp.rank = last_pc.rank
                    OR
                    last_pc.rank IS NULL
                    OR
                    (TIMESTAMPDIFF(MINUTE, last_pc.sn_cdate, now()) > last_pc.delay AND TIMESTAMPDIFF(MINUTE, '?', now()) > 120)
                    )
                " .+ network_query .+ "
                ORDER BY (note_global + IF(c.uid_territory = '?', 1.1, 0)) DESC
                LIMIT ?
            ",   project.rows.uid_territory,
                project.rows.uid,
                project.rows.uid,
                project.rows.estimated_value, 
                project.rows.languages, 
                project.rows.uid_service, 
                project.rows.uid_secondary_service, 
                project.rows.uid, 
                project.rows.uid,
                project.rows.active_date,
                project.rows.uid_territory, 
                limit
            );
        endf        

         
        function findContractorsForProject(uid_project, limit)
            project = sql(single:true, "
                    SELECT  p.*,
                            city.uid_territory,
                            client.languages
                    FROM sr_project p
                    LEFT JOIN sr_client client ON p.uid_client = client.uid
                    LEFT JOIN sr_address a ON p.uid_address = a.uid
                    LEFT JOIN sr_city city ON a.uid_city = city.uid
                    WHERE p.uid = '?'
                ", uid_project);
                
            return sql("
                    SELECT c.* 
                    FROM sr_contractor c
                    WHERE   c.active = 'yes'
                        AND languages + ? <> 3
                        AND '?' IN (SELECT cs.uid_service FROM sr_contractor_service cs WHERE cs.uid_contractor = c.uid) 
                        AND NOT EXISTS (SELECT null FROM sr_project_contractor pc WHERE pc.uid_project = '?' AND pc.uid_contractor = c.uid)
                        AND '?' IN (SELECT ct.uid_territory FROM sr_contractor_territory ct WHERE ct.uid_contractor = c.uid)
                        AND (
                            0 = (select ifnull(estimated_value,0)as estimated from sr_project where uid ='?')
                            OR
                            (select ifnull(estimated_value,0)as estimated from sr_project where uid ='?') 
                                between ifnull(amount_min,0) 
                                        and if(ifnull(amount_max,0)=0,9999999,amount_max)

                        )
                        
                    ORDER BY (note_global + IF(uid_territory = '?', 1.1, 0)) DESC
                    LIMIT ?
                ",  project.rows.languages, project.rows.uid_service, project.rows.uid, project.rows.uid_territory,
                    project.rows.uid, project.rows.uid,
                    project.rows.uid_territory, limit);
                    
         endf
         
         
         
    
        function findContractorsForProject_old(uid_project, limit)
            project = sql(single:true, "
                    SELECT  p.*,
                            city.uid_territory,
                            client.languages
                    FROM sr_project p
                    LEFT JOIN sr_client client ON p.uid_client = client.uid
                    LEFT JOIN sr_address a ON p.uid_address = a.uid
                    LEFT JOIN sr_city city ON a.uid_city = city.uid
                    WHERE p.uid = '?'
                ", uid_project);
            return sql("
                    SELECT c.* 
                    FROM sr_contractor c
                    WHERE   c.active = 'yes'
                        AND languages + '?' <> 3
                        AND '?' IN (SELECT cs.uid_service FROM sr_contractor_service cs WHERE cs.uid_contractor = c.uid)
                        AND NOT EXISTS (SELECT null FROM sr_project_contractor pc WHERE pc.uid_project = '?' AND pc.uid_contractor = c.uid)
                        AND '?' IN (SELECT ct.uid_territory FROM sr_contractor_territory ct WHERE ct.uid_contractor = c.uid)
                    ORDER BY (note_global + IF(uid_territory = '?', 1.1, 0)) DESC
                    LIMIT ?
                ", project.rows.languages, project.rows.uid_service, project.rows.uid, project.rows.uid_territory, project.rows.uid_territory, limit);
        endf
        
        
        /*
        *
        *@description: accept a project half-price
        *@args: uid_project(id of project), uid_contractor (id of contractor)
        *@return:
        *   (-1): Exit if max half price to accept is reached.
        *   (0): if project is not a valid half-price project
        *   (1): if credit card has been used for the payment
        *   (2): if transaction has previously been executed or Limit > balance.
        *   (-2): if accept
        *
        */
        function accept_half_price(uid_project, uid_contractor)
        
            configs = sql(single:true, "SELECT * FROM sn_configs WHERE uid = 1 LIMIT 1");
        
            project = sql(single:true, 
                    "SELECT p.*,
                    city.uid_territory,
                    DATEDIFF(now(), active_date) as 'age_in_days',
                    (SELECT COUNT(*) FROM sr_project_contractor WHERE uid_project = p.uid) as 'total_links',
                    (SELECT IFNULL(SUM(IF(lead_price > 0,1,0)),0) FROM sr_project_contractor WHERE uid_project = p.uid) as 'accepted_links'
                    FROM sr_project as p
                    LEFT JOIN sr_address a ON p.uid_address = a.uid
                    LEFT JOIN sr_city city ON a.uid_city = city.uid
                    WHERE p.status = 'active'
                    AND p.uid = '?'
                ", uid_project); 
        

            // If project is more than 7 days old, half price!
            if (project.rows.age_in_days >= configs.rows.project_halfprice_days) then
                // Find contractors that accepted the project if half price and accept them
                accepted_links = project.rows.accepted_links;
                max_halfprice_to_accept = project.rows.max_quotes - accepted_links;
                
                contractor = sql(single:true,"
                        SELECT c.uid, c.credit_threshold, pc.uid AS 'uid_project_contractor', c.credit_cards
                        FROM sr_contractor c
                        INNER JOIN sr_project_contractor pc
                            ON pc.uid_contractor = c.uid
                        WHERE pc.accepted_rebate = 'yes'
                            AND (pc.accepted != 'yes' OR pc.accepted IS NULL)
                            AND pc.uid_project = '?'
                            AND c.active = 'yes'
                            AND c.can_accept_projects = 'yes'
                            AND c.uid = '?'
                    ", uid_project, uid_contractor);
        
                    if (max_halfprice_to_accept  <= 0) then
                        return -1;
                        stop();
                    endif
        
                    //  Vérifier si la balance courante de l'entrepreneur dépasse sa limite de crédit
                    total = contractor::getCurrentBillingTotal(contractor.rows.uid);
        
                    if (total >= contractor.rows.credit_threshold && contractor.rows.credit_cards eq 'yes') then
                        // Effectuer un prélevement sur la carte de crédit
                        void insert(table:'sr_debug', fields:{'description':'Cron Project to Contractor debit_charge on half price for contractor '.+contractor.rows.uid,'text':'projet='.+project.rows.uid});
                        transaction_uid = contractor::debit_charge(contractor.rows.uid, total);
                        return 1;
                    endif
                    
                    // Si la balance ne dépasse pas la limite de crédit OU que la transaction à été effectuée
                    if (total < contractor.rows.credit_threshold || (transaction_uid != false && transaction_uid ne "")) then
                        project::acceptProjectContractor(contractor.rows.uid_project_contractor, project.rows.lead_price / 2);
                        max_halfprice_to_accept--;
                        accepted_links++;
                        return 2;
                    endif
                
        
                if (max_halfprice_to_accept <= 0) then
                    //V1.02
                    void insert(table:'sr_debug', fields:{'description':'Cron Project to Contractor project complete max_halfprice_to_accept=  '.+max_halfprice_to_accept,'text':'projet='.+project.rows.uid});
                    project::completeProject(project.rows.uid);
                endif
                
                if (accepted_links < configs.rows.project_min_quotes && project.rows.appologised ne 'yes' && project.rows.age_in_days == configs.rows.project_halfprice_days) then
                    automail::appologiesToClientNotEnoughQuotes(project.rows.uid);
                    void update(tables:'sr_project', fields: {
                        'appologised': 'yes'
                    }, uid: project.rows.uid);
                endif 
            else
                return 0;
            endif
        endf
        
        
         // start CLIENT MANAGEMENT TOOL
        
        
        /**
         * 
         * 
        **/
        function updateProject(puid,auid,pro_data,addr_data)
            // description = description;
            // description = html2text(description);//empêche script de passer
        
            
            if(puid ne "") then
                project = update(
                    tables:"sr_project",
                    fields: pro_data, 
                    uid:puid
                );
            endif

            if(auid eq "" || auid == 0) then
                address = insert(
                    table:"sr_address",
                    fields:addr_data
                );
                
                project_upd = update(
                    tables:"sr_project",
                    fields: {"uid_address": address.uid},
                    uid:puid
                );
            else
                addr = update(
                    tables:"sr_address",
                    fields:addr_data,
                    uid:auid
                );
                
                prj_upd = update(
                    tables:"sr_project",
                    fields: {"uid_address": auid},
                    uid:puid
                );
                
            endif
            
        endf
        
        
        /**
         * Add lock to client only if it has not locked already
         * 
        **/

        function addLock(uid_client, username)
            client = sql(single:true,"SELECT * FROM sr_client WHERE locked = 'yes' AND uid = '?'", uid_client);
            
            if(client.nbrows == 0) then
                void update(tables:'sr_client', fields: {
                    'locked': 'yes',
                    'locked_by': username,
                    'request_state': 'pending'
                    }, uid:uid_client
                );
                return 1;
            else
                return client.rows.locked_by;
            endif
        endf
        
        
        /**
         * remove lock from client
         * 
        **/
        function rmLock(uid_client)
        
            a = update(tables:'sr_client', fields: {
                'locked': '',
                'locked_by': ''
                }, uid: uid_client
            );
            return a;
        endf
        
        
        /**
         * remove lock from client
         * 
        **/
        function rmMyLocks(username)
            a = sql("UPDATE sr_client set locked = '', locked_by = '' WHERE locked_by = '?'", username);
            return a;
        endf
        
        
        /**
         * remove lock from client
         * 
        **/
        function isLocked(uid_client)
            locked =  sql("SELECT uid, locked_by, locked FROM sr_client WHERE locked='yes' AND uid = '?'",uid_client);
            if(locked.nbrows > 0) then
                return true;
            else
                return false;
            endif
        endf
        
        
        /**
         * remove lock from client
         * 
        **/
        function isLockedBy(uid_client,username)
            locked =  sql("SELECT uid, locked_by, locked FROM sr_client WHERE locked='yes' AND locked_by = '?' AND uid = '?'",username, uid_client);
            if(locked.nbrows > 0) then
                return locked_by;
            else
                return false;
            endif
        endf
        
        
        /**
         * Desc Look for current locked projects
         * args: none
         * return: array
        **/
        function getLocks()
            locked =  sql("SELECT uid, locked_by, locked FROM sr_client WHERE locked='yes'");
            return locked.rows;
        endf
        
        
        /**
         * 
         * 
        **/
        
        function followup(...)
        
            if(fulldate == undefined) then
                void  insert(
                    table:"sr_followup",
                    fields:{
                    "msg_uid": uid_msg,
                    "uid_client": clientID,
                    "uid_project": uid_project,
                    "followup_agent": username,
                    "comments": comments
                    }
                );
                
            else
                void  insert(
                    table:"sr_followup",
                    fields:{
                    "msg_uid": uid_msg,
                    "when_to_callback": fulldate,
                    "uid_client": clientID,
                    "uid_project": uid_project,
                    "followup_agent": username,
                    "comments": comments
                    }
                );
            endif
        endf
        
        function followup_all(...)
        project = sql("SELECT * FROM sr_project where uid_client = '?' AND status = 'new'",clientID);
            for p in project.rows do
                if(fulldate == undefined) then
                    void  insert(
                        table:"sr_followup",
                        fields:{
                        "msg_uid": uid_msg,
                        "uid_client": p.uid_client,
                        "uid_project": p.uid,
                        "followup_agent": username,
                        "comments": comments
                        }
                    );
                    
                else
                    void  insert(
                        table:"sr_followup",
                        fields:{
                        "msg_uid": uid_msg,
                        "when_to_callback": fulldate,
                        "uid_client": p.uid_client,
                        "uid_project": p.uid,
                        "followup_agent": username,
                        "comments": comments
                        }
                    );
                endif
            endfor
            project;
        endf
        
        
        /**
         * desc: Ignore a client with all projects
         * @args: uid_client integer
         * @args: username string
         * @return: void
        **/
        function skip(uid_client, username)
            void update(tables:'sr_client', fields: {
                'skipped_by': username
                }, uid: uid_client
            );
            
            return uid_client;
        endf
        
        function getPrefix(phone)
            phones = sql(single:true,"SELECT * FROM sr_dialer_prefix where first_digits = substring(?,1,3)", phone);
            return phones.rows.prefix;
        endf
        
        //end CLIENT MANAGEMENT TOOL
        
        /**
         * Desc: Create a styled table. headers = column names of the query
         * @args: sql query
         **/
        function create_table_sql(query, ...)
            array = sql(wantheader:true, wantarray:true, query);
            }}
            <style>
                #styled_table {
                    font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
                    border-collapse: collapse;
                    width: 100%;
                }
                
                #styled_table td, #styled_table th {
                    border: 1px solid #ddd;
                    padding: 8px;
                }
                
                #styled_table tr:nth-child(even){background-color: #f2f2f2;}
                
                #styled_table tr:hover {background-color: #ddd;}
                
                #styled_table th {
                    padding-top: 12px;
                    padding-bottom: 12px;
                    text-align: left;
                    background-color: #00517e;
                    color: white;
                }
            </style>
            {{
            "<table id='styled_table'>";
            for h in array.headers do}}
                <th>{{h;}}</th>
            {{endfor
            for (i=0;i<array.nbrows;i+=1) do}}
                <tr>
                    {{for (h=0;h<array.nbcols;h+=1) do}}
                        <td>{{array.rows[i][h];}}</td>
                    {{endfor}}
                </tr>
            {{endfor
            "</table>";
            if show_query eq 'yes' then
                array.sql;
            endif
        endf
            
            function create_table_array(array)
            }}
            <style>
                #styled_table {
                    font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
                    border-collapse: collapse;
                    width: 100%;
                }
                
                #styled_table td, #styled_table th {
                    border: 1px solid #ddd;
                    padding: 8px;
                }
                
                #styled_table tr:nth-child(even){background-color: #f2f2f2;}
                
                #styled_table tr:hover {background-color: #ddd;}
                
                #styled_table th {
                    padding-top: 12px;
                    padding-bottom: 12px;
                    text-align: left;
                    background-color: #00517e;
                    color: white;
                }
            </style>
            {{
            "<table id='styled_table'>";
            for h in array.headers do}}
                <th>{{h;}}</th>
            {{endfor
            for (i=0;i<array.nbrows;i+=1) do}}
                <tr>
                    {{for (h=0;h<array.nbcols;h+=1) do}}
                        <td>{{array.rows[i][h];}}</td>
                    {{endfor}}
                </tr>
            {{endfor
        endf
        
        /**
         * Desc: return city name and uid_city for zip code parameter
         * @args: zip string
         **/
        function zipToCity(zip, lg)
            if(zip ne "") then
                return sql(single:true,"SELECT trim(a.zip), 
        	            a.uid_city, 
        	            c.name_? as name 
                    FROM 
        	            sr_address a 
                    INNER JOIN sr_city c on a.uid_city = c.uid 
                    WHERE trim(a.zip) = trim('?')
                    ORDER BY a.sn_cdate DESC
                 ", lg, zip);
            endif
        endf
    endp
}}{{
    /*
        @title pivotal package
        Description: This package contains function related to pivotal payments and credit cards.
        
        @author madupuis@sednove.com
        
        @version 1.0 2016-07-27
        
        sn_configs fields : pivotal_terminalid (varchar),
                            pivotal_secret (varchar),
                            pivotal_sandbox (checkbox yes/no)
                            
        credit_card_table fields :  credit_card_table_user_field (int),
                                    exp (varchar 4),
                                    last_digits (varchar 4),
                                    type (varchar),
                                    reference (varchar),
                                    name (varchar),
                                    merchantref (varchar)
                                    
        transaction_table fields :  transaction_table_user_field (int),
                                    amount (decimal),
                                    uniqueref (varchar)

    */
    package pivotal;
    
        // include the pivotal class
        %include "/class/pivotal/pivotal.sn";
        credit_card_table = "sr_cc";
        credit_card_table_user_field = "uid_contractor";
        transaction_table = "sr_transaction";
        transaction_table_user_field = "uid_contractor";
        
        
        // Main pivotal instance (singleton)
        mainInstance = null;
        
        
        /*
         * This function gets the configs from sn_configs and calls pivotal class constructor
         *
         * @author madupuis@sednove.com
         *
         * @return pivotal instance
		 *
         */
        function get_pivotal_ctx()
            if (pivotal::mainInstance == null) then
                pivotal_configs = sql(single:true,"SELECT pivotal_terminalid, pivotal_secret, pivotal_sandbox FROM sn_configs");
                terminalID = pivotal_configs.rows.pivotal_terminalid;
                secret = pivotal_configs.rows.pivotal_secret;
                sandbox = (pivotal_configs.rows.pivotal_sandbox eq 'yes');
                pivotal = new Pivotal(terminalID, secret, sandbox:sandbox);
                pivotal::mainInstance = pivotal;
            endif
            return pivotal::mainInstance;
        endf
        
        
        /*
         * This function saves a credit card using pivotal. It sets headers X-save_cc_success if SUCCESS or X-save_cc_error if ERROR.
         *
         * @author madupuis@sednove.com
         *
         * @param string type
         * @param string name
         * @param string card_number
         * @param string exp_year (2 digits)
         * @param string exp_month (2 digits)
         * @param string cvv (3-5 digits)
         * @param int uid_contractor (typically extranet_user.uid)
		 *
         */
        function save_credit_card(type, name, card_number, exp_year, exp_month, cvv, uid_contractor)
        
            // get the pivotal context (calls constructor)
            pivotal_ctx = pivotal::get_pivotal_ctx();
            
             // insert an empty credit card to get uid
            cc = insert(
                table:pivotal::credit_card_table,
                fields:{}
            );  
            
            // concatenate expiry month + year i.e. 0517 for mai 2017
            card_expiry = str_pad(exp_month, "2", "0", 1) .+ exp_year;
            
            // local reference for pivotal
            merchant_ref = "CON_" .+ uid_contractor .+ "_" .+ cc.uid;
            
            // save a card with pivotal
            card = pivotal_ctx.save_card(merchantref:merchant_ref,cardtype:uc(type),cardnumber:card_number,cardexpiry:card_expiry,name:name,cvv:cvv);
            
            if card.success then
                // update the card in the database
                void update(
                    tables:pivotal::credit_card_table,
                    uid:cc.uid,
                    fields:{
                        "type":type,
                        "name":name,
                        "exp":card_expiry,
                        "last_digits":substr(card_number, -4),
                        pivotal::credit_card_table_user_field:uid_contractor,
                        "reference": card.reference,
                        "merchantref":merchant_ref
                    }
                );
                
                return {'uid':cc.uid};
            else
                // delete the temporary credit card
                void sql("DELETE FROM ".+ pivotal::credit_card_table .+" WHERE uid='?'", cc.uid);
                return {'error':card.error};
            endif
        endf
        
        
        function save_my_credit_card(type, name, card_number, exp_year, exp_month, cvv, uid_contractor)
            // get the pivotal context (calls constructor)
            pivotal_ctx = pivotal::get_pivotal_ctx();
            
             // insert an empty credit card to get uid
            cc = insert(
                table:pivotal::credit_card_table,
                fields:{}
            );  
            
            // concatenate expiry month + year i.e. 0517 for mai 2017
            card_expiry = str_pad(exp_month, "2", "0", 1) .+ exp_year;
            
            // local reference for pivotal
            merchant_ref = "CON_" .+ uid_contractor .+ "_" .+ cc.uid;
            
            // save a card with pivotal
            card = pivotal_ctx.save_my_card(merchantref:merchant_ref,cardtype:uc(type),cardnumber:card_number,cardexpiry:card_expiry,name:name,cvv:cvv);
            
            
            if card.success then
                // update the card in the database
                void update(
                    tables:pivotal::credit_card_table,
                    uid:cc.uid,
                    fields:{
                        "type":type,
                        "name":name,
                        "exp":card_expiry,
                        "last_digits":substr(card_number, -4),
                        pivotal::credit_card_table_user_field:uid_contractor,
                        "reference": card.reference,
                        "merchantref":merchant_ref
                    }
                );
                
                return {'uid':cc.uid};
            else
                // delete the temporary credit card
                void sql("DELETE FROM ".+ pivotal::credit_card_table .+" WHERE uid='?'", cc.uid);
                return {'error':card.error};
            endif
            void insert(table:'sr_debug', fields:{'description':'save_credit_card debug','text':'success='.+card.success.+ '-' .+ data});
        endf
        
        
        /*
         * This function makes a payment using the card informations provided. It sets headers X-payment_card_success if SUCCESS or X-payment_card_error if ERROR.
         *
         * @author madupuis@sednove.com
         *
         * @param string type
         * @param string name
         * @param string card_number
         * @param string exp_year (2 digits)
         * @param string exp_month (2 digits)
         * @param string cvv (3-5 digits)
         * @param string currency
         * @param string amount (separated by a dot for decimal)
         * @param int uid_contractor (typically extranet_user.uid)
		 *
         */
        function make_payment_card(type, name, card_number, exp_year, exp_month, cvv, currency, amount, uid_contractor)
        
            // get the pivotal context (calls constructor)
            pivotal_ctx = pivotal::get_pivotal_ctx();
            
             // insert an empty transaction to get uid
            transaction = insert(
                table:pivotal::transaction_table,
                fields:{}
            );  
            
            // concatenate expiry month + year i.e. 0517 for mai 2017
            card_expiry = str_pad(exp_month, "2", "0", 1) .+ exp_year;
            
            // Generate orderID
            orderID = uid_contractor.+'-'.+transaction.uid;
            
            // send payment to pivotal
            payment = pivotal_ctx.payment_card(orderID:orderID,amount:amount,currency:currency,cardtype:type,cardnumber:card_number,cardexpiry:card_expiry,name:name,cvv:cvv);
            
            if payment.success then
                // update the card in the database with success flag
                void update(
                    tables:pivotal::transaction_table,
                    uid:transaction.uid,
                    fields:{
                        "amount":amount,
                        "uniqueref":payment.uniqueref,
                        "status":"succeeded",
                        pivotal::transaction_table_user_field:uid_contractor
                        
                    }
                );
                return {'uid': transaction.uid};
            else
                // update the card in the database with failure flag
                void update(
                    tables:pivotal::transaction_table,
                    uid:transaction.uid,
                    fields:{
                        "amount":amount,
                        "uniqueref":payment.uniqueref,
                        "status":"failed",
                        "completed":"yes",
                        pivotal::transaction_table_user_field:uid_contractor
                    }
                );
                return {'error': payment.error};
            endif
        endf
        
        /*
         * This function makes a payment using an existing card reference. It sets headers X-payment_success if SUCCESS or X-payment_error if ERROR.
         *
         * @author madupuis@sednove.com
         *
         * @param string cc_ref
         * @param string currency
         * @param string amount (separated by a dot for decimal)
         * @param int uid_contractor (typically extranet_user.uid)
		 *
         */
        function make_payment_cc_ref(cc_ref, currency, amount, uid_contractor)
            // get the pivotal context (calls constructor)
            pivotal_ctx = pivotal::get_pivotal_ctx();  
            
            // insert an empty transaction to get uid
            transaction = insert(
                table:pivotal::transaction_table,
                fields:{}
            );
            
            // Generate orderID
            orderID = uid_contractor.+'-'.+transaction.uid;
            
            payment = pivotal_ctx.payment_ref(orderID:orderID,amount:amount,currency:currency,cardnumber:cc_ref);
            if payment.success then
                // update the card in the database with success flag
                void update(
                    tables:pivotal::transaction_table,
                    uid:transaction.uid,
                    fields:{
                        "amount":amount,
                        "uniqueref":payment.uniqueref,
                        "status":"succeeded",
                        pivotal::transaction_table_user_field:uid_contractor
                        
                    }
                );
                return {'uid': transaction.uid};
            else
                // update the card in the database with failure flag
                void update(
                    tables:pivotal::transaction_table,
                    uid:transaction.uid,
                    fields:{
                        "amount":amount,
                        "uniqueref":payment.uniqueref,
                        "status":"failed",
                        "completed":"yes",
                        pivotal::transaction_table_user_field:uid_contractor
                    }
                );
                return {'error': payment.error};
            endif 
        endf
        
        /*
         * This function makes a payment using an existing card uid. It sets headers X-payment_ref_success if SUCCESS or X-payment_ref_error if ERROR.
         *
         * @author madupuis@sednove.com
         *
         * @param string cc_uid
         * @param string currency
         * @param string amount (separated by a dot for decimal)
         * @param int uid_contractor (typically extranet_user.uid)
		 *
         */
        function make_payment_cc_uid(cc_uid, currency, amount, uid_contractor)
            cc = sql(single:true,"SELECT reference FROM ".+ pivotal::credit_card_table .+" WHERE uid='?' AND ".+ pivotal::credit_card_table_user_field .+"='?'", cc_uid, uid_contractor);
            if cc.nbrows > 0 then
                return pivotal::make_payment_cc_ref(cc.rows.reference, currency, amount, uid_contractor);
            endif
        endf
        
    endp

    
    
}}


{{
    // include the validator for contractor_form
    %include "/site/contractor_dashboard/include/add_cc_validator.sn";
    
    cgidata = cgidata();
    use extranet_user;    
    custom = cgidata.custom_amount;
    
    // validate server side
    if (validator.validate(data:cgidata)) then  
    
        currency = "CAD";

        amount = contractor::getCurrentBillingTotal(extranet_user.uid);
        if(custom > 10) then
            amount = custom;
        endif
        
         if (amount > 0) then
        
            cardInfo = cgidata.type .+ " ************" .+ substr(cgidata.card_number, -4);
            //headers_out("X-test", amount);
            
            // save credit card is checked
            if cgidata.save_cc eq 'yes' then
                cc = pivotal::save_credit_card(cgidata.type, cgidata.name, cgidata.card_number, cgidata.exp_year, cgidata.exp_month, cgidata.cvv, extranet_user.uid);
                if cc.uid then
                    headers_out("X-save_cc_success", "1");
                else
                    headers_out("X-save_cc_error", "1");
                    headers_out("X-save_cc_error_msg", cc.error);
                    stop();
                endif
               
                // make pivotal payment with card reference
                transaction = pivotal::make_payment_cc_uid(cc.uid, currency, amount, extranet_user.uid);
                void insert(table:'sr_debug', fields:{'description':'ajax_make_payment_card - pivotal::make_payment_cc_uid: '.+extranet_user.uid,'text':'uid_transaction='.+transaction.uid.+" ".+'error_transaction='.+transaction.error.+" ".+'amount='.+amount});

                if transaction.uid then
                    // Add credit cards privilege (for calculation of the contractor's score)
                    contractor::addCreditCardPrivilege(extranet_user.uid);
                    // Trigger transaction success
                    contractor::trigger_transaction(transaction.uid);
                    headers_out("X-payment_card_success", "1");
                else
                    headers_out("X-payment_card_error", "1");
                    headers_out("X-payment_card_error_msg", transaction.error);
                    // Trigger transaction success
                    contractor::trigger_payment_failed(extranet_user.uid, cardInfo .+ " (".+transaction.error.+")", amount);
                endif
            else
                // make pivotal payment with card information
                transaction = pivotal::make_payment_card(cgidata.type, cgidata.name, cgidata.card_number, cgidata.exp_year, cgidata.exp_month, cgidata.cvv, currency, amount, extranet_user.uid);        
                void insert(table:'sr_debug', fields:{'description':'ajax_make_payment_card - pivotal::make_payment_card: '.+extranet_user.uid,'text':'uid_transaction='.+transaction.uid.+" ".+'error_transaction='.+transaction.error.+" ".+'amount='.+amount});
                
                if transaction.uid then
                    contractor::trigger_transaction(transaction.uid);
                    headers_out("X-payment_card_success", "1");
                else
                    headers_out("X-payment_card_error", "1");
                    headers_out("X-payment_card_error_msg", transaction.error);
                    contractor::trigger_payment_failed(extranet_user.uid, cardInfo .+ " (".+transaction.error.+")", amount);
                endif
            endif
        endif
    endif
}}