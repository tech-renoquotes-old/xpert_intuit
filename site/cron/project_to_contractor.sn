{{%include '/site/package/all.sn';}}
\{{// Every 20 minutes

//page 2
/*      modified by louis.jhonny@gmail.com

        @version 1.02 2017-02-16    ajout test avant de completed, log CRON started
        @version 1.03 2017-03-20    Tester si contractor a le privilege de carte de credit avant prelevement.
        @version 1.04 2017-04-13    Michel: Ajouter la fonction "urgent" qui envoie le projet à plus d'entrepreneur
        @version 1.05 2017-04-27    Michel: J'ai changé la façon de calculé les accepted_links pour tenir compte de lead price au lieu de accepted
        @version 2.00 2018-05-31    Michel: J'ai séparé la requête principale en plusieurs requêtes selon les actions qui doivent être faites.  Le cron est trop lent et mon impression est que ça prend trop de ram

*/

configs = sql(single:true, "SELECT * FROM sn_configs WHERE uid = 1 LIMIT 1");
//V1.02
void sql("insert into sr_log (uid_project_contractor,description,value)values 
            (
                (select uid from sr_project_contractor order by 1 desc limit 1),
                'CRON project_to_contractor',now()
            )
          "
        );
        
void timeout(3600);

//make projects completed if they have reached the maximum number of quotes
for project sql("
    SELECT p.uid, p.max_quotes,
        (SELECT IFNULL(SUM(IF(lead_price > 0,1,0)),0) FROM sr_project_contractor WHERE uid_project = p.uid) as 'accepted_links'
    FROM sr_project as p
    WHERE p.status = 'active'
    HAVING accepted_links >= p.max_quotes
    ") do
    project::completeProject(project.rows.uid);
endfor

void insert(table:'sr_debug', fields:{'description':'Cron_v2 : Phase: Maximum quotes done'});

//deactive projects that are older than 21 days
for project sql("
    SELECT p.uid
    FROM sr_project as p
    WHERE p.status = 'active'
    AND DATEDIFF(now(), active_date) > 21
    ") do
    project::incompleteProject(project.rows.uid);
endfor

void insert(table:'sr_debug', fields:{'description':'Cron_v2 : Phase: old projects done'});

//send project to contractor for projects that are younger than 7 days
for project sql("
        SELECT p.*,
            city.uid_territory,
            DATEDIFF(now(), active_date) as 'age_in_days',
			TIMESTAMPDIFF(MINUTE, active_date, now()) as 'age_in_minutes'
        FROM sr_project as p
        LEFT JOIN sr_address a ON p.uid_address = a.uid
        LEFT JOIN sr_city city ON a.uid_city = city.uid
        WHERE p.status = 'active'
        HAVING age_in_days < 7
		ORDER BY active_date DESC
    ") do
    /////////////////////////////////////////
    // For each active project
    
	nb_contractors_to_contact = 5;
    
    // if (project.rows.urgent eq 'yes') then
    //     nb_contractors_to_contact = 10;
    // endif
    
    // if (project.rows.total_links == 0) then
    //     // If it's the first time, send to 6 contractors
    //     nb_contractors_to_contact = configs.rows.project_first_n_contractors_to_contact;
    // endif

	new_limit = project::set_limit_new_contractors_to_contact(project.rows.uid, nb_contractors_to_contact);
    
    contractors = project::findContractorsForProject_v3(project.rows.uid, new_limit);
    
    for contractor in contractors.rows do
        project::connectProjectContractor(project.rows.uid, contractor.uid);
        // void insert(table:'sr_debug', fields:{'description':'Cron_v2 : Project to Contractor =  '.+ contractor.uid,'text':'projet='.+project.rows.uid .+ ' / type projet=' .+project.rows.uid_project_type });
    endfor
    
    void insert(table:'sr_debug', fields:{'description':'Cron_v2 : Phase: new connections for '.+ project.rows.uid});
    
    /////////////////////////////////////////
endfor

void insert(table:'sr_debug', fields:{'description':'Cron_v2 : Phase: new connections done'});

// If project is more than 7 days old, half price!
for project sql("
    SELECT p.*, city.uid_territory,
        DATEDIFF(now(), active_date) as 'age_in_days',
        (SELECT IFNULL(SUM(IF(lead_price > 0,1,0)),0) FROM sr_project_contractor WHERE uid_project = p.uid) as 'accepted_links'
    FROM sr_project as p
    LEFT JOIN sr_address a ON p.uid_address = a.uid
    LEFT JOIN sr_city city ON a.uid_city = city.uid
    WHERE p.status = 'active'
    HAVING age_in_days >= 7
    ") do
    accepted_links = project.rows.accepted_links;
    max_halfprice_to_accept = project.rows.max_quotes - accepted_links;
    
    for contractor sql("
            SELECT c.uid, c.credit_threshold, pc.uid AS 'uid_project_contractor', c.credit_cards
            FROM sr_contractor c
            INNER JOIN sr_project_contractor pc
                ON pc.uid_contractor = c.uid
            WHERE   pc.accepted_rebate = 'yes'
                AND (pc.accepted != 'yes' OR pc.accepted IS NULL)
                AND pc.uid_project = '?'
                AND c.active = 'yes'
                AND c.verified = 'yes'
                AND c.can_accept_projects = 'yes'
            ORDER BY (c.note_global + IF(c.uid_territory = '?', 1.1, 0)) DESC
        ", project.rows.uid, project.rows.uid_territory) do
        if (max_halfprice_to_accept <= 0) then
            break;
        endif
        
        //  Vérifier si la balance courante de l'entrepreneur dépasse sa limite de crédit
        total = contractor::getCurrentBillingTotal(contractor.rows.uid);
        if (total >= contractor.rows.credit_threshold && contractor.rows.credit_cards eq 'yes' && contractor.rows.credit_threshold >= configs.rows.credit_limit_after_cc_added) then
            // Effectuer un prélevement sur la carte de crédit
            // void insert(table:'sr_debug', fields:{'description':'Cron Project to Contractor debit_charge on half price for contractor '.+contractor.rows.uid,'text':'projet='.+project.rows.uid});
            transaction_uid = contractor::debit_charge(contractor.rows.uid, total);
        endif
        // Si la balance ne dépasse pas la limite de crédit OU que la transaction à été effectuée
        if (total < contractor.rows.credit_threshold || (transaction_uid != false && transaction_uid ne "")) then
            project::acceptProjectContractor(contractor.rows.uid_project_contractor, project.rows.lead_price / 2);
            max_halfprice_to_accept--;
            accepted_links++;
        endif
    endfor
    if (max_halfprice_to_accept <= 0) then
        //V1.02
        // void insert(table:'sr_debug', fields:{'description':'Cron Project to Contractor project complete max_halfprice_to_accept=  '.+max_halfprice_to_accept,'text':'projet='.+project.rows.uid});
        project::completeProject(project.rows.uid);
    endif
    if (accepted_links < configs.rows.project_min_quotes && project.rows.appologised ne 'yes' && project.rows.age_in_days == configs.rows.project_halfprice_days) then
        automail::appologiesToClientNotEnoughQuotes(project.rows.uid);
        void update(tables:'sr_project', fields: {
            'appologised': 'yes'
        }, uid: project.rows.uid);
    endif 
endfor

void insert(table:'sr_debug', fields:{'description':'Cron_v2 : Phase: half price done'});
        
}}
