\{{
    /*
        @title contractor package
        
        @author olivier@sednove.com
        
        @version 1.0 2016-08-08
        @version 1.0 2016-11-19     bbduc@yahoo.com   ajout de prov
        @version 1.01 2017-01-10    chnager chemin PDF
        @version 1.02 2017-03-15    add uid_pivotal dans transaction
        @version 1.03 2017-03-15    change directory for PDF to "0"+YEAR/
        @version 1.04 2017-04-02    Recover PDF  with uid_pivotal
    */
    
    package contractor;
        
        function activateContractor(uid_contractor)
            contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
            if (contractor.rows.sent_welcome_email ne 'yes' ) then
                //  NE PAS COCHER AFFICHAGE EDIT  POUR LE CHAMP sent_welcome_email SINON PAS D'UPDATE
                void sql("UPDATE sr_contractor SET sent_welcome_email = 'yes', active = 'yes' WHERE uid = '?'", uid_contractor);
                //void insert(table:'sr_debug', fields:{'description':'avant test de sent_welcome_email','text':contractor.rows.sent_welcome_email});
                automail::contractorActivation(uid_contractor);
            endif
        endf
        
        /* 
         * Returns a list of billing lines including the balance, invoices, credits and transactions.
         * The totals of 'price' is the amount to pay
         * Available fields are : uid, id, type, description, address, amount
         */
        function getCurrentBilling(uid_contractor)
            if (lg eq '') then
                lg = '{{use lg; lg.rows.lg}}';
            endif
            if (lg eq '') then
                lg = 'fr';
            endif
            billing = sql("
            
                SELECT  null as uid,
                        '' as id,
                        '' as date,
                        'balance' as 'type',
                        '' as description,
                        '' as address,
                        '' as info_extra,
                        balance as 'amount',
                        '' as name
                    FROM sr_contractor 
                    WHERE uid='?'
                    
                UNION
                
                SELECT  i.uid as uid,
                        p.uid as id,
                        pc.accepted_date as date,
                        'lead' as 'type',
                        concat(cl.firstname, ' ', cl.lastname) as description,
                        concat(cl.firstname, ' ', cl.lastname, ' ', IF(a.uid IS NULL, '', CONCAT(a.street_no, ' ', a.street, ', ', IF(c.name_".+lg.+"  IS NOT NULL, c.name_".+lg.+", a.city), ', ', a.province, ' ', a.zip))) as address,
                        '' as info_extra,
                        i.amount as 'amount',
                        concat(cl.firstname, ' ', cl.lastname) as name
                    FROM sr_invoice i
                    INNER JOIN sr_project_contractor pc ON pc.uid = i.uid_project_contractor
                    INNER JOIN sr_project p ON p.uid = pc.uid_project
                    INNER JOIN sr_client cl ON cl.uid = p.uid_client
                    LEFT JOIN sr_address a ON a.uid = p.uid_address
                    LEFT JOIN sr_city c ON c.uid = a.uid_city
                    WHERE   (i.completed != 'yes' OR i.completed IS NULL)
                        AND pc.uid_contractor='?'
                        
                UNION
                
                SELECT  cr.uid as uid,
                        p.uid as id,
                        cr.sn_cdate as date,
                        'credit' as 'type',
                        '' as description,
                        IF(a.uid IS NULL, '', CONCAT(a.street_no, ' ', a.street, ', ', IF(c.name_".+lg.+"  IS NOT NULL, c.name_".+lg.+", a.city), ', ', a.province, ' ', a.zip)) as address,
                        'Credit' as info_extra,
                        (pc.lead_price*-1) as 'amount',
                        '' as name
                    FROM sr_credit cr
                    INNER JOIN sr_project_contractor pc ON pc.uid = cr.uid_project_contractor
                    INNER JOIN sr_project p ON p.uid = pc.uid_project
                    LEFT JOIN sr_address a ON a.uid = p.uid_address
                    LEFT JOIN sr_city c ON c.uid = a.uid_city
                    WHERE   (cr.completed != 'yes' OR cr.completed IS NULL)
                        AND cr.accepted = 'yes'
                        AND pc.uid_contractor='?'
                        
                UNION
                
                SELECT  uid,
                        '' as id,
                        sn_cdate as date,
                        'transaction' as 'type',
                        CONCAT('Transaction', ' ', DATE_FORMAT(sn_cdate, '%Y-%m-%d') , ' ', uniqueref) as description,
                        '' as address,
                        '' as info_extra,
                        (amount*-1) as 'amount',
                        '' as name
                    FROM sr_transaction
                    WHERE uid_contractor = '?'
                        AND (completed != 'yes' OR completed IS NULL)
                        AND (status = 'succeeded' OR status IS NULL)
                        
                UNION
                
                SELECT  sc.uid as uid,
                        '' as id,
                        sc.start_date as date,
                        'subscription' as type,
                        sp.name_? as description,
                        '' as address,
						'' as info_extra,
                        (sc.price - ifnull(sc.discount,0)) as amount,
                        '' as name
                    FROM sr_subscription_contractor sc
                    INNER JOIN sr_subscription_plan sp ON sp.uid = sc.uid_subscription_plan
                    WHERE sc.uid_contractor = '?'
                        AND (sc.paid is null OR sc.paid <> 'yes')
                        AND sc.start_date <= curdate()
                        AND (sc.trial IS NULL OR sc.trial <> 'yes')
                        
                ORDER BY id ASC, date ASC, type DESC
                
                ", uid_contractor, uid_contractor, uid_contractor, uid_contractor, lg, uid_contractor);
                
            return billing.rows;
        endf
        
        
        ////////////////////////////////////////////////////
        // Total Amount calculations
        function getBillingFooter(billing)
            subtotal = 0;
            transactions = 0;
            balance = 0;
            for b in billing do
                if (b.type eq 'transaction') then
                    transactions += b.amount;
                elseif (b.type eq 'balance') then
                    balance = b.amount;
                else
                    subtotal += b.amount;
                endif
            endfor
            if (subtotal < 0) then
                subtotal = 0;
            endif
            taxes = contractor::calculateTaxes(subtotal);
            solde = taxes.total + transactions + balance;
            return {
                'subtotal': subtotal,
                'tps': taxes.tps,
                'tvq': taxes.tvq,
                'total': taxes.total,
                'paid': transactions,
                'balance': balance,
                'solde': solde
            };
        endf
       
        
        // Total Amount calculations  by Provinces
        function getBillingFooterByProv(billing, uid_contractor)
            subtotal = 0;
            transactions = 0;
            balance = 0;
            for b in billing do
                if (b.type eq 'transaction') then
                    transactions += b.amount;
                elseif (b.type eq 'balance') then
                    balance = b.amount;
                else
                    subtotal += b.amount;
                endif
            endfor
            if (subtotal < 0) then
                subtotal = 0;
            endif
            taxes = contractor::calculateTaxesByProv(subtotal,uid_contractor);
            solde = taxes.total + transactions + balance;
            return {
                'subtotal'      : subtotal,
                'tps'           : taxes.tps,
                'tvq'           : taxes.tvq,
                'total'         : taxes.total,
                'paid'          : transactions,
                'balance'       : balance,
                'solde'         : solde,
                'tps_name'      : taxes.tps_name,
                'tvp_name'      : taxes.tvp_name,
                'tvp_taxe_no'   : taxes.tvp_taxe_no
            };
        endf
        
        function getCurrentBillingTotal(uid_contractor)
            billingTotals = sql(single:true, contractor::getAllContractorsCurrentBillingTotalsQuery() .+ " WHERE c.uid = '?'", uid_contractor);
            subtotal = billingTotals.rows.invoices_total - billingTotals.rows.credits_total + billingTotals.rows.subscription_total;
           // taxes = contractor::calculateTaxes(subtotal);
            taxes = contractor::calculateTaxesByProv(subtotal,uid_contractor);
            return billingTotals.rows.balance + taxes.total - billingTotals.rows.transactions_total;
        endf
        
        ////////////////////////////////////////////////////
        
        
        function calculateTaxes(subtotal)

            if (subtotal < 0) then
                subtotal = 0;
            endif
            tps = subtotal * 0.05;
            tvq = subtotal * 0.09975;
            taxtotal = tps + tvq;
            total = subtotal + taxtotal;
            return {
                'tps': tps,
                'tvq': tvq,
                'taxtotal': taxtotal,
                'total': total
            };
        endf
        
        function calculateTaxesByProv(subtotal,uid_contractor)  // contractor to get province
            if (c.lg ne '') then
                lg = c.lg;
            endif
            if (lg eq '') then
                lg = '{{use lg; lg.rows.lg}}';
            endif
            if (lg eq '') then
                lg = 'fr';
            endif

            adresse = sql(single:true, "
                        SELECT a.province FROM sr_address a 
                        WHERE a.uid_contractor = '?' 
                        ORDER BY a.uid DESC 
                        LIMIT 1
                    ", uid_contractor);
            prov = (adresse.rows.province eq '')?'QC':adresse.rows.province;     // default = QC  
            taxes = sql(single:true," SELECT tps,tvp, name_tps_".+lg.+" as name_tps, name_tvp_".+lg.+" as name_tvp, tvp_taxe_no  FROM sr_taxes WHERE code_prov = '?'",prov);        

            if (subtotal < 0) then
                subtotal = 0;
            endif
            tps = subtotal * taxes.rows.tps;
            tvq = subtotal * taxes.rows.tvp;
            taxtotal = tps + tvq;
            total = subtotal + taxtotal;
            return {
                'tps'           : tps,
                'tvq'           : tvq,
                'taxtotal'      : taxtotal,
                'total'         : total,
                'tps_name'      : taxes.rows.name_tps,
                'tvp_name'      : taxes.rows.name_tvp,
                'tvp_taxe_no'   : taxes.rows.tvp_taxe_no
            };
        endf

        function getAllContractorsCurrentBillingTotalsQuery() // returns uid_contractor,balance,invoices_total,credits_total,transactions_total
            return "
                SELECT 
                    c.uid AS 'uid_contractor',
                    c.balance as 'balance',
                    c.contact_lg as 'lg',
                    IFNULL((
                        SELECT sum(i.amount) 
                        FROM sr_invoice i 
                        INNER JOIN sr_project_contractor pc ON pc.uid = i.uid_project_contractor
                        WHERE pc.uid_contractor = c.uid
                        AND (i.completed is null OR i.completed != 'yes')
                    ),0) AS 'invoices_total',
                    IFNULL((
                        SELECT sum(pc.lead_price) 
                        FROM sr_credit cr 
                        INNER JOIN sr_project_contractor pc ON pc.uid = cr.uid_project_contractor
                        WHERE pc.uid_contractor = c.uid
                        AND cr.accepted = 'yes' 
                        AND (cr.completed is null OR cr.completed != 'yes')
                    ),0) AS 'credits_total',
                    IFNULL((
                        SELECT sum(t.amount)
                        FROM sr_transaction t
                        WHERE t.uid_contractor = c.uid
                        AND (t.completed != 'yes' OR t.completed IS NULL)
                        AND (t.status = 'succeeded' OR t.status IS NULL)
                    ),0) AS 'transactions_total',
                    IFNULL((
                        SELECT sum(sc.price) - ifnull(sc.discount,0)
                        FROM sr_subscription_contractor sc
                        WHERE sc.uid_contractor = c.uid
                        AND (sc.paid is null OR sc.paid <> 'yes')
                        AND sc.start_date <= curdate()
                        AND (sc.trial is null OR sc.trial <> 'yes')
                    ),0) AS 'subscription_total'                    
                FROM sr_contractor c
            ";
        endf
        
        function debit_charge(uid_contractor, amount)
            // Fetch credit cards
            creditcards = sql("SELECT * FROM sr_cc WHERE uid_contractor = '?' ORDER BY priority ASC, uid DESC", uid_contractor);
            cardInfo = "";
            if (creditcards.nbrows > 0) then
                for cc in creditcards.rows do
                    cardInfo = cc.type .+ " ************" .+ cc.last_digits;
                    // For each credit card, try to execute a payment
                    transaction = pivotal::make_payment_cc_ref(cc.reference, "CAD", amount, uid_contractor);
                    if (transaction.uid) then
                        // If a payment succeeds, trigger the transaction and stop the loop
                        contractor::trigger_transaction(transaction.uid);
                        return transaction.uid;
                    else
                        cardInfo .+= " (".+transaction.error.+")";
                    endif
                endfor
                // If payment failed, trigger the payment failure
                contractor::trigger_payment_failed(uid_contractor, cardInfo, amount);
                
            endif
            return false;
        endf
        
        function addCreditCardPrivilege(uid_contractor)
            contractor = sql(single:true,"SELECT credit_threshold FROM sr_contractor WHERE uid='?'", uid_contractor);
            data = {'credit_cards':1};
            // Increase credit threshold
            configs = sql(single:true, "SELECT * FROM sn_configs WHERE uid = 1 LIMIT 1");
            if (contractor.nbrows == 1 && contractor.rows.credit_threshold < configs.rows.credit_limit_after_cc_added) then
                data.credit_threshold = configs.rows.credit_limit_after_cc_added;
            endif
            void update(tables: 'sr_contractor', uid: uid_contractor, fields:data);
        endf
        
        function trigger_transaction(uid_transaction)
            qb_realm_id = "193514830636359";
            void insert(table:'sr_debug', fields:{'description':'test_Billing_debut3','text':'uid_transaction='.+uid_transaction});

            transaction = sql(single:true, "SELECT * FROM sr_transaction WHERE uid = '?' AND (status <> 'failed' OR status IS NULL)", uid_transaction);
            contractor = sql(single:true,"SELECT credit_threshold,balance FROM sr_contractor WHERE uid='?'", transaction.rows.uid_contractor);
            prev_solde = contractor.rows.balance;
            void insert(table:'sr_debug', fields:{'description':'test_Billing_debut3A','text':'balance='.+contractor.rows.balance .+ " " .+ transaction.rows});
            configs = sql(single:true, "SELECT * FROM sn_configs WHERE uid = 1 LIMIT 1");
            
            // Increase credit threshold
            if (transaction.rows.uid_contractor ne '' && contractor.rows.credit_threshold < configs.rows.credit_limit_after_payment_success) then
                void update(tables: 'sr_contractor', uid: transaction.rows.uid_contractor, fields:{'credit_threshold':configs.rows.credit_limit_after_payment_success});
            endif
        
            // Calculate current billing
            billing = contractor::getCurrentBilling(transaction.rows.uid_contractor, lg:contractor.rows.contact_lg);
            
            //convert html descriptions to plain text;
            for desc in billing do
                desc.description = html2text(desc.description);
            endfor

            //billing_footer = contractor::getBillingFooter(billing);
            billing_footer = contractor::getBillingFooterByProv(billing,transaction.rows.uid_contractor);
            
            //send data to quickbooks
            qbdata = contractor::createSalesReceipt(uid_transaction, qb_realm_id);
            void insert(table:'sr_debug', fields:{'description':'Quickbook_transaction - ' .+ uid_transaction,'text': qbdata});
            
            // If current billing is paid in full, clear billing and generate a pdf invoice
            if (billing_footer.solde < 0.01) then
            
                // Remove unwanted decimals if very close to zero
                if (billing_footer.solde > -0.01) then
                    billing_footer.solde = 0;
                endif
                
                // init totals
                invoices = [];
                credits = [];
                transactions = [];
                subscription = [];
                
                // Calculate totals and list current invoices, credits, transactions
                for line in billing do
                    if (line.type eq 'lead') then
                        push(invoices, line.uid);
                    endif
                    if (line.type eq 'credit') then 
                        push(credits, line.uid);
                    endif
                    if (line.type eq 'transaction') then
                        push(transactions, line.uid);
                    endif
                    if (line.type eq 'subscription') then
                        push(subscription, line.uid);
                    endif
                endfor
                void insert(table:'sr_debug', fields:{'description':'test_Billing2','text':'uid_transaction='.+uid_transaction});

                // Generate pdf invoice
                pdf = contractor::generate_pdf(transaction.rows.uid_contractor, billing);
                
                // Set account balance to Solde
                void update(tables:'sr_contractor', uid: transaction.rows.uid_contractor, fields:{'balance':billing_footer.solde});
                //V1.02       
                // Clear invoices
                for uid in invoices do
                    void update(tables:'sr_invoice', uid: uid, fields:{'completed':'yes','uid_pivotal':uid_transaction});
                   // void update(tables:'sr_invoice', uid: uid, fields:{'completed':'yes'});
                endfor
                
                //V1.02
                // Clear credits
                for uid in credits do
                    void update(tables:'sr_credit', uid: uid, fields:{'completed':'yes','uid_pivotal':uid_transaction});
                   // void update(tables:'sr_credit', uid: uid, fields:{'completed':'yes'});
                endfor
                
                //V1.02
                // Clear transactions
                for uid in transactions do
                    void update(tables:'sr_transaction', uid: uid, fields:{'completed':'yes','uid_pivotal':uid_transaction,'pre_solde':prev_solde});
                    //void update(tables:'sr_transaction', uid: uid, fields:{'completed':'yes'});
                endfor
                
                // Clear subscription
                for uid in subscription do
                    void update(tables:'sr_subscription_contractor', uid: uid, fields:{'paid':'yes','uid_pivotal':uid_transaction});
                endfor                
                
                // Send email with pdf attached
                if (pdf) then
                    automail::sendInvoicePdf(transaction.rows.uid_contractor, pdf);
                else
                    void insert(table:'sr_debug', fields:{'description':'test_Billing_error_PDF','text':'uid_transaction='.+uid_transaction});
                endif
            endif
        endf
        
        
        /**
         * v.1.1 updated on 2017/11/09 by louis.jhonny@gmail.com
         * change desc: comment line "Remove redit cards privilege"
         * 
         **/
        function trigger_payment_failed(uid_contractor, cardinfo, amount)
            configs = sql(single:true, "SELECT * FROM sn_configs WHERE uid = 1 LIMIT 1");
            contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
            if (contractor.nbrows > 0) then
                // Reduce credit threshold
                if (contractor.rows.credit_threshold > configs.rows.credit_limit_after_payment_failed) then
                    void update(tables: 'sr_contractor', uid: uid_contractor, fields:{'credit_threshold':configs.rows.credit_limit_after_payment_failed});
                endif
                // Remove credit cards privilege (for calculation of the contractors's score)
                // void update(tables: 'sr_contractor', uid: uid_contractor, fields:{'credit_cards':0});
                // Send email notifications
                // automail::paymentFailedToAdmin(uid_contractor, cardinfo, amount);
                
                
                automail::paymentFailedToContractor(uid_contractor, cardinfo, amount);
            endif
        endf
        
        function generate_pdf(uid_contractor, billing)
            contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
            lg = contractor.rows.contact_lg;
            if (lg eq '') then
                lg = 'fr';
            endif
            
            if contractor.rows.company_name_legal ne "" then
                contractor.rows.company_name;
            endif
            
            contractor_address = sql(single:true, "
                    SELECT a.*, IF(c.name_".+lg.+" IS NOT NULL, c.name_".+lg.+", a.city) as city_name 
                    FROM sr_address a 
                    LEFT JOIN sr_city c ON c.uid = a.uid_city 
                    WHERE a.uid_contractor = '?' 
                    ORDER BY a.uid ASC 
                    LIMIT 1
                ", contractor.rows.uid);
                
            //billing_footer = contractor::getBillingFooter(billing);
            billing_footer = contractor::getBillingFooterByProv(billing,contractor.rows.uid);
            
            bills = billing;
            billing = [];
            
            for b in bills do
                description = str_replace("&nbsp;", " ", b.description);
                description = str_replace("&quot;", " ", description);
                description = str_replace("&eacute;", " ", description);
                description = str_replace("&egrave;", " ", description);
                description = substr(strip_tags(description),0,(500 + strpos(description," ", 0)));
                push(billing, {"id":b.id, "date":b.date, "type":b.'type', "description":description, "address":b.address, "amount":b.amount});
            endfor
            
            content = {
                'billing': billing,
                'billing_footer': billing_footer
            };
            
            billing_pdf = insert(table:'sr_billing_pdf', fields:{});
            t = time();
            //v10
            tmpfilename = ((lg eq 'fr')? 'facture':'invoice').+"_".+uid_contractor.+"_".+billing_pdf.uid;
            //tmpfilename = ((lg eq 'fr')? 'facture':'invoice').+"_".+uid_contractor.+"_".+billing_pdf.uid.+"_".+t.secs;
            tmpfilepath = "/tmp/".+tmpfilename;
            
            write(tmpfilepath, data:"", append:false, data:read(compilefile:'/site/pdf_invoice_template.txt'));
            output = exec("/extenso/utils/pdflatex.sh", tmpfilename);
            void insert(table:'sr_debug', fields:{'description':'Billing_PDF_output','text':'output.output='.+output.output});
            success_regex = 'Output written on '.+tmpfilename.+'\.pdf';
            //V1.03
            //d = "0".+datetime(date:datetime(),format:'%Y');
            //tmpfilename = d .+ "/" .+ tmpfilename;
            if (output.output =~ success_regex) then
                void update(tables:'sr_billing_pdf', uid: billing_pdf.uid, fields:{
                    'uid_contractor': uid_contractor,
                    'pdf': tmpfilename.+".pdf",
                    'content': stringnify(content)
                });
                
                pdf = tmpfilename.+".pdf";
                void insert(table:'sr_debug', fields:{'description':'Billing_pdf_success','text':'REUSSIT - PDF='.+pdf});
                
                return tmpfilename.+".pdf";
            else
                void sql("DELETE FROM sr_billing_pdf WHERE uid = '?'", billing_pdf.uid);
                void insert(table:'sr_debug', fields:{'description':'Billing_PDF_ERROR','text':'output.error='.+output.error.+' uid_contractor='.+uid_contractor});
                automail::sendMessageAdminEmail("Erreur PDF", "Erreur: ".+ output.error,"ERREUR dans PDF");
                return false;
            endif
        endf

        //------------------------  SECTION  //TO GENERATE PDF WITH THE UID_PIVOTAL   ------------------------------------------------//
        function test_getCurrentBilling(uid_contractor, uid_pivotal)
            if (lg eq '') then
                lg = '{{use lg; lg.rows.lg}}';
            endif
            if (lg eq '') then
                lg = 'fr';
            endif
            billing = sql("
            
                SELECT  null as uid,
                        '' as id,
                        '' as date,
                        'balance' as 'type',
                        'Balance' as description,
                        '' as address,
                        balance as 'amount'
                    FROM sr_contractor 
                    WHERE uid='?'
                    
                UNION
                
                SELECT  i.uid as uid,
                        p.uid as id,
                        pc.accepted_date as date,
                        'lead' as 'type',
                        concat(cl.firstname, ' ', cl.lastname) as description,
                        concat(cl.firstname, ' ', cl.lastname, ' ', IF(a.uid IS NULL, '', CONCAT(a.street_no, ' ', a.street, ', ', IF(c.name_".+lg.+"  IS NOT NULL, c.name_".+lg.+", a.city), ', ', a.province, ' ', a.zip))) as address,
                        i.amount as 'amount'
                    FROM sr_invoice i
                    INNER JOIN sr_project_contractor pc ON pc.uid = i.uid_project_contractor
                    INNER JOIN sr_project p ON p.uid = pc.uid_project
                    INNER JOIN sr_client cl ON cl.uid = p.uid_client
                    LEFT JOIN sr_address a ON a.uid = p.uid_address
                    LEFT JOIN sr_city c ON c.uid = a.uid_city
                    WHERE i.uid_pivotal = '?'
                     
                UNION
                
                SELECT  cr.uid as uid,
                        p.uid as id,
                        cr.sn_cdate as date,
                        'credit' as 'type',
                        'Crédit' as description,
                        '' as address,
                        (pc.lead_price*-1) as 'amount'
                    FROM sr_credit cr
                    INNER JOIN sr_project_contractor pc ON pc.uid = cr.uid_project_contractor
                    INNER JOIN sr_project p ON p.uid = pc.uid_project
                    LEFT JOIN sr_address a ON a.uid = p.uid_address
                    LEFT JOIN sr_city c ON c.uid = a.uid_city
                    WHERE  
                        cr.accepted = 'yes'
                        AND cr.uid_pivotal = '?'
                        
                UNION
                
                SELECT  uid,
                        '' as id,
                        sn_cdate as date,
                        'transaction' as 'type',
                        CONCAT('Transaction', ' ', DATE_FORMAT(sn_cdate, '%Y-%m-%d') , ' ', uniqueref) as description,
                        '' as address,
                        (amount*-1) as 'amount'
                    FROM sr_transaction t
                    WHERE   t.uid_pivotal = '?'
                    
                UNION
                
                SELECT  sc.uid as uid,
                        '' as id,
                        sc.start_date as date,
                        'subscription' as type,
                        sp.name_? as description,
                        '' as address,
                        (sc.price - ifnull(sc.discount,0)) as amount
                    FROM sr_subscription_contractor sc
                    INNER JOIN sr_subscription_plan sp ON sp.uid = sc.uid_subscription_plan
                    WHERE sc.uid_pivotal = '?'

                        
                ORDER BY (type = 'transaction') ASC, date ASC, type DESC
                
                ", uid_pivotal, uid_pivotal, uid_pivotal, uid_pivotal, "{{lg.rows.lg}}", uid_pivotal);
            
            "<br><br>";
            "billing sql: " .+ billing.sql;
            "<br><br>";    
                
            return billing.rows;
            
            
        endf
        
        function test_getAllContractorsCurrentBillingTotalsQuery() // returns uid_contractor,balance,invoices_total,credits_total,transactions_total
            return "
                SELECT 
                    c.uid AS 'uid_contractor',
                    c.balance as 'balance',
                    IFNULL((
                        SELECT sum(i.amount) 
                        FROM sr_invoice i 
                        INNER JOIN sr_project_contractor pc ON pc.uid = i.uid_project_contractor
                        WHERE pc.uid_contractor = c.uid
                        AND uid_pivotal = '?'
                    ),0) AS 'invoices_total',
                    IFNULL((
                        SELECT sum(pc.lead_price) 
                        FROM sr_credit cr 
                        INNER JOIN sr_project_contractor pc ON pc.uid = cr.uid_project_contractor
                        WHERE pc.uid_contractor = c.uid
                        AND uid_pivotal = '?'
                    ),0) AS 'credits_total',
                    IFNULL((
                        SELECT sum(t.amount)
                        FROM sr_transaction t
                        WHERE t.uid_contractor = c.uid
                        AND uid_pivotal = '?'
                    ),0) AS 'transactions_total'
                FROM sr_contractor c
            ";
        endf


        //function test_trigger_transaction(uid_pivotal, email)
        function recreate_transaction(uid_pivotal, email, upd)
            //void insert(table:'sr_debug', fields:{'description':'test_Billing_debut2_','text':'uid_transaction='.+uid_pivotal});
            transaction = sql(single:true, "SELECT * FROM sr_transaction WHERE uid = '?'", uid_pivotal);
            uid_transaction = uid_pivotal;
            uid_contractor = transaction.rows.uid_contractor;
            
            //Verifier contact_lg
            contractor = sql(single:true,"SELECT credit_threshold,contact_lg FROM sr_contractor WHERE uid='?'", transaction.rows.uid_contractor);
            void insert(table:'sr_debug', fields:{'description':'test_Billing_debut2a_  Contractor=','text':contractor});
            
            configs = sql(single:true, "SELECT * FROM sn_configs WHERE uid = 1 LIMIT 1");

            // Calculate current billing
            //billing = contractor::test_getCurrentBilling(transaction.rows.uid_contractor, uid_pivotal, lg:contractor.rows.contact_lg);
            billing = contractor::test_getCurrentBilling(transaction.rows.uid_contractor, uid_pivotal);

            billing_footer = contractor::getBillingFooterByProv(billing,transaction.rows.uid_contractor);

            // If current billing is paid in full, clear billing and generate a pdf invoice
            // if (billing_footer.solde < 0.01) then
            
                // Remove unwanted decimals if very close to zero
                if (billing_footer.solde > -0.01) then
                    billing_footer.solde = 0;
                endif
                
                
                // Generate pdf invoice
                contractor::test_generate_pdf(uid_contractor, billing, uid_transaction, email, upd);

            //endif
        endf


        function test_generate_pdf(uid_contractor, billing, uid_pivotal, email, save_pdf)
            contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
            lg = contractor.rows.contact_lg;
            if (lg eq '') then
                lg = 'fr';
            endif
            
            contractor_address = sql(single:true, "
                    SELECT a.*, IF(c.name_".+lg.+" IS NOT NULL, c.name_".+lg.+", a.city) as city_name 
                    FROM sr_address a 
                    LEFT JOIN sr_city c ON c.uid = a.uid_city 
                    WHERE a.uid_contractor = '?' 
                    ORDER BY a.uid ASC 
                    LIMIT 1
                ", contractor.rows.uid);
            void insert(table:'sr_debug', fields:{'description':'test_Billing_smp','text':'Avant billing footer, uid_c='.+uid_contractor});


            billing_footer = contractor::getBillingFooterByProv(billing,contractor.rows.uid);
            billing_footer.paid = billing_footer.total;
            billing_footer.solde = billing_footer.paid - billing_footer.total;
            
            bills = billing;
            billing = [];
            
            for b in bills do
                description = str_replace("&nbsp;", " ", b.description);
                description = str_replace("&quot;", " ", description);
                description = str_replace("&eacute;", " ", description);
                description = str_replace("&egrave;", " ", description);
                description = substr(strip_tags(description),0,(500 + strpos(description," ", 0)));
                push(billing, {"id":b.id, "date":b.date, "type":b.'type', "description":description, "address":address, "amount":b.amount});
            endfor
            
            content = {
                'billing': billing,
                'billing_footer': billing_footer
            };
            
            billing_pdf = insert(table:'sr_billing_pdf', fields:{});
            t = time();
            
            //v10
            tmpfilename = ((lg eq 'fr')? 'facture':'invoice').+"_".+uid_contractor.+"_".+billing_pdf.uid;
            //tmpfilename = ((lg eq 'fr')? 'facture':'invoice').+"_".+uid_contractor.+"_".+billing_pdf.uid.+"_".+t.secs;
            tmpfilepath = "/tmp/".+tmpfilename;
            filepath = "/bill/bills_2017_03/";
            
            write(tmpfilepath, data:"", append:false, data:read(compilefile:'/site/pdf_invoice_template.txt'));
            output = exec("/extenso/utils/pdflatex_v2.sh", tmpfilename);
            void insert(table:'sr_debug', fields:{'description':'test_Billing_PDF','text':'output.output='.+output.output});
            success_regex = 'Output written on '.+tmpfilename.+'\.pdf';
            
            // output;
            
            transaction_date = sql(single:true, "SELECT max(sn_cdate) as transaction_date FROM sr_transaction WHERE uid_pivotal = '?'", uid_pivotal);
            
            if (output.output =~ success_regex) then
                if(save_pdf eq 'yes') then
                    void update(tables:'sr_billing_pdf', uid: billing_pdf.uid, fields:{
                        'sn_cdate': transaction_date.rows.transaction_date,
                        'uid_contractor': uid_contractor,
                        'pdf': tmpfilename.+".pdf",
                        'content': stringnify(content)
                    });
                endif
                pdf = tmpfilename.+".pdf";
                
                if(email ne '') then
                    automail::test_sendInvoicePdf(transaction.rows.uid_contractor, pdf, to: email);
                endif
                
                return pdf;
            else
                void sql("DELETE FROM sr_billing_pdf WHERE uid = '?'", billing_pdf.uid);
                automail::sendMessageAdminEmail("Erreur PDF", "Erreur: ".+ output.error,"ERREUR dans PDF");
            endif
        endf
  //------------------     
  

  //------------------TEST SECTION------------------
        
        function test_generate_pdf_simple(uid_contractor)
            contractor = sql(single:true, "SELECT * FROM sr_contractor WHERE uid = '?'", uid_contractor);
            lg = contractor.rows.contact_lg;
            if (lg eq '') then
                lg = 'fr';
            endif
            
            contractor_address = sql(single:true, "
                    SELECT a.*, IF(c.name_".+lg.+" IS NOT NULL, c.name_".+lg.+", a.city) as city_name 
                    FROM sr_address a 
                    LEFT JOIN sr_city c ON c.uid = a.uid_city 
                    WHERE a.uid_contractor = '?' 
                    ORDER BY a.uid ASC 
                    LIMIT 1
                ", contractor.rows.uid);
            void insert(table:'sr_debug', fields:{'description':'test_Billing_smp','text':'Avant billing footer, uid_c='.+uid_contractor});
 
//            tmpfilename = "aaaa".+"_".+str_pad("123",6,"0",1).+"_".+"1299";
            tmpfilename = "aaaa".+"_".+str_pad(uid_contractor,6,"0",1).+"_".+"777";
            //  year/uid_contractor/   
            tmppdfpath = "0".+datetime(date:datetime(),format:'%Y').+"/".+str_pad(uid_contractor,6,"0",1).+"/";
            //tmpfilename = ((lg eq 'fr')? 'facture':'invoice').+"_".+.+"_".+billing_pdf.uid.+"_".+t.secs;
            tmpfilepath = "/tmp/".+tmpfilename;
            
            write(tmpfilepath, data:"", append:false, data:read(compilefile:'/site/pdf_invoice_template.txt'));
        //    output = exec("/extenso/utils/pdflatex.sh", tmpfilename);
            output = exec("/extenso/utils/pdflatex.sh", tmpfilename,tmppdfpath);

           
            void insert(table:'sr_debug', fields:{'description':'test_Billing','text':'après PDF- tmpfilename='.+tmpfilename});
           
            success_regex = 'Output written on '.+tmpfilename.+'\.pdf';
            void insert(table:'sr_debug', fields:{'description':'test_Billing','text':'success_regex='.+success_regex});
            void insert(table:'sr_debug', fields:{'description':'test_Billing','text':'output.output='.+output.output});
            void insert(table:'sr_debug', fields:{'description':'test_Billing','text':'output.error='.+output.error});
            void insert(table:'sr_debug', fields:{'description':'test_Billing_','text':'output='.+output});
            if (output.output =~ success_regex) then
                pdf = tmpfilename.+".pdf";
                void insert(table:'sr_debug', fields:{'description':'test_Billing','text':'REUSSIT - PDF='.+pdf});
                // Send email with pdf attached
                if (pdf) then
                    //automail::sendInvoicePdf(uid_contractor, pdf);
                    void insert(table:'sr_debug', fields:{'description':'test_Billing_pdfOK','text':'REUSSIT - PDF='.+tmppdfpath.+pdf});
                else
                    void insert(table:'sr_debug', fields:{'description':'test_Billing_PDF_NO','text':'NO - PDF='.+pdf});
                endif
            endif
        endf
        
        
       function generate(cuid)
       
         template_en = "/site/profiles/profile_template.sn";
         template_fr = "/site/profiles/profile_modele.sn";
    
        res = sql("select * from sr_contractor where active = 'yes' and uid = ?", cuid);
    	counter = 0;
        contractors = res.rows;
     	contractors;
     	
        //create data structure contractor to be used in templates.
        for contractor in contractors do
            photos = sql("SELECT * FROM sr_gallery WHERE uid_contractor='?' AND active='yes' ORDER BY priority ASC, uid DESC", contractor.uid);    	
            address = sql(single:true, "SELECT a.street_no, a.street, a.zip, a.province, c.name_? as real_city FROM sr_address a INNER JOIN sr_city c ON a.uid_city = c.uid WHERE uid_contractor = ?", contractor.contact_lg, contractor.uid);
            contractor_services = sql("SELECT * FROM sr_contractor_service cs INNER JOIN sr_service s ON s.uid = cs.uid_service WHERE cs.uid_contractor = ? GROUP BY name_?", contractor.uid, contractor.contact_lg);
            profil = sql(single:true, "SELECT * FROM sr_contractor_profil WHERE uid_contractor='?'", contractor.uid);
            customLicenses = sql("SELECT * FROM sr_additional_license WHERE uid_contractor='?'", contractor.uid);
            update_profile = sql("UPDATE sr_contractor SET show_profile = 'yes' WHERE show_profile IS NULL and uid = ? ", contractor.uid);
    
            
            licenses = customLicenses.rows;
            lic_iterator = 0;
            current_profil = profil.rows;
            pics = photos.rows;
            services = contractor_services.rows;
            numpic = 0;
            contractor.streetNo = address.rows.street_no;
            contractor.street = address.rows.street;
            contractor.city = address.rows.real_city;
            contractor.zip = address.rows.zip;
            contractor.province = address.province;
            //contractor.services = services;
            contractor.language = lg;
            contractor.mylogo = current_profil.company_logo;
            contractor.mybanner = current_profil.banner_1;
    
    
            current_page = contractor.seo;
    		lg = contractor.contact_lg;
    		
    		//Company description length
    		if(contractor.company_desc.length() > 200) then
    		    if(lg eq 'fr') then
        		    new_string = contractor.company_desc.substr(0,200) .+ "<a href='#apropos'>Lire plus</a>";
    		        contractor.brieve_desc = new_string;
    		    else
        		    new_string = contractor.company_desc.substr(0,200) .+ "... <a href='#about'>Read more</a>";
    		        contractor.brieve_desc = new_string;
    		    endif
    		endif
    		
    		//Generate bgcolor if there is no logo
    		if(current_profil.company_logo ne "") then
                contractor.logoBg = "";
            else
        		contractor.logoBg = "#eeeeee";
    		endif
    		
            //create album element
            for thePic in pics do
                contractor.pic[numpic] = thePic.photo;
                numpic++;
            endfor
            
            for l in licenses do 
                contractor.licname[lic_iterator]  = l.lic_name;
                contractor.licnumber[lic_iterator] = l.lic_number;
                
                contractor.lics .+= '<tr><th><h5>';
                contractor.lics .+= contractor.licname[lic_iterator];
                contractor.lics .+= '</h5></th><td>';
                contractor.lics .+= contractor.licnumber[lic_iterator];
                contractor.lics .+= '</td></tr>';
                lic_iterator = lic_iterator + 1;
            endfor
    
            
            
            //load contractor services
            i = 0;
            for s in services do 
                if lg eq "fr" then
                    contractor.srv[i] = s.name_fr;
                    i = i + 1;
                elseif lg eq "en" then
                    contractor.srv[i] = s.name_en;
                    i = i + 1;
                endif
            endfor
    
    
            if current_page.length() > 0 then
    			//profile has not been updated, since last update skip
    		else
                seo = lc(esc(nodouble:true,filter:"filenameinutf8", contractor.company_name));
                void sql("update sr_contractor set seo = '?' where uid = '?'", seo, contractor.uid);
                contractor.seo = seo;
                
                  if(lg eq 'fr') then
                    // generate the profile in french for the contractor
                    generate(delcompile: false, compile: true, file: "/html/entrepreneur/" .+ contractor.seo .+ ".snc",template: template_fr);
                  elseif(lg eq 'en') then
                    // generate the profile in english for the contractor
                    generate(delcompile: false, compile: true, file: "/html/contractor/" .+ contractor.seo .+ ".snc",template: template_en);
                  endif
    
    			  counter++;
            endif
    
         	//log information into sr_debug for each profile updated according to the generation language.
             if lg eq "fr" then
        		void insert(table:'sr_debug', fields:{'description':'Profile generation for contractor '.+ contractor.uid,'text':'page='.+ "/html/entrepreneur/" .+ contractor.seo .+ ".snc"});
             elseif lg eq "en" then
        		void insert(table:'sr_debug', fields:{'description':'Profile generation for contractor '.+ contractor.uid,'text':'page='.+ "/html/contractor/" .+ contractor.seo .+ ".snc"});
             endif
        
            endfor
        	
        	//count number of generation for this rope
        	void insert(table:'sr_debug', fields:{'description':'Total profile generation for this rope is '.+ counter,'text':'waiting for next rope'});
        endf
        
        /*
        *
        *Check if a contractor already exists
        */
        function contractor_exists(company_name)
            query = "select * from sr_contractor where company_name = '?'";
            exists = sql(single:true, query, company_name);

            if(exists.nbrows > 0) then
                return true;
            else
                return false;
            endif
        endf
        
        
        /*
        *
        *Check if a contractor already exists
        */
        function expert_exists(email)
            query = "select * from sr_contractor where contact_email = '?'";
            exists = sql(single:true, query, email);

            if(exists.nbrows > 0) then
                return true;
            else
                return false;
            endif
        endf
        
        function profile_ct(phrase,name;...)
            p = substr(phrase, 0, 100); 
            code = name .+ " - " .+ p; 
            
            exists = sql(single:true,"SELECT * FROM ct WHERE code ='?'", code);

            if(exists.nbrows == 0) then
                void insert(table:'ct', fields:{'format':'text', 'text_en':phrase, 'text_fr':phrase, 'code':code});
            endif
            
            if(lg eq 'en') then
                txt = sql(single:true,"SELECT text_en as phrase FROM ct WHERE code ='?'", code);
            else
                txt = sql(single:true,"SELECT text_fr as phrase FROM ct WHERE code ='?'", code);
            endif
            
            
            return txt.rows.phrase;
            
        endf
        
        function contractorTime(uid_contractor, sysdate)
            c = sql(single:true,"SELECT t.uid_province, t.name_fr, p.utc_offset, c.uid FROM sr_contractor c INNER JOIN sr_territory t ON t.uid = c.uid_territory
                             INNER JOIN sr_province p ON p.uid = t.uid_province
                             WHERE c.uid = '?'",
                             uid_contractor);
                             
            offset = c.rows.utc_offset + 4;
            
                             
            return datetime(date:sysdate,op:offset .+ "h");
        endf
        
        
        function expertSendSurveyToClient(uid_project, uid_contractor)
            lead = sql(single:true,
                        "SELECT pc.* FROM sr_project_contractor pc 
                        INNER JOIN sr_project p ON p.uid = pc.uid_project 
                        WHERE pc.uid_project = '?' 
                        AND pc.uid_contractor = '?' 
                        AND (p.xpert_sent_survey IS NULL OR p.xpert_sent_survey = '' OR p.xpert_sent_survey = 'no')", 
                        uid_project, uid_contractor);
            
            if(lead.nbrows > 0) then
                automail::expertSendSurveyToClient(lead.rows.uid);
                void update(tables: 'sr_project', fields: {
                  'xpert_sent_survey': 'yes'
                }, uid: uid_project);
                
                return true;
            else
                return false;
            endif
        endf
        
        //*******************************************************************************************************//
        // Quickbooks application SALES RECEIPT créé via l'API de Quickbooks Online pour petite entreprise
        //*******************************************************************************************************//
        
        /**
         * Charger les access générer par l'application Tiers qbapp dand le fichier /qbapp/jsondata/access.json
         * @args {uid_transaction} integer
         * @return JSON
         * 
         **/        
        function getQBAccess()
            access = read('/apps/jsondata/access.json');
            return unstringnify(access);
        endf
        
        function getQBSalesReceipt(query, reamlId)
            auth = unstringnify(contractor::getQBAccess());
            encoded_query = urlencode(query);
            prod_url = "https://quickbooks.api.intuit.com";
            full_url = prod_url .+ "/v3/company/" .+ reamlId .+ "/query?query=" .+ encoded_query .+ "&minorversion=51";
            
            res = curl(
                error: t,
                url: full_url, 
                header:"Content-Type: application/json",
                header:"Accept: application/json",
                header: "Authorization: Bearer " .+ auth.access_token,
                sslversion:6
                );

            if(t ne "") then
                return res.body;
            else
                return t;
            endif
        endf
        
        
        function getQBTaxeCode(taxe_code, reamlId)
        
            taxe_code_query = urlencode("select Id From TaxCode Where Name = '" .+ taxe_code .+ "'");

            auth = unstringnify(contractor::getQBAccess());
            
            prod_url = "https://quickbooks.api.intuit.com";
            
            full_url = prod_url .+ "/v3/company/" .+ reamlId .+ "/query?query=" .+ taxe_code_query .+ "&minorversion=51";
            
            res = curl(
                error: t,
                url: full_url, 
                header:"Content-Type: application/json",
                header:"Accept: application/json",
                header: "Authorization: Bearer " .+ auth.access_token,
                sslversion:6
                );
            json = unstringnify(res.body);

            if(json ne "") then
                return json.QueryResponse.TaxCode[0].Id;
            else
                return 7;
            endif
        endf


        /**
         * Trouver un client existant dans Quickbooks Online sinon créer le client
         * @args {uid_transaction} integer
         * @return JSON
         * 
         **/
        function getQBCustomer(company_data, reamlId)

            if(company_data.customer ne "") then
                customer_query = urlencode("select * from Customer Where DisplayName = '" .+ company_data.customer .+ "'");
            else
                return false;
            endif
            
            auth = unstringnify(contractor::getQBAccess());
            
            prod_url = "https://quickbooks.api.intuit.com";
            full_url = prod_url .+ "/v3/company/" .+ reamlId .+ "/query?query=" .+ customer_query .+ "&minorversion=51";
            
            res = curl(
                error: t,
                url: full_url, 
                header:"Content-Type: application/json",
                header:"Accept: application/json",
                header: "Authorization: Bearer " .+ auth.access_token,
                sslversion:6
            );
            
            jsondata = unstringnify(res.body);
            if(jsondata.QueryResponse.Customer) then
                jsondata = unstringnify(res.body);
                return jsondata.QueryResponse.Customer[0];
            else
                newQBCustomer = {
                  "FullyQualifiedName": company_data.customer, 
                  "PrimaryEmailAddr": {
                    "Address": company_data.email
                  }, 
                  "DisplayName":company_data.customer , 
                  "Notes": "Here are other details.", 
                  "FamilyName": company_data.contact_lastname, 
                  "PrimaryPhone": {
                    "FreeFormNumber": company_data.contact_phone
                  }, 
                  "CompanyName": company_data.customer, 
                  "BillAddr": {
                    "CountrySubDivisionCode":company_data.billing_address_country_subdivision_code, 
                    "City": "Mountain View", 
                    "PostalCode": company_data.billing_address_zip, 
                    "Line1": company_data.sale.billing_address_line_1, 
                    "Country": "CANADA"
                  }, 
                  "GivenName": company_data.contact_firstname
                };                
                customer = contractor::createQBCustomer(newQBCustomer, reamlId);
                jsondata = unstringnify(customer);
                
                return jsondata.Customer;
            endif
        endf
        
        
        /**
         * Ajouter un nouveau client dans Quickbooks Online
         * @args {jsonData: Json, realmId: string}
         * @return JSON
         * 
         **/        
        function createQBCustomer(jsonData, reamlId)
            auth = unstringnify(contractor::getQBAccess());
            prod_url = "https://quickbooks.api.intuit.com";
            full_url = prod_url .+ "/v3/company/" .+ reamlId .+ "/customer?minorversion=51";
            
            res = curl(
                error: t,
                url: full_url, 
                header:"Content-Type: application/json",
                header:"Accept: application/json",
                header: "Authorization: Bearer " .+ auth.access_token,
                data: jsonData,
                sslversion:6
            );

            return res.body;
        endf
        
        
        /**
         * Creer un SalesReceipt dans Quickbooks Online
         * @args {uid_transaction} integer
         * @return JSON
         * 
         **/
        function createSalesReceipt(uid_transaction, realmId)
            auth = unstringnify(contractor::getQBAccess());
            sale = contractor::getQBData(uid_transaction);
            
            customer = contractor::getQBCustomer(sale, realmId);
            taxe_code = contractor::getQBTaxeCode(sale.Line_item_tax_code, reamlId);
            
            // create SalesReceipt json object only if the customer exists or has been succefully created.
            if(customer.Id ne "") then
                jsondata =     
                {
                    "domain":"QBO",
                    "DocNumber":sale.sales_receipt_no,
                    "TxnDate":sale.transaction_date,
                    "CurrencyRef":{
                        "value":"CAD",
                        "name":"Dollar canadien"
                    },
                    
                    "Line": [
                        {
                          "Description": "Lead", 
                          "DetailType": "SalesItemLineDetail", 
                          "SalesItemLineDetail": {
                            "TaxCodeRef": {
                                "value": contractor::getQBTaxeCode(sale.Line_item_tax_code, realmId),
                                "name": sale.Line_item_tax_code                              
                            }, 
                            "Qty": sale.line_item_quantity, 
                            "UnitPrice": sale.Total, 
                            "ItemRef": {
                              "name": "Sales", 
                              "value": "1"
                            }
                          }, 
                          "LineNum": 1, 
                          "Amount": sale.Total, 
                          "Id": "1"
                        }, 
                        {
                          "DetailType": "SubTotalLineDetail", 
                          "Amount": sale.Total, 
                          "SubTotalLineDetail": {}
                        }
                    ],                     
                        
                    "TxnTaxDetail":{
                        "TotalTax":sale.taxes
                    },
                    "CustomerRef":{
                        "value":customer.Id,
                        "name":customer.DisplayName
                    },
                    "BillAddr":{
                        "Line1":sale.billing_address_line_1,
                        "CountrySubDivisionCode":sale.billing_address_country_subdivision_code,
                        "PostalCode":sale.billing_address_zip
                    },
                    "GlobalTaxCalculation":"TaxExcluded",
                    "PaymentMethodRef":{
                        "value":"2",
                        "name":sale.payment_method
                    },
                    "PaymentRefNum": sale.reference_no,
                    "DepositToAccountRef":{
                        "value":sale.manual_transaction,
                        "name":sale.deposit_to
                    }
                };
                
                jsondata;"<br><br>";
                
                prod_url = "https://quickbooks.api.intuit.com";
                full_url = prod_url .+ "/v3/company/" .+ realmId .+ "/salesreceipt?minorversion=51";
                
                res = curl(
                    error: t,
                    url: full_url, 
                    header:"Content-Type: application/json",
                    header:"Accept: application/json",
                    header: "Authorization: Bearer " .+ auth.access_token,
                    data: jsondata,
                    sslversion:6
                );
                
                void sql("UPDATE sr_transaction SET quickbooks = 'yes' WHERE uid = '?'", uid_transaction);

                return res.body;
            endif
        endf
        
        
        /**
         * Recueillir les données nécéssaires pour une transaction de l'entrepreneur
         * @args {uid_transaction} integer
         * @return JSON
         * 
         **/
        function getQBData(uid_transaction)
            qbdata = sql(single:true,
                "SELECT ctr.uid,
                CONCAT(ctr.uid, '-', ctr.truid) as sales_receipt_no,
                CONCAT(REPLACE(REPLACE(ctr.company_name, '’', ''), '\'', ''), ' - ',ctr.uid) as customer,
                CONCAT(atx.street_no, ' ', REPLACE(atx.street, '\'', '')) as billing_address_line_1,
                REPLACE(atx.city, '\'', '') as billing_address_city,
                atx.zip as billing_address_zip,
                atx.province as billing_address_country_subdivision_code,
                ctr.sn_cdate as transaction_date,
                ctr.status,
                ctr.uniqueref as reference_no,
                (atx.tps + atx.tvp) AS taxes,
                ROUND((ctr.amount / (1 + atx.tps + atx.tvp)), 2) AS Total, 
                'TaxEcluded' as global_tax_calculation,
                atx.accounting_tax_code as Line_item_tax_code,
                'Credit Card' as payment_method,
                'Nuvei / Pivotal' as deposit_to,
                1 as line_item_quantity,
                ctr.email,
                ctr.contact_firstname,
                ctr.contact_lastname,
                ctr.contact_phone,
                if(ctr.manual_transaction = 'yes',52,5) as manual_transaction
                FROM
                    (
                        SELECT c.uid, c.company_name, c.contact_firstname, c.contact_lastname, c.email, c.contact_phone, tr.uid as truid, tr.status, tr.amount, tr.sn_cdate, tr.uniqueref, tr.manual_transaction
                        FROM sr_contractor c 
                        INNER JOIN sr_transaction tr ON tr.uid_contractor = c.uid
                        WHERE tr.status = 'succeeded'
                    ) as ctr
                INNER JOIN
                    (
                        SELECT a.*, tx.tvp, tx.tps, tx.accounting_tax_code FROM sr_address a INNER JOIN sr_taxes tx ON tx.code_prov = a.province
                    ) as atx
                ON ctr.uid = atx.uid_contractor 
                WHERE (ctr.status = 'succeeded' OR ISNULL(ctr.status ) OR ctr.status = '') AND ctr.truid = '?'
                GROUP BY ctr.truid,sales_receipt_no,customer,total,transaction_date,reference_no,taxes, 
                ROUND(total/(1+taxes),2), global_tax_calculation, atx.accounting_tax_code,payment_method,deposit_to  
                ORDER BY ctr.truid
                ",
                uid_transaction
            );
            
            return qbdata.rows;
        endf
        
        //*******************************************************************************************************//
        // Fin de l'API QuickBooks Online SALES RECEIPTS
        //*******************************************************************************************************//        
    endp
}}
